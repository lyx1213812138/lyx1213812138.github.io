{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/arknights/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/arknights/source/README.md","path":"README.md","modified":0,"renderable":1},{"_id":"themes/arknights/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/arknights/source/font/BenderLight.ttf","path":"font/BenderLight.ttf","modified":0,"renderable":1},{"_id":"themes/arknights/source/font/Bender.ttf","path":"font/Bender.ttf","modified":0,"renderable":1},{"_id":"themes/arknights/source/font/JetBrainsMono-Regular.woff2","path":"font/JetBrainsMono-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/arknights/source/css/arknights.styl","path":"css/arknights.styl","modified":0,"renderable":1},{"_id":"themes/arknights/source/js/arknights.js","path":"js/arknights.js","modified":0,"renderable":1},{"_id":"themes/arknights/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/arknights/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/arknights/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/arknights/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/arknights/source/img/bk.jpg","path":"img/bk.jpg","modified":0,"renderable":1},{"_id":"themes/arknights/source/img/pc-bg.jpg","path":"img/pc-bg.jpg","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/encrypt/hbe.js","path":"lib/encrypt/hbe.js","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/encrypt/hbe.style.css","path":"lib/encrypt/hbe.style.css","modified":0,"renderable":1},{"_id":"themes/arknights/source/img/faction/1.png","path":"img/faction/1.png","modified":0,"renderable":1},{"_id":"themes/arknights/source/img/faction/3.png","path":"img/faction/3.png","modified":0,"renderable":1},{"_id":"themes/arknights/source/img/faction/5.png","path":"img/faction/5.png","modified":0,"renderable":1},{"_id":"themes/arknights/source/img/faction/2.png","path":"img/faction/2.png","modified":0,"renderable":1},{"_id":"themes/arknights/source/img/faction/4.png","path":"img/faction/4.png","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-brands-400.ttf","path":"lib/fontawesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-brands-400.woff2","path":"lib/fontawesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-regular-400.ttf","path":"lib/fontawesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/fontawesome/css/all.min.css","path":"lib/fontawesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-regular-400.woff2","path":"lib/fontawesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-solid-900.ttf","path":"lib/fontawesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-v4compatibility.woff2","path":"lib/fontawesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-v4compatibility.ttf","path":"lib/fontawesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-solid-900.woff2","path":"lib/fontawesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/logo.png","path":"logo.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/其他/强化学习,md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1731572112735},{"_id":"source/logo.png","hash":"9836c4ae46fe1fac39851b89f1f667c5448e77f1","modified":1707233808583},{"_id":"source/.git/FETCH_HEAD","hash":"6cb4dc5b529a8b7619f04f40153268ab943eb7ba","modified":1703429403990},{"_id":"source/.git/COMMIT_EDITMSG","hash":"3ab30be6d6b30408e6eaee2c2a18a08a6f3e6568","modified":1709364737984},{"_id":"source/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1697358128442},{"_id":"source/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1697338785386},{"_id":"source/.git/ORIG_HEAD","hash":"9fe772ab04927d15fb77c0787792eb84892996f7","modified":1703429404070},{"_id":"source/.git/config","hash":"d825c27627685bbd05af1984b3e4bdac5339a9d9","modified":1724204251985},{"_id":"source/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1697338785404},{"_id":"source/.git/index","hash":"9bb704891518bf6ca398022d720379bd1b673455","modified":1709364737981},{"_id":"source/.git/packed-refs","hash":"5f517a01c5b62e976475aa49db6b5743ed089d33","modified":1697338817862},{"_id":"source/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1697338785386},{"_id":"source/Proverb/index.md","hash":"42269f196d994fbf77c33a5f91409665447f55be","modified":1710422858930},{"_id":"source/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1697338785386},{"_id":"source/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1697338785386},{"_id":"source/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1697338785386},{"_id":"source/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1697338785386},{"_id":"source/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1697338785402},{"_id":"source/.git/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1697338785386},{"_id":"source/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1697338785386},{"_id":"source/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1697338785386},{"_id":"source/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1697338785386},{"_id":"source/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1697338785402},{"_id":"source/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1697338785402},{"_id":"source/_posts/.obsidian/app.json","hash":"7bc0c36be06d281bf91bf266eba77c73b2a28f87","modified":1737348844488},{"_id":"source/_posts/.obsidian/community-plugins.json","hash":"209486293608276a42d5e9bcf54f6c4832a579c9","modified":1734504756763},{"_id":"source/_posts/.obsidian/appearance.json","hash":"35e48e084126c009ea5e930086c7dfe0a23c371e","modified":1737348844491},{"_id":"source/_posts/.obsidian/canvas.json","hash":"610a6570296b781bd5eb988dae64cd9b27d1cd03","modified":1708660075372},{"_id":"source/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1697338785404},{"_id":"source/.git/hooks/sendemail-validate.sample","hash":"74cf1d5415a5c03c110240f749491297d65c4c98","modified":1697338785403},{"_id":"source/_posts/.obsidian/graph.json","hash":"a93bba9a59cf4c87a0b0e2242289276c8b47417f","modified":1708660234986},{"_id":"source/_posts/.obsidian/core-plugins-migration.json","hash":"688b44c61ce85d9ac421b1a310a72c1348bc9b51","modified":1730441314862},{"_id":"source/_posts/.obsidian/types.json","hash":"dc2e112dbbb2985038fa131c9416df5b56f1a74d","modified":1737348846791},{"_id":"source/_posts/.obsidian/daily-notes.json","hash":"46860cfc75dee2583ab134aec6a94324fc816aa7","modified":1709365559466},{"_id":"source/_posts/前端/CSS.md","hash":"b4e66cac70862cd305b50a64b59f48ce471c3638","modified":1734596376915},{"_id":"source/_posts/.obsidian/core-plugins.json","hash":"688b44c61ce85d9ac421b1a310a72c1348bc9b51","modified":1737348844017},{"_id":"source/_posts/_template/new file template.md","hash":"a854940571f465d9434c02897e2b9d785b60f321","modified":1711451714250},{"_id":"source/_posts/前端/HTML.md","hash":"b63f0fa21944eba3defaa625dbbec002315ee2fa","modified":1708673042429},{"_id":"source/_posts/.obsidian/hotkeys.json","hash":"ce38fdfd793da45fd06759a6c00d7786494dfb47","modified":1709384673523},{"_id":"source/_posts/前端/Node.js.md","hash":"75317dfb2b148294a2b3554e4bd11e80303af1d1","modified":1709626274447},{"_id":"source/_posts/前端/SSE 流式传输.md","hash":"9ff8eca7f2f1180973f2aabcc19c45ec5937e215","modified":1725949943369},{"_id":"source/_posts/前端/Vue3.md","hash":"f6a59a99ad0eb7b5282d601e81a5527525e369f1","modified":1723279637485},{"_id":"source/_posts/前端/ToBeDone.md","hash":"cd17653dce7782d3af5690ba8ee1170ec7bbf422","modified":1727062852906},{"_id":"source/_posts/前端/熬测出题——一架飞机.md","hash":"add6236438d87fb8e39489cb155cc34a5898405a","modified":1727061433391},{"_id":"source/_posts/前端/新人任务学习笔记.md","hash":"83f3ba541002a2406b8ff37d88e7990882c0cbff","modified":1727062830179},{"_id":"source/_posts/.obsidian/workspace.json","hash":"7fbb6ba5bb3683545805e66c34abad45f6f20b34","modified":1737348943336},{"_id":"source/_posts/前端/杂记.md","hash":"498693fdbd3f9dd5a495aeb2022cb8bf4eaeeaeb","modified":1732975645744},{"_id":"source/.git/logs/HEAD","hash":"c15f9bb3eda3738045b5437fa92ec225e4625420","modified":1709364737989},{"_id":"source/_posts/asset/Pasted image 20240228133157.png","hash":"fbe5564e0ee97df5eeb4a093eab1991c4ebe1e7b","modified":1709098317735},{"_id":"source/_posts/前端/联创分享——Hexo原理浅析.md","hash":"a5a0312aab8b35f467f59940efb46bd855b1f1b9","modified":1711455658198},{"_id":"source/_posts/asset/Pasted image 20240228132408.png","hash":"38d5ca7212d9ededae2478a249861549d9cf2694","modified":1709097848529},{"_id":"source/_posts/asset/Pasted image 20240228162527.png","hash":"deceee9b3880f21e21ae336d08088451fd225f14","modified":1709108727200},{"_id":"source/_posts/asset/Pasted image 20240228134545.png","hash":"d4524bb27749cccecb6c53da0fdea3fead8093f9","modified":1709099145045},{"_id":"source/_posts/asset/Pasted image 20240228134408.png","hash":"6c802d522e1abebac3a59ee3a58afe47c38e83c7","modified":1709099048765},{"_id":"source/_posts/asset/Pasted image 20240228134002.png","hash":"1b03fe63038e927b063dc72cb7ea9e89f9bfd809","modified":1709098802504},{"_id":"source/_posts/asset/Pasted image 20240228134327.png","hash":"9437d12a6a755b7ad0aafcb067a424d8572829bb","modified":1709099007189},{"_id":"source/_posts/asset/Pasted image 20240228162415.png","hash":"e484db729dfbf9af636cd3be5975e97bd532bc22","modified":1709108655524},{"_id":"source/_posts/asset/Pasted image 20240302153643.png","hash":"3725f5c93ed7fc931c36b5e6bcd980112c64b3d1","modified":1709365003533},{"_id":"source/_posts/后端/分布式——MapReduce，GFS.md","hash":"c5061f698193f3eac7318928b43d4e0ddb08a12c","modified":1734262285904},{"_id":"source/_posts/后端/掘金笔记.md","hash":"7a27f727944ed1e286a66d9b7c7624e30b36a22d","modified":1731219650354},{"_id":"source/_posts/后端/DB.md","hash":"15c40031b278485d75e18488b2e2b0137eee4a24","modified":1734599761089},{"_id":"source/_posts/学习项目/Bilibili清理计划.md","hash":"c38ce9181060908d8580f2d637de7c64bc7a49aa","modified":1727062836667},{"_id":"source/_posts/asset/bbb.png","hash":"f0bc9662526ce0fc9c1791543f25f79d486c1867","modified":1725970313446},{"_id":"source/_posts/其他/LinuxLearning.md","hash":"d22ffb2544f5b5195ef966dad36d3de91d7b1661","modified":1708673065900},{"_id":"source/_posts/学习项目/Todo Programs.md","hash":"135ada196a97313f9e02c994367c3b2a7c6fa1eb","modified":1727062862063},{"_id":"source/_posts/其他/Python 爬虫.md","hash":"7d499fa1789e8ea00fff16fbc7c40d2ffcd54972","modified":1725263790393},{"_id":"source/_posts/算法竞赛/二分图.md","hash":"0def190882af3f0e17215345b04e1bf8dcf16759","modified":1708672897741},{"_id":"source/_posts/其他/Vim.md","hash":"860b3fccdf2a25501cf428bc140926dc08544681","modified":1725286734627},{"_id":"source/_posts/其他/强化学习.md","hash":"f96858e79d9058cbc7b1814854a2f16a1363553a","modified":1734262018263},{"_id":"source/_posts/算法竞赛/女生赛补题总结.md","hash":"0db766ec4d5b592dfc488e7697a090858cd5de0b","modified":1708672946568},{"_id":"source/_posts/算法竞赛/日常总结.md","hash":"0388a99b64610d48ef75e77d363f8c452390c023","modified":1732109752051},{"_id":"source/_posts/其他/GIT.md","hash":"cb2aeafe2a51b2cd7fb71f78116e1bdf36c29004","modified":1722961190452},{"_id":"source/_posts/算法竞赛/高三暑假集训总结.md","hash":"105c422aa3a1c6c79b7c2d37f135b6210bf92b11","modified":1708672913841},{"_id":"source/_posts/无人机/ROS快速学习.md","hash":"45dcc0be34a9b78d8cc73e6aca26a8f05262eeda","modified":1709383770918},{"_id":"source/_posts/无人机/无人机理论知识（元启发式）.md","hash":"95940c13a2b7c99b08835888c5dc99a0ffabca2f","modified":1708672769851},{"_id":"source/_posts/无人机/无人机笔记.md","hash":"a9e923963e76bcfd3a28c1f15da94bccd7a95e86","modified":1709392076070},{"_id":"source/_posts/总结/大一下总结.md","hash":"c7cd02a75cf3ba7db6af6c0078ddfe78843f9fd6","modified":1721252346092},{"_id":"source/_posts/总结/新，兴奋与焦虑——大一上期总结.md","hash":"41a102aed936c5d0b9cbb1323dd629cb425e4b4c","modified":1711451881900},{"_id":"source/_posts/无人机/路径规划计划.md","hash":"7143a64f7999721e13ac694dc2122acc357562f8","modified":1709387133934},{"_id":"source/_posts/总结/自传.md","hash":"f7537e8894cae6dfcd1ef7df9c8c78d2f67ebf9d","modified":1734260684139},{"_id":"source/_posts/阅读笔记/CSAPP.md","hash":"648511c45d777a0431ccf9df5cc7523ca165d3d6","modified":1727062848467},{"_id":"source/_posts/阅读笔记/BLOG阅读笔记.md","hash":"c34c37a7eb8aa3e90fd4df65871d89a43f9d1329","modified":1727062843080},{"_id":"source/_posts/阅读笔记/《做最好的自己》.md","hash":"c3398db6481f79b5ab041cd96c5041453bb53426","modified":1731219634220},{"_id":"source/_posts/阅读笔记/How Google Works.md","hash":"4bd45c20665d3698f76d17e16346e1587c8bcbc5","modified":1737348916822},{"_id":"source/_posts/阅读笔记/数学之美学习笔记.md","hash":"380a07831fd133920eae26842005044b9acde7af","modified":1708672633762},{"_id":"source/_posts/阅读笔记/阅读杂记.md","hash":"009666af30955851f20af1614eb518ff333451ee","modified":1726642844477},{"_id":"source/_posts/语言/Python.md","hash":"e245155dada6439a4f5b5149ff61e4213ffa4344","modified":1730898266010},{"_id":"source/_posts/语言/Go.md","hash":"aebbaf0b184b7a9a10bd0a8562dd48db8a67df6b","modified":1731219569185},{"_id":"source/_posts/语言/JS.md","hash":"e7d26a24e1afb169155de1f6d0d4e6e9aa7eecc9","modified":1725263856048},{"_id":"source/.git/objects/09/11eeb75b4c8827712dc771e0268acbca7fac67","hash":"fdec44f866227af4cd3d79f5fbffdf5e5718f4e3","modified":1709364676544},{"_id":"source/.git/objects/01/e546bcbf9dcda6b032326116d96d402de5e31d","hash":"c7727f39827c98391c9d6d291ea85c6fc4d0b5a6","modified":1709364676591},{"_id":"source/.git/objects/13/2d9685cc5cff7da08680c8245ee45802f44fd8","hash":"0bcc3cde107f417800f214719612a80fb1b3a758","modified":1697356905018},{"_id":"source/.git/objects/0f/e1d2a14c476ba52f57b8b749cb7ed26b038d69","hash":"0c927e59afc7fc8f9c20e434140bbdddd7962fe3","modified":1703429360084},{"_id":"source/.git/objects/08/9b8cdda4ceebbfba1fca170f06a2d7b8a8d8f3","hash":"9d67e8e8eb4d25a3883aa00236709ca61468018b","modified":1709364676780},{"_id":"source/.git/objects/06/36c30410f04561a5193392786ae8f96c788fff","hash":"674c9002f53275dddd4f4f542c951cc84e810653","modified":1709364676824},{"_id":"source/.git/objects/04/4f4ff271e95601d7fed0bb14455df68f55ab73","hash":"689741221c3af681ccf1129b4477d76904294a34","modified":1709364676893},{"_id":"source/.git/objects/1d/b1f36afab4cf6740b9528d2a320b66eb271e3a","hash":"51567b32c53393b5af98dca26b5759247df965f9","modified":1698576312207},{"_id":"source/.git/objects/06/e3ce5ab672c3dacb3b5086f81c46e2e8bc8387","hash":"cc2fc7f15317e1717be1d2b9354e7eed8e457560","modified":1709364676792},{"_id":"source/.git/objects/20/c40f0943b5e7bd114438f6046959a5469e813b","hash":"0374146205a0ae23fdd981ceb3c44f0489ade9dc","modified":1699945192723},{"_id":"source/.git/objects/14/ab8a9c974641ab75a4d95bdb2f1af0765c2c9b","hash":"832da5aac3088bf61a82468205876e35e1cadb90","modified":1708668346765},{"_id":"source/.git/objects/16/8f58a65df5ae55ac5203fac4db81672f2a84bc","hash":"68ee257671cf6c13e5eef59e8b3a6495183ae65f","modified":1709364676924},{"_id":"source/.git/objects/1a/618a9d71854e86898bf969f13b0ac0f487a662","hash":"5e6110e40a2dfa41198875e00740f8a4155ebd94","modified":1708668346771},{"_id":"source/.git/objects/17/22745d39ab5e4b5ec06b0671de16def18e4093","hash":"dca7bcf867634d675b161eb954d154e6ba87dc3a","modified":1699945151379},{"_id":"source/.git/objects/18/7783ee3a0ff59ebd2d286a4d1c0daa49130f1f","hash":"802533757a13e7933fde754d96219883b00435d3","modified":1709364676541},{"_id":"source/.git/objects/1f/217221b8c592594c4d119a13478a7dad24b60e","hash":"14982f1ee019ecacfe515dd051427bd475195c7c","modified":1709364676906},{"_id":"source/.git/objects/21/4bd688da13e5cc586503a6dfcb9a2337b8569a","hash":"59113809a029477e60bc16743ef2482c0b821ddd","modified":1708668346670},{"_id":"source/.git/objects/1f/acc08322cbb38f9f3c4176f8fd738a391eacc3","hash":"5ceb099f19f4199bb6670e497b4fcd333e41df50","modified":1709364676894},{"_id":"source/.git/objects/21/ebfbd881e6f6fdb7fb76e6d5b33aae18662efd","hash":"52834b9952fb170a24d2e6d1b4d4d68b146bddd2","modified":1703429380299},{"_id":"source/.git/objects/21/24b8cc4db0acd5cc49f0db54f58910d13e729c","hash":"e382a732a0fa60d1af517ec649243496171c7237","modified":1709364737957},{"_id":"source/.git/objects/1c/187eea12c3b17465f219b632055f108236cdab","hash":"e0115a9e887f2e29e0243719fe97fd42bd3584f1","modified":1709364676905},{"_id":"source/.git/objects/22/621270e1d74c2caa3e94d56b22ebb852b50437","hash":"f1e60aa49aeddaa732b9dcbedaa6fb29e4fc64ee","modified":1708668433405},{"_id":"source/.git/objects/22/154da6a8dc346989c83ce513a27d9e97540db4","hash":"4e8eb3044199fdb9952143a455080580b3ba1eee","modified":1709364676917},{"_id":"source/.git/objects/29/692e5a5955b080449d9f0b829eb1e718dfbf7d","hash":"4310eee1d1d589f0d0b270be02a88b08ebeeffb9","modified":1708668346761},{"_id":"source/.git/objects/36/1b74601ace6e59ea1786689d038bf2346c8e9b","hash":"5dc7e6f1d5eeeff46115a2db9d39dfc33416e5d1","modified":1697356936486},{"_id":"source/.git/objects/22/3427a9fb0679f26b3a33ec6937c537064e6e58","hash":"d0da82bee3e7a2921882c951ab04027770187ded","modified":1701934315334},{"_id":"source/.git/objects/31/94560c86e2c96c5d445c8d79fe4c90adeaffc7","hash":"2b97feb8c97d840bbe88b60c63bb4e0b58b62fb0","modified":1697358389303},{"_id":"source/.git/objects/24/329630803ed5b980740cce9dd26f9dc53cee37","hash":"cb93deba9d893eb01bff908559f7f0bb8be6f72e","modified":1709364676831},{"_id":"source/.git/objects/2f/6b3ff21940a244175f07764b7ba352459787fc","hash":"13282ddb195b744214a432c70f623936a301d90f","modified":1708668346763},{"_id":"source/.git/objects/38/0a209be2faf3f9ed47c14b5d13c52efb8c1553","hash":"81077f739e3b48fddc7c1d31667c7d4f8603b871","modified":1709364676587},{"_id":"source/.git/objects/3a/5486c16d7d263f2123b3d578fa66f3fda738ec","hash":"ea75b3b2eb112f486a015c50bd5b7ac7cd8e29a1","modified":1708668433389},{"_id":"source/.git/objects/29/289c75690dd4db0b02d6a27b0e873dd8117970","hash":"82eb67bc5f86c01e05ed6dad3a3c3214d39f4020","modified":1699105315719},{"_id":"source/.git/objects/39/8f610db3116725b4fe55da766ba3884a6d9599","hash":"8ea6bfea4f63922474c7f91dd15706dbc3723501","modified":1709364676797},{"_id":"source/.git/objects/37/046e09262d9388e82a310d7d1d5b205ba5fd21","hash":"ca54b80c240357751c604e47f2b48c843e690c87","modified":1708668346664},{"_id":"source/.git/objects/37/372abd8f49baeb0d69e89255387894adf427c2","hash":"d697617e43c5f55258cbdee9fbf282e58dd8a093","modified":1708668346769},{"_id":"source/.git/objects/3b/38843b3f03349d093ff45661488a07ceef73a5","hash":"913a373e19102c280ca77a71cf3899f95eab9e5b","modified":1697356929136},{"_id":"source/.git/objects/3a/8a3e0ba053b7640dbd52521ee2f0a9dc611ff3","hash":"0eba7e19dbff11c56ec6feab7879877022557e5f","modified":1698299985483},{"_id":"source/.git/objects/3c/e446d42cbd1aa802e6ed5fa334295f639c4058","hash":"7083c4580c42514e9ee925dcf434b0077fa0e9cd","modified":1699105357110},{"_id":"source/.git/objects/3c/4f7c75e0aa0cb3e54a98c7f3f34677290629ff","hash":"ecd7aecb15b7fd7c0894d6ae899f0f5c4c08a40d","modified":1709364676919},{"_id":"source/.git/objects/40/20c9727da365b1acf92c7bb9e4574a164916d6","hash":"179117d901f83c96baadcbe4d6462664100f9f5a","modified":1709364676836},{"_id":"source/.git/objects/43/6f43cf561e4d8645a8612ddb5b0dee97f2fcc5","hash":"29b05b33cf042fd0da2b233f7dd19492c0b7d1e3","modified":1709364676538},{"_id":"source/.git/objects/4e/7d6f5bdce3389b15a04ee73ae977d37f3c4e38","hash":"c36560f1fc946dbc8754882a8e901c4d3f8e17b3","modified":1709364737985},{"_id":"source/.git/objects/4a/0e59c63e049be65678a2e85338e64fd87280f7","hash":"f1e50b60572fbbc88f604a49d866a71c5894b4a6","modified":1709364676827},{"_id":"source/.git/objects/47/3a085fd03eed075436b9d56ab4a568fb32e954","hash":"b98200b2144bbb2a34cc9e291835edc98454e8a8","modified":1708668346647},{"_id":"source/.git/objects/43/a015b207cb22606c5cf8b39d125aac655791d2","hash":"811c01cfba0008f181bfa8cd175a97ede008a98e","modified":1709364676787},{"_id":"source/.git/objects/4f/a9ae9166fe73f89e96711518cec8a1a89a1e58","hash":"8be85133f955150b43d7715567546fc3b1584869","modified":1708668433408},{"_id":"source/.git/objects/49/2ed0adef4ed565b5bdbd1c81c625ce10e0e757","hash":"58e9d96177382ce3351358d563916143927d2328","modified":1708668346670},{"_id":"source/.git/objects/4b/eeaf1f719ce850f741e4a43aa7b6bbc921e93f","hash":"3dc0be982ffdbe73db8c950fbcb6837a79a05cb7","modified":1709364676915},{"_id":"source/.git/objects/57/4222345f2fe690963915473f0e7bddb7921e4b","hash":"66d271fff653043d2aef6beaf23e9e770f085dec","modified":1709364676829},{"_id":"source/.git/objects/5e/dadff1338876b13055d8e016eeba3ac87f46af","hash":"c3afe8b23770de5d79f99b35a17721407489ee52","modified":1697358168355},{"_id":"source/.git/objects/43/ea90d6b43efbcbedc78c51c0fd0adaaae70a11","hash":"de18d75ea0dffeb1b335551a56653238c8dfdbb1","modified":1709364676790},{"_id":"source/.git/objects/5b/d30d43ad99ebf65adc3a59ecfbef53cc712b57","hash":"10cfa940a364175562a23e71547784de1bbdc584","modified":1699105315719},{"_id":"source/.git/objects/56/098fcf31f0e87a1caf5742f02a79e9eccdf58d","hash":"7555bb1b76b9d9af7f7db44d7a6d8f2c7a9a465f","modified":1709364676783},{"_id":"source/.git/objects/5c/aa98bdcf93dce261cff2c0872cfa71737efc4e","hash":"90a46161a7ea0fa622f3a4bed9629976939eee9e","modified":1709364676625},{"_id":"source/.git/objects/5f/7c1a97f5dd23480d8128e43b498881504c0839","hash":"828e0e12a7355604cdfb364aa6d185297e2235a6","modified":1697356373254},{"_id":"source/.git/objects/56/6e972e09a866f95f9b7feb647f5e7d0c809eae","hash":"1dda272442e1cbede73912829fdaf00c4c7fd4ce","modified":1697356454426},{"_id":"source/.git/objects/61/22900bfda15eec3f5881578896265f29a96030","hash":"8a0882b922ecc328a0e87e702fb1caa7b6aae486","modified":1708668433393},{"_id":"source/.git/objects/63/401aa2b83d32805352b845f4b962d4a6352364","hash":"c216a52558ef11b58e93fc6fd5af333ba3084605","modified":1703429383908},{"_id":"source/.git/objects/6e/ba392483a65cfc101ebd19d87903b8d2e2d828","hash":"c09204c85627cc122316e47101baee00915983c7","modified":1708668433411},{"_id":"source/.git/objects/58/c0a4c715f6c4e6e9c20c542e33fd2efa02cfc2","hash":"40ade31b9fd6bd36c69038705f851fcb536cec0a","modified":1701934268403},{"_id":"source/.git/objects/6c/178045d2d6aa7c11a7d11a2070249d9ce014c3","hash":"ad67b36e49365f03b0c31f21f32034231e3155fe","modified":1698299710058},{"_id":"source/.git/objects/63/143ae72d3cba4b826e84eaf0d0a8e6fc6450f6","hash":"97f355ecca68657c6381391d9cfa14c3eb135880","modified":1702638865737},{"_id":"source/.git/objects/6a/c77823a8dd92755c1d8aad1bcca5c3e7b2f7b6","hash":"a4c1d3a649e858fa1689df83101a120fea95d570","modified":1697356936542},{"_id":"source/.git/objects/75/cd8a55d18a47c2675b8429760afe694b7d0ad4","hash":"15e7564cc52558f02a09b95b90a6dbb5a1fdd590","modified":1698299710062},{"_id":"source/.git/objects/68/67cd99af447d182c56bb9529d428c5a0a0cfc2","hash":"53df7eeaf8680b18a321bc7614a22c0823705989","modified":1697356905059},{"_id":"source/.git/objects/78/cb213867b2c5683e70b25c77ff4f52955ab592","hash":"aa160ea543d6402e5e7a116d49417ba488b0a35d","modified":1697339075866},{"_id":"source/.git/objects/81/88e8188c731d2be392d560818e29467ee11c42","hash":"6279f17479fcf790014fcc7760f54fa7b3b7f0cc","modified":1708668433398},{"_id":"source/.git/objects/76/a84e2ae5ab7523d72ec07cab9750dbf5769ed0","hash":"ac30ca008c4cd3914f6a9eb1f92df43aa0b36808","modified":1709364676825},{"_id":"source/.git/objects/78/3678df1f08bb9108e8ab6bf31a57a40da8158a","hash":"a2ecb6786d031c7a3acc05be732b9ad129d446c9","modified":1709364676784},{"_id":"source/.git/objects/85/f23e1126340d000c6dae3b5f0b3c75bfcd6cd4","hash":"33f9266eb3357f1ceb3d6217416d695ecf132050","modified":1697339060275},{"_id":"source/.git/objects/7d/6c4a29961ef6923d2ee9466a402c2944d72011","hash":"1a5d869482311b9a8c625094e03870e56c574907","modified":1697339102564},{"_id":"source/.git/objects/8e/37a87c92e536f74825927bde0946c43784766a","hash":"d25db99625829325396bd18dd8a09c720e77a884","modified":1709364737966},{"_id":"source/.git/objects/81/faf57364a2c49e581dbf5262c90c43c51e93ee","hash":"5e846d20de0938abecd7d6ce4935637f3815db31","modified":1709364676907},{"_id":"source/.git/objects/82/0e7995d77f99201badd53e4cb326b52841a62c","hash":"fb21daf24cd4a8ba90c2d592a6aedd6450667547","modified":1708668346773},{"_id":"source/.git/objects/8e/93ed7c64cdc7e5015ddc6a965d80289ac3fb2f","hash":"8a51cf89e1156256c4a7071373cf80e38de13f84","modified":1708668433403},{"_id":"source/.git/objects/78/cc35f7a4c003897d8783689b9fc8132dc32dac","hash":"82acc938257828ab26eacbb5864517b110a7ee5d","modified":1708668346660},{"_id":"source/.git/objects/90/094659b6f8f38d1d28eb99e2c9e66dfb056778","hash":"89cca00739844327d553d43d0790e5652ba31c9a","modified":1709364676716},{"_id":"source/.git/objects/8d/3e3afbf206fbce290a19d0bbdb0794d70c30a9","hash":"c14c9f4f44c1ac27fefea2d628ca83efb6ffdad1","modified":1709364676530},{"_id":"source/.git/objects/8f/ea6ac43f9c1226f24bd8da1139dff3a9428a79","hash":"84fe5125248b5f33f79c3e98570883dd0d69d9c4","modified":1709364676800},{"_id":"source/.git/objects/94/05bfdc224d3e5dfe9fe6116a4fd2955ab10a72","hash":"4f7ad3735b28f50be8c54e93143c1b84f7edc4d9","modified":1709364676539},{"_id":"source/.git/objects/8d/0c4e1a3ddc17f34ac1ccac56fde7351cbca0d5","hash":"03f20f2403e21713045a56e25b744e8737568d84","modified":1708668346453},{"_id":"source/.git/objects/94/5c6afb85d30ed4521f68763eb476f6d7d162e6","hash":"6cfebf3e69d51ac83302b535605ff3bb90d5400a","modified":1708668346665},{"_id":"source/.git/objects/93/5cf71893dbd4145e41603463c23745a14c0963","hash":"baf77a49cfea2af60546ab3516ce6acf89479d65","modified":1709364737970},{"_id":"source/.git/objects/97/a9af843553b402c0cb5a317749eafbb30baac2","hash":"1f12ff1ec1e865406dc50456568c294be80ffa1c","modified":1709364676714},{"_id":"source/.git/objects/8e/8c6651c699e90cd8f838267e4dd96607f8e53f","hash":"4e48cc90ca705a3a80202e7f61838bcbc2582ec2","modified":1698299985480},{"_id":"source/.git/objects/9e/2e39959234e091fea780e1c1d895f2774cf117","hash":"d1687134c0943eb331b785cc468af8b38b1de585","modified":1709364737975},{"_id":"source/.git/objects/97/b5bfdd9ed5f23237bc0df37b7ac18284a125fb","hash":"079179e00e393303d01d77d634584cc03b8ff8d7","modified":1697358383127},{"_id":"source/.git/objects/90/85e5444d3b5d5a65ce19db3a6e820d9534709a","hash":"037ad1aa96a9f595b60b862225b5cc6365543dd0","modified":1708668346669},{"_id":"source/.git/objects/91/f83bbdba3c5d2bdfbd22a4e2e739fd04d97e41","hash":"f0591e3549ef249acd6e1b67410b97d644b96a96","modified":1709364676900},{"_id":"source/.git/objects/9d/bc0f05d7a4b061a4a9ab0046b08367120f0405","hash":"f263f24aa5eee113faa26efb536fc2a4431a7dbb","modified":1698576312223},{"_id":"source/.git/objects/99/96ec9995262be8371ac60cc26a7eb074bb6fc5","hash":"46ae49043d48a3b336c4633bf696640b5e195252","modified":1708668346649},{"_id":"source/.git/objects/9e/dd0d11859ae04f3620a373ffd0c3950551c89f","hash":"4229b9b440a89b2984afd85b305ce951a9125f0a","modified":1709364737967},{"_id":"source/.git/objects/9c/bbdbc708e5a7a1e75004bd4dbf1d8c62026cb1","hash":"71371a39b628577dfde2c2b80f225e6313a8d5ae","modified":1709364676802},{"_id":"source/.git/objects/a3/9907ecbde69da386fe9142e0e10a26151a3bd4","hash":"0837b8a51fe2cafe187a157e714cafac395fcea7","modified":1709364676805},{"_id":"source/.git/objects/ad/6218e85d4af91a5c1b362991846cdbeb9506ba","hash":"cffeb617097ee8bcf091aab32c4c5d15cd33ecc2","modified":1703429397763},{"_id":"source/.git/objects/a7/536c49185db242bffd5c02246265fb2b7b90f8","hash":"811d4d88a7e6c32aaaaaedf1005f4bfdca44903e","modified":1709364737963},{"_id":"source/.git/objects/9f/79385aa400160888085a816e0594e1e102b457","hash":"644f9925b3012d852544e641c3d6553260f22cd7","modified":1701934315334},{"_id":"source/.git/objects/a4/4d9ec6311d434bd03dd70f559206726dc6938a","hash":"e1261e4b4adeefc05c1746c39a03e278d05c4d59","modified":1709364676877},{"_id":"source/.git/objects/a4/389e26cfede41859231bb7288b1bf6c5b9a868","hash":"a8703d83c9242c137f32e51b876d5bdec992e3bc","modified":1697339170039},{"_id":"source/.git/objects/a5/83d70f7b873dacc9a07fd3982eff28144e9f8b","hash":"6274d5f30c8d5e7f28c74fb4fe6072898e423f72","modified":1699945151383},{"_id":"source/.git/objects/a6/0fdb28288b8de9e157e51450ca7a6d9f62a112","hash":"62409a4221636afafd9f66a64cd4420411edecc7","modified":1709364676902},{"_id":"source/.git/objects/a4/b16c83ce4a193498169e72a141ba2bcbe4a920","hash":"9930ceb8b31a65141c4cefd5d851c23c02702128","modified":1698576266847},{"_id":"source/.git/objects/ad/9973a03abfaab054b95611804cb695f2536243","hash":"2f09dc002319150e0ae71e3c115ad0e932b1705c","modified":1709364676590},{"_id":"source/.git/objects/ae/35d535ee495bfd41fa07d779a9232820cd9be9","hash":"7062fc5cb1dc540dbc78457d063f202275e2339b","modified":1709364737965},{"_id":"source/.git/objects/bc/fc12690040c1bb1a37661f82175908e8c321c7","hash":"65148eab8b0ad98f08287ebdf5d310c194a17b6b","modified":1709364676533},{"_id":"source/.git/objects/ab/b9a82f902d8c00b1d2164430e24d0f2d901962","hash":"b98a05126aa8210dc3d373ac9178cd0251513e4b","modified":1709364676914},{"_id":"source/.git/objects/b3/fbffc74f9c1a45d5b6f775054b8be76b102641","hash":"2ec8c639dcf36f081c243c4d79a9bf26fa351962","modified":1709364737972},{"_id":"source/.git/objects/bf/c50b857ba5171cfcd47d245bc9c3f5c85dd485","hash":"374d9408edc8ab2c21c2af8decc14ae946319a28","modified":1709364676534},{"_id":"source/.git/objects/b5/23267d8ce6826a9a56b43a81cfd1a72a378c46","hash":"7f83c4794c8adb600cd18adedf19da208895fcb5","modified":1709364676833},{"_id":"source/.git/objects/b1/72aeca085c8cb828cf4c03a5d0cf96e91f3e1f","hash":"4a9205af68f35211f81ae69283a1739b4b4cee6f","modified":1703429357096},{"_id":"source/.git/objects/ae/96c88a5fdaf9dd4c386993c541fbb4791df8f4","hash":"1c957d724ba6250902e2d0d04830fd30e7fe55ff","modified":1709364737978},{"_id":"source/.git/objects/c1/46bfe7c1b9f5676fffdad490fd9703361f13f8","hash":"5c23a4e83c49b7dd74010ac710ddd0b917e2253e","modified":1699105357110},{"_id":"source/.git/objects/c2/ecaf77a91ec09fca3e06f9fdc0d827fad1eb51","hash":"0862adb7c19ea5b91be2e3654897b0da950d63b2","modified":1697339060278},{"_id":"source/.git/objects/bd/97a814150de01411a32fb2b1861e2d3083be37","hash":"0f7c9b4ac095275053a7c8ccdfde5fbe7f39cbb4","modified":1709364737968},{"_id":"source/.git/objects/bd/402b1d711cd3a90f3cc8ad9f8baaee9f40ae16","hash":"0de5cdf6553e15305103027cd01fe7fecc7bd2c2","modified":1708668346662},{"_id":"source/.git/objects/ca/452a0ea27fef48574196a5381d43bada389d7d","hash":"d279c6281eb89de5cb893187c51641d0b98db580","modified":1709364676545},{"_id":"source/.git/objects/c5/89dd7866f4b56a2463064e3e3e96e1c890fed6","hash":"a1b484da40b476d689aed88e7b91128ac842de62","modified":1708668433395},{"_id":"source/.git/objects/c7/4bedc23612f4e518651513601a00da09ecb67e","hash":"384f42c713392740dc4a01e6ce06f0a5ccd119cd","modified":1698299774106},{"_id":"source/.git/objects/c8/2839ff6b12415c6feb863c70f958c6e077e30f","hash":"31e422ea0e32ecee872e373e987301b3ae6b1b7d","modified":1698299710056},{"_id":"source/.git/objects/ce/220759cae1b6a8c6f5199b7d3b18f2e49bf9ca","hash":"db86f8fe5a7e4bc372378840a71e8cd46234cf76","modified":1703429376508},{"_id":"source/.git/objects/c8/af164ff2ffc3477d910104fd8feaf2a605c34a","hash":"492bb6d41318cf5f11af6cb63292c5165661e480","modified":1708668433400},{"_id":"source/.git/objects/c8/4a27ab8d966b556ca8ca61523533c54569a75c","hash":"e52917a7390524c5251867c1a287fd943c49da03","modified":1709364676837},{"_id":"source/.git/objects/c6/17aca075ba164d7e2d696f27357c26e911b9ef","hash":"f0bab2bed8eee45616e5e934563d9bfdce2aa0e4","modified":1708668346774},{"_id":"source/.git/objects/d0/7fe44cc4104ea096fd764d025cee3d7eddd62c","hash":"53bc3dceeb715857a3d4abcb20fe67c71a4b2492","modified":1697339170027},{"_id":"source/.git/objects/d4/d190d399d154300963239b40433fb26a80f7db","hash":"c7a6266bf59cb76d785a08dfebe2427d25f9f720","modified":1708668433418},{"_id":"source/.git/objects/cf/7dc4c470a1319c9425c8490cd97c6818e2dc22","hash":"999e971de69edd780a750f9934bd0c772e4f60a4","modified":1697356376948},{"_id":"source/.git/objects/d5/8e86da4273384727876736bdc9fdaa31f7b276","hash":"aed8f81974c49c60853a4d1494832de2f8c9f8ea","modified":1709364737960},{"_id":"source/.git/objects/dc/9e5d0e7552c311cc7b26b9cea3daa2a4865b37","hash":"eeba8fb7c3d4cf24f2a0f0fba7bd5754e3b6ea68","modified":1709364737974},{"_id":"source/.git/objects/de/56293e1c8a1fc6d9236f5435b2dead72a28eea","hash":"d63f2876f9aeea15de2f8c0185c673fcb1799f19","modified":1708668346673},{"_id":"source/.git/objects/cf/30fc72d9ac5951f597ae804b8e61ddbae4b505","hash":"0735b758420d4d8d6c904996610820940f256806","modified":1697356890859},{"_id":"source/.git/objects/db/5d2ac6e9be2e00d748ab188a6ff89a20656cef","hash":"7bf96e7c14b5338af72a51faab1d25e1b8732bb5","modified":1709364737956},{"_id":"source/.git/objects/d7/4fb77792f2c0272ae2420370d4046f2450e561","hash":"ac08f5fa411993e62737020f443cd25063fe74e5","modified":1697358011563},{"_id":"source/.git/objects/d6/3864171975dd715f9d1181ca31f898b68d77d1","hash":"ebf6b9f94107d8d77ebe680af066d52275d22fb1","modified":1709364737976},{"_id":"source/.git/objects/dd/f839fd7759f0172bf63d24397185b25c2c5685","hash":"d69498895fa13568a2d3a993bc37155822de29f8","modified":1709364737961},{"_id":"source/.git/objects/e2/1a18dc273108270255e8199871dcb9ca35db88","hash":"dab088a9785ce8ce9722eb12994bff0d9c1d6dbc","modified":1709364676542},{"_id":"source/.git/objects/e0/260f4b3a7b7c36bb3fa0cbdf5d647dcd5dd1aa","hash":"6989eb32657ee07334ff630ae88471b8616e9c5e","modified":1698299953383},{"_id":"source/.git/objects/e1/6be4c4368a45d6ebe7ef2f5e23091ae67ae1d1","hash":"95318c7d93b8fb855074c0340a49f75c1d111ea7","modified":1699945192727},{"_id":"source/.git/objects/d6/78abf7153c3a98d6d8252272b3bfd9c8213d26","hash":"ec594823df0f7b0f4de48e500a417e13960e530d","modified":1709364676910},{"_id":"source/.git/objects/e8/f53bf7d656942bd80b9db940787cccf598a57a","hash":"be1afbb65a958174d182f81a8c31c62bdf6b0a98","modified":1709364737957},{"_id":"source/.git/objects/e6/f9beb930ad61a33fe9a9f0230f61aefbfc1d5c","hash":"9a9a0d345f6f9c8e566976c8689f7aa580095c99","modified":1709364737980},{"_id":"source/.git/objects/e2/8a859b721dc652fb635eb788218b7882240a07","hash":"08bb8aab80b5528bc51824e9320154d64593d3b1","modified":1709364676782},{"_id":"source/.git/objects/d6/c9dd1574e15f2749ecb5cf42a2a2b1265fb87a","hash":"03e01020ecaad51e064cf1da25992daf23571544","modified":1697339075873},{"_id":"source/.git/objects/e7/e98eb68453065ae643ccda1ca8c6e74349588e","hash":"b452a5f6388afae01239a267cfcf3a3566c870a5","modified":1709364676819},{"_id":"source/.git/objects/f1/d43827dbb81eb0cfdd75229c1680d5cb505974","hash":"1573feb7b45330f6fa547b8d9a18cb7323e3d2da","modified":1699945151381},{"_id":"source/.git/objects/e4/b5d08d1af4a6f19d68dba874bd88c38fd284a2","hash":"ba6c84f1f140da42cb698d8cbdf7f7f56b970b32","modified":1698576266840},{"_id":"source/.git/objects/e8/0b45f83c1b1d0e031f6d0861a8eed0231fdffc","hash":"9dff5854df391a286d7dff15550e0f93b2be0410","modified":1708668346658},{"_id":"source/.git/objects/ee/64ff35262219a64389d70e4fdfc5e8e0883693","hash":"547648fb13206bf951e9efe8e4b686777f977f9a","modified":1709364737954},{"_id":"source/.git/objects/f1/0e01697c0395a0aee8f4cdf3ceba6c00d36be9","hash":"c8518706008425f1eb23804fd616693391d29d20","modified":1709364676822},{"_id":"source/.git/objects/f0/644b664b95ce1d0f9df49d8448abc0d20869a6","hash":"bffe1a7229cef7f6b7bee82c901735d8807e4df1","modified":1708668346768},{"_id":"source/.git/objects/ec/435b6f0ce7b7470f709c9297f8048b07a07897","hash":"01bdc00faf80942521b9b71314ef05c5ca03895b","modified":1709364676795},{"_id":"source/.git/objects/ea/4e4272286fa05643e2a685d501200fdf5131ef","hash":"cc2f3f6dc5ec7c5a584bc9b6ffe6863ddb245be0","modified":1709364676535},{"_id":"source/.git/objects/f5/ff767cb2b23028dbfdc1e552d3260abd6505c0","hash":"e461f6954301809a906cab0ee64b3576a8b0d2be","modified":1697358117243},{"_id":"source/.git/objects/f3/f233fa450ae8902bb745368e46177fbeb11b70","hash":"2bee59bc220dea960e59348409a72e71658a9064","modified":1709364676532},{"_id":"source/.git/objects/fb/ed2b56d49b3f92d0fdd29694912ddee46f0d45","hash":"bcc4d257a26daa1470836125f256279c535dbae5","modified":1709364676912},{"_id":"source/.git/objects/ec/5de956650bc1c5ac80668f5a279cd506140a27","hash":"337d49f63d5db5f1ecee5f7fd7038942e276859c","modified":1703429355950},{"_id":"source/.git/objects/ec/d21f0853fed853e6d109f22ed47f0208039ffb","hash":"87932ad24f04e8a31654d323a418734cfa98803f","modified":1702638904720},{"_id":"source/.git/objects/fc/0d18ac015e1cc25e7b71b92c58d7eb568c5417","hash":"5e04279b4c289330f6a81f1fb53b7957ee1b53ae","modified":1697356454449},{"_id":"source/.git/objects/f8/abb69c2cc0be07eb64d70527e40dd9fb8ebd10","hash":"d6de4615d227d3898e11e27fb1337601df0357ea","modified":1709364676778},{"_id":"source/.git/objects/ea/08cff38edf1991cfb9995d8429522714bdbb51","hash":"c6820f26f9725bd69b6014c6c6b1e10212b80884","modified":1709364676897},{"_id":"source/.git/objects/f2/eb28928cf2a452150296a9a0625d30dac3494c","hash":"5e0b1a2833845a75b1676df21c70f7f2df371b3e","modified":1701934268412},{"_id":"source/.git/objects/fc/134fc4fa2c215b2400a5b95a4203d779f13d50","hash":"3ae0b3ba425e5ee40c83084d79af628ee241c753","modified":1698299774112},{"_id":"source/.git/refs/heads/master","hash":"aa6b5442174f6b16a553e9b18302c51a628932ae","modified":1709364737988},{"_id":"source/.git/objects/pack/pack-739c3aa06101dbcbfb70615e893c3f1a2f024ce7.rev","hash":"a2c1b5c7d7d0022badee74acc462136a23783e31","modified":1697338817825},{"_id":"source/.git/objects/fc/f9f6f4610832d37d4cd939c55a677c3d788575","hash":"765542358e9ac3faaf75837e19860b00efe7a5e6","modified":1698299710060},{"_id":"source/.git/refs/heads/dev","hash":"a12bedce6956f1099a33965c76626654689754f1","modified":1697358117254},{"_id":"source/_posts/.obsidian/plugins/obsidian-excalidraw-plugin/data.json","hash":"1d1c31bc61e527f137f00f65031a987cd4993d01","modified":1725960477706},{"_id":"source/.git/refs/tags/test","hash":"49de66dfe46bc5eac85df38cefa1ec46fa4c05cd","modified":1697358254844},{"_id":"source/.git/objects/pack/pack-739c3aa06101dbcbfb70615e893c3f1a2f024ce7.idx","hash":"f0aba1d2a410dd2165a3f3fbcd14052a39ef4870","modified":1697338817825},{"_id":"source/_posts/.obsidian/plugins/obsidian-excalidraw-plugin/manifest.json","hash":"fc5e06dfec6af2de4ff8e2b1aee2e25316eba198","modified":1708661433226},{"_id":"source/.git/objects/ff/8497defd7359df7c2920d782f2d379978c5480","hash":"9eae9b1b9d14a7ed238219d8119ee65c495636fd","modified":1708668346668},{"_id":"source/.git/objects/pack/pack-739c3aa06101dbcbfb70615e893c3f1a2f024ce7.pack","hash":"b44b7f41da663df200245248794ab1f426976241","modified":1697338817825},{"_id":"source/_posts/.obsidian/plugins/obsidian-mind-map/manifest.json","hash":"c20e6d31d855e79e6345f69b64e1252a13fcda39","modified":1708755962920},{"_id":"source/_posts/.obsidian/plugins/templater-obsidian/data.json","hash":"c7e53092177e595ad6b0f17d39778264ab66b7b6","modified":1709468359988},{"_id":"source/_posts/.obsidian/plugins/table-editor-obsidian/manifest.json","hash":"8f98b959c542404984a588d9f1ecfe9293e1c78b","modified":1708747913876},{"_id":"source/_posts/.obsidian/plugins/table-editor-obsidian/data.json","hash":"94c879cd5c6a819bd39c4de9d25919dcf08764a0","modified":1737348846894},{"_id":"source/.git/logs/refs/heads/dev","hash":"6be2460c4f521a11b3e960f2c015e0ab66eac4cc","modified":1697358117254},{"_id":"source/_posts/.obsidian/plugins/table-editor-obsidian/styles.css","hash":"a03f657e10903825a3c4b2c2ff67b378b33df136","modified":1708747918816},{"_id":"source/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1697338817863},{"_id":"source/.git/refs/remotes/origin/master","hash":"6fc35757a0d7763197464cb6e6dc9c1c0fd4df1a","modified":1708668445366},{"_id":"source/.git/logs/refs/remotes/origin/HEAD","hash":"7d0c259c6c8de494b8d87bf50bc4b920de72093a","modified":1697338817863},{"_id":"source/_posts/.obsidian/plugins/templater-obsidian/styles.css","hash":"db87603e20d7189960ab58297647317f7b0c0d37","modified":1709386253958},{"_id":"source/.git/logs/refs/heads/master","hash":"c7c867ffdff18303efaa94b93b7d9d2904606d00","modified":1709364737990},{"_id":"source/_posts/.obsidian/plugins/templater-obsidian/manifest.json","hash":"0e5577b0c1c1348a3786f4a379ba97184ea00c37","modified":1709386251823},{"_id":"source/.git/logs/refs/remotes/origin/master","hash":"fde935c44279c4190ad2e6d37f7db680cb608797","modified":1708668445369},{"_id":"source/_posts/asset/Pasted image 20241107121046.png","hash":"a552da2bdf095bc965e96bcd7620783f33e5b05f","modified":1730952646566},{"_id":"source/.git/objects/cb/d11e7d084488035c69d25bcdea0e8a731e522a","hash":"40662ba5821fd6b495a7c2039c1e2087260a9d0a","modified":1708668346656},{"_id":"themes/arknights/source/css/_custom/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705742744949},{"_id":"source/_posts/asset/Pasted image 20240930215251.png","hash":"e63768f557329dff670f3f89f5e36c314f0e7a19","modified":1727704371794},{"_id":"source/_posts/asset/Pasted image 20240315210238.png","hash":"dd60f8ae7c8d7ee081188c8d1a8212824df83a3f","modified":1710507758988},{"_id":"themes/arknights/README.draft.md","hash":"03ab36cadba07a00b69297d86d1a2854d7c07919","modified":1705742744925},{"_id":"themes/arknights/.gitignore","hash":"8cb3af24d90f1e24bd0e6b38c6603036a0f9c473","modified":1705742744925},{"_id":"themes/arknights/LICENSE","hash":"438ccc3597948b7577b003ccff330f40f8e9987b","modified":1705742744925},{"_id":"themes/arknights/README.ja.md","hash":"622642f6dc721cec9adccdf59d7bf946589e1425","modified":1705742744925},{"_id":"themes/arknights/README.en.md","hash":"ed308e37a0c975c2c82c65f1820b05387c3c5a81","modified":1705742744925},{"_id":"themes/arknights/_config.yml","hash":"406231193b3d82a836a4738fe5c30d408a0138cf","modified":1705742744933},{"_id":"themes/arknights/README.md","hash":"156b203e802e441587b953bd809139ad75221161","modified":1705742744933},{"_id":"themes/arknights/languages/en-us.yml","hash":"dc8e49818d19f5f1bd81934f8e540b0a25d35183","modified":1705742744933},{"_id":"themes/arknights/layout/archive.pug","hash":"385aff558e5b93ffaf1006a59172b5f6bfcdd5fa","modified":1705742744933},{"_id":"themes/arknights/friend_Links.md","hash":"8bcbd46439bb66dfaf3a7cf1a3f168dd3cb0941b","modified":1705742744933},{"_id":"themes/arknights/layout/category.pug","hash":"dbf4309d18a260ea65c46e2c850eedf15b8b87a2","modified":1705742744933},{"_id":"themes/arknights/layout/page.pug","hash":"6777ef19665cc9b7d974ad26fc7e392980cd8c85","modified":1705742744933},{"_id":"themes/arknights/package.json","hash":"d9df722e37553215343e703198bdf1e336323e9e","modified":1705742744941},{"_id":"themes/arknights/languages/zh-cn.yml","hash":"fd6c7735bf6d6867fd463ab9ab3b87d65c1caccd","modified":1705742744933},{"_id":"themes/arknights/layout/post.pug","hash":"bbb04bf90c10d53fe5cdc971cd910fd01fbe048d","modified":1705742744933},{"_id":"themes/arknights/layout/index.pug","hash":"d00afc734568d551116d0a7afebf9830065658ae","modified":1705742744933},{"_id":"themes/arknights/layout/tag.pug","hash":"18756731a96eb58807953a0cc87f4d17887288aa","modified":1705742744933},{"_id":"themes/arknights/source/README.md","hash":"ba18c1da4f25802b6154c59bf07a76da5a58e314","modified":1707234340818},{"_id":"themes/arknights/source/404.html","hash":"526399fe5be55ed75ae9fea90e7b2e38658fc55a","modified":1705742744941},{"_id":"themes/arknights/layout/includes/aside.pug","hash":"1560124e24b195c4c5db6f4e894340b2c0c0f745","modified":1705742744933},{"_id":"themes/arknights/scripts/filters/lightgallery.js","hash":"57ad7d8bb4a87fee4f6f755a64758b86684ab9c3","modified":1705742744941},{"_id":"themes/arknights/scripts/filters/pandoc.js","hash":"4fbeb87c7a94b9561cfad16c276becfa643e4a05","modified":1705742744941},{"_id":"themes/arknights/layout/includes/archive-aside.pug","hash":"0d4dcd252b277743e5912ac4975ec4437e41c162","modified":1705742744933},{"_id":"themes/arknights/scripts/filters/minify.js","hash":"2a46401704d97b45926f6f0a42d5c8e139069051","modified":1705742744941},{"_id":"themes/arknights/layout/includes/bottom-btn.pug","hash":"bcdbb338034c1a27ccc7b99af7efbdc3af27dea2","modified":1705742744933},{"_id":"themes/arknights/layout/includes/header.pug","hash":"41583a8c2040698816100f81f44521275709d464","modified":1705742744933},{"_id":"themes/arknights/scripts/tags/admonition.js","hash":"f873feaadec1bb3491ab0e9614a236ebb1a0ae99","modified":1705742744941},{"_id":"themes/arknights/layout/includes/generate-css.pug","hash":"f7386ba17ea7ca91eff2cbe758a067479aadbe65","modified":1705742744933},{"_id":"themes/arknights/layout/includes/layout.pug","hash":"0f11578562ff9aa660d5d80ec9df6bfa17011386","modified":1705742744933},{"_id":"themes/arknights/scripts/tags/hide.js","hash":"2f4bad60bcc72158d67f985963052609407e6dbc","modified":1705742744941},{"_id":"themes/arknights/layout/includes/meta-data.pug","hash":"262abc23cab1c03408cfcff95aaf21bed8c83bfa","modified":1705742744933},{"_id":"themes/arknights/layout/includes/js-data.pug","hash":"442f80f83f7e46f1c8e24fbb0adfac7136a7da22","modified":1705742744933},{"_id":"themes/arknights/scripts/generator/encrypt.js","hash":"4ec1b2ff415c68902e505b851b98e79307c9045f","modified":1705742744941},{"_id":"themes/arknights/scripts/tags/link-card.js","hash":"5784161264c930015bdc3e9e78f5819758c654ab","modified":1705742744941},{"_id":"themes/arknights/source/font/BenderLight.ttf","hash":"7fd4b80a411cabd032aaf5aa5ad704330b1bdeb5","modified":1705742744949},{"_id":"themes/arknights/layout/includes/recent-posts.pug","hash":"e451db6c2bd8ba21f4216250b1e6b8a417e2cddc","modified":1705742744933},{"_id":"themes/arknights/source/font/Bender.ttf","hash":"e29dda825efdd0a9278535190a1918571f7f1019","modified":1705742744949},{"_id":"themes/arknights/layout/includes/pjax.pug","hash":"252e8b28e2cbfa637f219ff7c1b366f618480a68","modified":1705742744933},{"_id":"themes/arknights/source/font/JetBrainsMono-Regular.woff2","hash":"23f70e45de896a9e12798db1d1f1ce5197f33ca4","modified":1705742744949},{"_id":"themes/arknights/source/js/arknights.js","hash":"d19e0716e6c991afe76740a336b2097373d6eb64","modified":1705742744965},{"_id":"themes/arknights/source/css/arknights.styl","hash":"5b1e997bdac083b3619696d0f5513eed9de5f859","modified":1705742744949},{"_id":"themes/arknights/source/js/search.js","hash":"781ee5435260d025804cb71e27e25a2c5a071458","modified":1705742744980},{"_id":"themes/arknights/scripts/generator/search/generator.js","hash":"be2c776eeb12a969c556d03a1b6cbd1fcea4b0f7","modified":1705742744941},{"_id":"themes/arknights/source/img/bg.jpg","hash":"463cfbcfd68886be8564a532c38cb32d180edba4","modified":1705742744949},{"_id":"themes/arknights/source/js/pjax.js","hash":"d9bb171cec3062a5eed6e7b566c482f948fcaa8f","modified":1705742744980},{"_id":"themes/arknights/scripts/generator/search/database.js","hash":"3ac33988c2e3e9fbaee5a6b311375d41d8edefa6","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/cursor.styl","hash":"9ed7736e514b0431138699c99e9f739f98ee1c5a","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/base.styl","hash":"4cd7e5dc2c9a63fbcb44aa897924bd6a03f135ba","modified":1705742744941},{"_id":"themes/arknights/source/js/_src/arknights.ts","hash":"1b2be1126e9f086182da521515fe1ab5cc061ba6","modified":1705742744965},{"_id":"themes/arknights/source/lib/encrypt/hbe.js","hash":"cc2aa0671147628befb922dea20c32fe77d26475","modified":1705742744980},{"_id":"themes/arknights/source/css/_core/core.styl","hash":"98e174ab3eda15f3a10f38d27b37f1e16f3ffb67","modified":1705742744941},{"_id":"themes/arknights/source/lib/encrypt/hbe.style.css","hash":"97d9099c42edabb77f62bd0ad55afb7fea7689d0","modified":1705742744980},{"_id":"themes/arknights/source/js/_src/tsconfig.json","hash":"0202a8a7f83aaef25b5f15ce84841e45cbf03167","modified":1705742744965},{"_id":"themes/arknights/source/img/faction/3.png","hash":"58601c475db65b93f1e742a79a270321bb408c2b","modified":1705742744965},{"_id":"themes/arknights/source/css/_core/scrollbar.styl","hash":"7c8b0be8779f7f8a86bb4751f8ba82290d647acc","modified":1705742744949},{"_id":"themes/arknights/source/img/faction/5.png","hash":"b05382f0898ed5cf0f75c6420cf612c87d4641d3","modified":1705742744965},{"_id":"themes/arknights/source/img/faction/1.png","hash":"a7c71fcc55988aec2a89c5cf190c4a62d45e872a","modified":1705823176872},{"_id":"themes/arknights/source/css/_page/article.styl","hash":"55ffafe6df7f6d6d51816b51de82539b5c42a919","modified":1705742744949},{"_id":"themes/arknights/source/img/faction/4.png","hash":"f45580479628e9cc8a4c785a8acdd958086ed893","modified":1705742744965},{"_id":"themes/arknights/source/css/_modules/canvas_dust.styl","hash":"0f10f267f4d5e9d5b0e3cd2944c1625687d7ec09","modified":1705742744949},{"_id":"themes/arknights/source/img/faction/2.png","hash":"312ef23aa162cbc9aeed560c68257612ef92f899","modified":1705742744965},{"_id":"themes/arknights/source/css/_page/page.styl","hash":"66b938c1d0ec46b894218a893cac93838c601892","modified":1705742744949},{"_id":"themes/arknights/source/css/_page/archive.styl","hash":"6ac2bfdb74fd61ad42d6c24504ade488ef6551ee","modified":1705742744949},{"_id":"themes/arknights/source/css/_page/tag.styl","hash":"abfb04e65cf995dbfb5fba4f7d2c4bc767fe75cb","modified":1705742744949},{"_id":"themes/arknights/source/css/_page/category.styl","hash":"fc77731be810bca1aed72531bbdc9c3727ccdef8","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/expand.styl","hash":"6c681da43c2f15e50c2fb9a00c1aafe3d8e2c9d9","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/pjax.styl","hash":"df84f672bdbc2a13f609f203ab5e07371f392d7a","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/lightgallery.styl","hash":"afcb0d319e6e66ba3b8951ab4f6d20e7ccb32d1d","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/modules.styl","hash":"597b2dbff12cae655f4e7d6fd68f602f67b7792f","modified":1705742744949},{"_id":"themes/arknights/source/css/_core/aside/icp.styl","hash":"d2e28707b29aa6f08c78a8ca5fe869b038bafcc8","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/aside/aside.styl","hash":"151074f45e38140587d94efc6682f3026a629481","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/color/base.styl","hash":"e1bf93fe6bf128c83558193c97e2391ba0552745","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/aside/toc.styl","hash":"e85268a6dd2812e24dde347ccd8ce14004193053","modified":1705742744941},{"_id":"themes/arknights/source/css/_modules/social.styl","hash":"e8ec63f74e8579f073b96dc5c3474c759e240d23","modified":1705742744949},{"_id":"themes/arknights/source/css/_core/color/light.styl","hash":"d46c6e4854658cd2f3afc9f48695882ca22cec81","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/color/atom-one.styl","hash":"473f632dfde5fb667985a93fe179f4b95d45453c","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/header/header.styl","hash":"b2cd335ebaf090e1a3305ae63c3493fd26a8ce9a","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/header/flex_layout.styl","hash":"4977dd3b2a74acd649db32ec39f354e3105520ce","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/color/change.styl","hash":"c6fafb6a0f21d221c213dbb515c7f53462df6d79","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/color/dark.styl","hash":"5c0c184afd1cb437c7b4f468f2a801ebbd17345f","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/header/navSecond.styl","hash":"76087b13ebc308653a8114920ccc501e5de9d04a","modified":1705742744949},{"_id":"themes/arknights/source/js/_src/include/ColorMode.ts","hash":"8d2fb72da840ce416acfa1fb3e01c861bda5ebb3","modified":1705742744965},{"_id":"themes/arknights/source/css/_core/header/navBtn.styl","hash":"a2c9b070a1ab76eee81117a8ea57a6f5f31f1879","modified":1705742744949},{"_id":"themes/arknights/source/js/_src/include/Code.ts","hash":"3bfd56c1fe1c7031984aff13021301109a62bf1a","modified":1705742744965},{"_id":"themes/arknights/source/js/_src/include/Cursors.ts","hash":"3206e06d63f2f02860034177dce48b030933c83b","modified":1705742744965},{"_id":"themes/arknights/source/js/_src/include/Comments.ts","hash":"4805979e3ef45248f681cbd3525ce26b480e1285","modified":1705742744965},{"_id":"themes/arknights/source/js/_src/include/Index.ts","hash":"878789a0eea51b33ee3cb5beccaa32d2a890ae8e","modified":1705742744965},{"_id":"themes/arknights/source/js/_src/include/Expands.ts","hash":"c44112f4fc46c2fb0f7d0dd30e80de1cb7b139ef","modified":1705742744965},{"_id":"themes/arknights/source/js/_src/include/Header.ts","hash":"1654cd6d682396969c48038ad847e6ecf065598c","modified":1705742744965},{"_id":"themes/arknights/source/css/_core/layout/flex_layout.styl","hash":"d7d148b105350efcf3edb7a60b331c003fc30142","modified":1705742744949},{"_id":"themes/arknights/source/js/_src/include/Scroll.ts","hash":"23d643c869ddcf597e5ef625d40d860ea64ef94e","modified":1705742744965},{"_id":"themes/arknights/source/css/_core/layout/single_page.styl","hash":"08ea4378b6ff58986ce3fd37327c7b3025348025","modified":1705742744949},{"_id":"themes/arknights/source/css/_page/post/bottom_btn.styl","hash":"83a44b9a8e03bbadfe6dca0e769ab0df427b5240","modified":1705742744949},{"_id":"themes/arknights/source/js/_src/include/canvaDust.ts","hash":"4f8cc7e67e64810290658efb72306a6676057038","modified":1705742744965},{"_id":"themes/arknights/source/js/_src/include/pjaxSupport.ts","hash":"f431d505740c523f89a46a83ac3c50b416c62ee4","modified":1705742744965},{"_id":"themes/arknights/source/css/_page/post/MathJax.styl","hash":"391f4972cb1452e83877c15e9d00efb0c228e852","modified":1705742744949},{"_id":"themes/arknights/source/css/_page/post/post.styl","hash":"4996143f3c231df90dcae2922fbee72251091241","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/cards/admonition.styl","hash":"029c0cdabd67d23d7921f6a13405647c64b59436","modified":1705742744949},{"_id":"themes/arknights/source/css/_page/post/code.styl","hash":"2dc48a068ad372ab8e5430fdcc7493808360b457","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/comments/comments.styl","hash":"4e4eb8e9c66e99bfef4d381a3d21930305cdf042","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/cards/hide.styl","hash":"3658ed7ddda2cabd1711e638c0291e8b7f445c77","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/comments/selector.styl","hash":"6491d1c618d8b2430970f1d390b14cd22b66eaa3","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/comments/gitalk.styl","hash":"f9283cd022a0f03b1a1bbb1957bc3d84a7f82628","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/cards/link-card.styl","hash":"83cb0330f302c18d906231e854b24b303ccb96cf","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/comments/waline.styl","hash":"07c6eeb0064cfc321e8391c9583f36224aa12524","modified":1705742744949},{"_id":"themes/arknights/source/css/_modules/comments/valine.styl","hash":"bf8719a24be93781b5a0e9d2f47abd9c2c200541","modified":1705742744949},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1705742744990},{"_id":"themes/arknights/source/css/_modules/search/left.styl","hash":"4bd31871ac9bcd0d4f871c5a2a9a4bd43359bff5","modified":1705742744949},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1705742744996},{"_id":"themes/arknights/source/css/_modules/search/right.styl","hash":"4b13a824e09ca5fa8efd11a6a610343ccf296d03","modified":1705742744949},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1705742744996},{"_id":"themes/arknights/source/css/_modules/search/base.styl","hash":"06adf7e81b25cef86a6762e1fb1bd413733f92b5","modified":1705742744949},{"_id":"themes/arknights/source/css/_core/aside/layout/right.styl","hash":"c5e3fb53a3b64e0a72c40acabf602a4e6e0cac21","modified":1705742744941},{"_id":"themes/arknights/source/css/_modules/search/single_page.styl","hash":"aeeeec5cebf29da631f42d96e384b8c26e10c786","modified":1705742744949},{"_id":"themes/arknights/source/css/_core/header/layout/left.styl","hash":"2e51ee260e75ccb34ef5199e8a630fc57f1ccfd3","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/header/layout/right.styl","hash":"b210952dfd6d2d896f53d466c8e051fd302e8931","modified":1705742744941},{"_id":"themes/arknights/source/css/_core/aside/layout/left.styl","hash":"ddae41348463687df90685cdbc91eb720ad519fb","modified":1705742744941},{"_id":"themes/arknights/source/js/_src/include/common/base.ts","hash":"d1c019cc54c91caf457ebe4eecc93491f3f28fda","modified":1705742744965},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1705742744990},{"_id":"themes/arknights/source/js/_src/include/common/enviroment.d.ts","hash":"7b366283eff78b2d5b8aefa287c72d7d5be20cc5","modified":1705742744965},{"_id":"themes/arknights/source/js/_src/include/common/selectors.ts","hash":"feab910530b6a63a210e4ad7df0c1fc8970535c0","modified":1705742744965},{"_id":"themes/arknights/source/favicon.ico","hash":"e370d151abc3b081902904a4303e319ceaad2418","modified":1705741597203},{"_id":"themes/arknights/support.jpg","hash":"9ca7c5e40123bc51da82f3a01d13c32ab2b5edc3","modified":1705742744996},{"_id":"themes/arknights/source/lib/fontawesome/css/all.min.css","hash":"40a848cfe07d1ab61d6a5469177e0eaf3c742c8b","modified":1705742744980},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1705742744980},{"_id":"source/_posts/asset/0D82FC63D006C709937288F5D8487A94.jpg","hash":"6bc6cc26972d7fd65f0fa8577a3d3adfa52ad8cf","modified":1710505188899},{"_id":"source/_posts/asset/4ADE439FC2CFA75C043F2CFE652259DF.jpg","hash":"2212745886be7837b23015cf3e8f70897e83017d","modified":1710505389787},{"_id":"source/_posts/asset/Pasted image 20240302160802.png","hash":"23c23471dc64a65593ddf1e19d9273f7ec53b13f","modified":1709366882075},{"_id":"source/_posts/asset/Pasted image 20241104185053.png","hash":"c19cb7f9cbc0ffec88f14e5b2d00f85f642a2677","modified":1730717453519},{"_id":"source/_posts/asset/Pasted image 20240228163108.png","hash":"c55bdc2952d468be20635848e3ce6670bdb30b5e","modified":1709109068749},{"_id":"source/_posts/asset/Pasted image 20241104185451.png","hash":"4416fa8934a8e6ec9af1910b0cf5d875531c6253","modified":1730717691278},{"_id":"source/.git/objects/3b/4103969b35da472270f8a92e0f081d94b0c23f","hash":"4ce06a116653dbf0696f1036c0835aabcf8df995","modified":1709364676817},{"_id":"source/.git/objects/4b/4c5cb5a1184ddd5512df83f81fd410282e5b69","hash":"f3799e61d294a45a760b971343a367b56cae8713","modified":1709364676628},{"_id":"themes/arknights/demo.jpg","hash":"adfa214331b6448f01bc4df197e0ebc8b1521469","modified":1705742744933},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1705742744980},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1705742744996},{"_id":"source/_posts/.obsidian/plugins/templater-obsidian/main.js","hash":"028882edef9317bece4c543b881208d240b0ea59","modified":1709386252996},{"_id":"source/_posts/asset/4EF5B13F3EC7336657E1FB9DEBC4A7EB.jpg","hash":"92384ca8e26c2c5580e42cfafe1173503c760507","modified":1710505395200},{"_id":"source/_posts/asset/F0B429B06B52D63FC70221996AB409DD.jpg","hash":"9b946cf131a584a38193500e10f5daafcbb27e41","modified":1710505218789},{"_id":"source/.git/objects/f0/7ca9063124ce06fb466ca84fd5b837478defa5","hash":"b38a9b1b8c725689d00fc5a3f2b5827e21b3bd62","modified":1709364676585},{"_id":"source/_posts/.obsidian/plugins/obsidian-excalidraw-plugin/styles.css","hash":"b88f4aeb574fe9d4360c8ba295f8d16328b35b9a","modified":1708661438454},{"_id":"source/_posts/asset/aoce2.gif","hash":"edf690590a99d940a5bb7dcdbfdd1455b5599234","modified":1726370146826},{"_id":"source/_posts/asset/aaaa.png","hash":"838787e427524aa02aa9082f2771041e6a144398","modified":1725960587504},{"_id":"source/_posts/asset/Pasted image 20240910175412.png","hash":"4ec19824b77d773199a83f5c92b04094f57ceac8","modified":1725962052126},{"_id":"source/_posts/asset/aoce.gif","hash":"4cdb343ffbe84b46594484c5f389c5fbb491e103","modified":1726321337594},{"_id":"source/_posts/asset/Pasted image 20241107122012.png","hash":"63dee710ab086f28359bc87073acc86fe724c957","modified":1730953212111},{"_id":"source/_posts/asset/aaa.png","hash":"4ec19824b77d773199a83f5c92b04094f57ceac8","modified":1725961847557},{"_id":"themes/arknights/source/lib/fontawesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1705742744990},{"_id":"source/_posts/asset/Pasted image 20241106225845.png","hash":"153c8769021461cad58c0dae8f60bf6eaa856b6e","modified":1730905125322},{"_id":"source/_posts/asset/Pasted image 20241106215030.png","hash":"56c5ff97607a2d168220219ef416987b1d2bf017","modified":1730901030759},{"_id":"source/.git/objects/23/1b82d4fc3f04d4179d9221e6153b24c432f9af","hash":"a7e362d25f81492a0132599d49c60dc72fa89977","modified":1709364676775},{"_id":"themes/arknights/source/img/pc-bg.jpg","hash":"7c876119e1111e9cdaccc90a4bdd952eba20d240","modified":1705742744965},{"_id":"themes/arknights/source/js/gitalk.js","hash":"4aad81a9c3bb001371478eae124a95f508075421","modified":1705742744980},{"_id":"source/_posts/asset/Pasted image 20241107135636.png","hash":"49f5fa1031797f50b0cbe9a3f9fce5fa396ebf33","modified":1730958996093},{"_id":"source/.git/objects/6b/cab4a79269eac2345ab26e65a06876a481a22b","hash":"4784186f8509f76493a132ce5bd51fcd44449bae","modified":1709364676712},{"_id":"themes/arknights/source/img/bk.jpg","hash":"2146714c7429ca673a38469e7f74a412dc0ef09e","modified":1705742744965},{"_id":"source/.git/objects/9a/23552eb24d30b322fcc2fd79080c556c0bef6e","hash":"99c672fddfa84ce1de34d88a7b7062a1fb0a2033","modified":1709364676892},{"_id":"source/_posts/学习项目/Programmming Challenges.png","hash":"e3fe114e6012a2ea840b048de519846c90dd23c6","modified":1704780262623},{"_id":"source/.git/objects/ea/560abff312c72e8a99ffda424d9d8ae54964b9","hash":"7cb0ce6fa8aea4dc0f0ac259bdb6b52840824e4e","modified":1709364676622},{"_id":"source/_posts/.obsidian/plugins/table-editor-obsidian/main.js","hash":"0bb0c7358814b4b35319c2f06fcf002cc3ddba13","modified":1708747917553},{"_id":"source/_posts/.obsidian/plugins/obsidian-mind-map/main.js","hash":"f911e25347f63465b1ce964cb7664468a1e7e606","modified":1708755967168},{"_id":"source/.git/objects/01/7a2b69975f25d497bb763b62ac713aab2bf584","hash":"414372d62e9cd87525f3a6522f7fc239b72796b1","modified":1709364676875},{"_id":"source/_posts/前端/正则表达式.pdf","hash":"f8a2c8053d3d345425c7cabba9c3c801f816d8d8","modified":1694620540607},{"_id":"source/_posts/.obsidian/plugins/obsidian-excalidraw-plugin/main.js","hash":"066427f124e77f7d0b01fdf0fbf51c118c5ebf5e","modified":1708661437039},{"_id":"public/search.json","hash":"2c4f13df483d0d3d5a7296e4f5d76dd8fe3d7cbf","modified":1737360593933},{"_id":"public/Proverb/index.html","hash":"74668fac95c936004600b54f161c819ed7b7c301","modified":1737360593933},{"_id":"public/2025/01/07/阅读笔记/How Google Works/index.html","hash":"404de9717040132b1b37fdd000b2720397f6d6b7","modified":1737360593933},{"_id":"public/2024/11/08/阅读笔记/《做最好的自己》/index.html","hash":"c3b4eef5efadfa7d4cb9966ddec3f494068173ba","modified":1737360593933},{"_id":"public/2024/11/07/后端/DB/index.html","hash":"8c31cb48a2c60bfbd4f239159d0646ed8a9b77cc","modified":1737360593933},{"_id":"public/2024/09/18/阅读笔记/阅读杂记/index.html","hash":"648f6e39a988e4011b10ebf4c378d24428668e69","modified":1737360593933},{"_id":"public/2024/09/10/后端/分布式——MapReduce，GFS/index.html","hash":"79b2f504f726854079ae1131256ce13b4c14caa9","modified":1737360593933},{"_id":"public/2024/09/09/前端/SSE 流式传输/index.html","hash":"3982d39971f9a99826d4b3b7a81cd03f7b19804a","modified":1737360593933},{"_id":"public/2024/08/24/其他/Vim/index.html","hash":"c25127dfdf5b9afac9c4c712f58fd68a479d4bbf","modified":1737360593933},{"_id":"public/2024/07/18/总结/大一下总结/index.html","hash":"1e843b09ce174480f7aca47215d1c292dc45c134","modified":1737360593933},{"_id":"public/2024/03/07/算法竞赛/日常总结/index.html","hash":"5c2c9994bceab04e35aec0f8ae7aa16b226705fa","modified":1737360593933},{"_id":"public/2024/03/02/无人机/路径规划计划/index.html","hash":"26a7e2638e3195aaee25fc76bfd35d19a2a2d3f2","modified":1737360593933},{"_id":"public/2024/02/24/学习项目/Bilibili清理计划/index.html","hash":"427d1abe17c7de885de2962a863cd6c37728f33c","modified":1737360593933},{"_id":"public/2024/02/23/前端/HTML/index.html","hash":"5ae7047a4bd002d7c52adab1a9f13e42eba1be13","modified":1737360593933},{"_id":"public/2024/02/23/其他/LinuxLearning/index.html","hash":"0e4532deecba9bb4a87b2362ed7c175105892873","modified":1737360593933},{"_id":"public/2024/02/23/其他/Python 爬虫/index.html","hash":"98d1c3874fda1d37ba5282527bb7f0ae456303c7","modified":1737360593933},{"_id":"public/2024/02/23/算法竞赛/二分图/index.html","hash":"043eb6cf543ddae93fb62400eade9879496a957c","modified":1737360593933},{"_id":"public/2024/02/23/算法竞赛/女生赛补题总结/index.html","hash":"281084e0b8cc7e3da8530c1cd1e8a62bc21998a1","modified":1737360593933},{"_id":"public/2024/02/23/算法竞赛/高三暑假集训总结/index.html","hash":"d220de76f9f39465e319a4ae1288f439ad0fd15f","modified":1737360593933},{"_id":"public/2024/02/23/无人机/ROS快速学习/index.html","hash":"14fd675b46e19cd35c517e27043e87523ce57902","modified":1737360593933},{"_id":"public/2024/02/23/无人机/无人机理论知识（元启发式）/index.html","hash":"7075a1b3ab373e6ded22dcc8fece8b91915d5001","modified":1737360593933},{"_id":"public/2024/01/21/总结/新，兴奋与焦虑——大一上期总结/index.html","hash":"beff11093eae4b497abccf6be0083a6cd465e8b7","modified":1737360593933},{"_id":"public/2024/11/14/其他/强化学习/index.html","hash":"68533d43324d09b15337f0b753aec8edd2975c79","modified":1737360593933},{"_id":"public/2024/11/07/后端/掘金笔记/index.html","hash":"971359cdec1c1bb870cf4e34bffbdf08a759dc92","modified":1737360593933},{"_id":"public/2024/09/14/前端/熬测出题——一架飞机/index.html","hash":"3931567df4e640331f2c2cb5c37c7a74394f6601","modified":1737360593933},{"_id":"public/2024/05/19/学习项目/Todo Programs/index.html","hash":"e78d0da649b683e8e21d98552056005d693def65","modified":1737360593933},{"_id":"public/2024/03/15/阅读笔记/CSAPP/index.html","hash":"35cb72ac7cc31fa1bce3883e3a2c7f524882b21e","modified":1737360593933},{"_id":"public/2024/03/14/阅读笔记/BLOG阅读笔记/index.html","hash":"0e18b358f6a3c55c0485ac1d32e531a02db24734","modified":1737360593933},{"_id":"public/2024/02/23/前端/ToBeDone/index.html","hash":"b36ec96dce6ae91bedf8fedbcddb6938595f9077","modified":1737360593933},{"_id":"public/2024/02/23/前端/杂记/index.html","hash":"1bec8fd472e969aa3c3013fb278e6ecf0d96b163","modified":1737360593933},{"_id":"public/2024/01/21/总结/自传/index.html","hash":"92f37a9f451fd9bd57556b61c27fee3fc3f34f02","modified":1737360593933},{"_id":"public/archives/index.html","hash":"2a282e999bf9f5da5690253d929114ea00af90d4","modified":1737360593933},{"_id":"public/archives/page/2/index.html","hash":"45f02d3179b06c71a180778b5ecdfc3e5a2db71c","modified":1737360593933},{"_id":"public/archives/page/3/index.html","hash":"616c8d9ce44009333998e65b306876afa83be32a","modified":1737360593933},{"_id":"public/archives/2024/index.html","hash":"01dceb9e965a7c70b2e11a2ec987ee960adbb712","modified":1737360593933},{"_id":"public/archives/2024/page/2/index.html","hash":"ae6bc01ee6b495665b3afcae938f386fa3bcdd6b","modified":1737360593933},{"_id":"public/archives/2024/page/3/index.html","hash":"63cdeb33af73a0567bafbe3b3b0db706187edef7","modified":1737360593933},{"_id":"public/archives/2024/01/index.html","hash":"682dc32eae2d9ea74f08df0c190b5d3d2adedf56","modified":1737360593933},{"_id":"public/archives/2024/02/index.html","hash":"ed0219c8e992d387096e62e819fe0af3795591db","modified":1737360593933},{"_id":"public/archives/2024/02/page/2/index.html","hash":"f1a7605511a0c73820b1e967b482831b67e0e886","modified":1737360593933},{"_id":"public/archives/2024/03/index.html","hash":"df01fd6d6113bd0ce150fc4ecee42a726fea7543","modified":1737360593933},{"_id":"public/archives/2024/05/index.html","hash":"4fc3e0b6796b07f501326d890315759f15ee729c","modified":1737360593933},{"_id":"public/archives/2024/07/index.html","hash":"fd5e1b37ee57f036011581b399a385702974e1b8","modified":1737360593933},{"_id":"public/archives/2024/08/index.html","hash":"4fbe403c8dac1eaa924799de7f3900546960a1de","modified":1737360593933},{"_id":"public/archives/2024/09/index.html","hash":"81406a4186129608bf28dc47fff3073238a47748","modified":1737360593933},{"_id":"public/archives/2024/11/index.html","hash":"5f1a7d809c94c79ef2f26f7fbd9867589731c498","modified":1737360593933},{"_id":"public/archives/2025/index.html","hash":"21eb712df6e9352077fdbbc46c2e6a8191b2bcf5","modified":1737360593933},{"_id":"public/archives/2025/01/index.html","hash":"d7e0641fa0302e63c9756fd4f693d042a97ab58b","modified":1737360593933},{"_id":"public/tags/前端/index.html","hash":"8b6cbf96834b4ad0aa28dac0d06f63f29b7c1a4f","modified":1737360593933},{"_id":"public/tags/CSS/index.html","hash":"31218d998e40246aab035076e1da3ffeca5d2732","modified":1737360593933},{"_id":"public/tags/Nodejs/index.html","hash":"2575f667407591a1c3aeb79d45b7f14674e50d77","modified":1737360593933},{"_id":"public/tags/HTML/index.html","hash":"485c868b5531b34ff6c3b70b1a29b346fdab23b3","modified":1737360593933},{"_id":"public/tags/Vue3/index.html","hash":"65eea3dfd869f69250d9060f51cc7f2dace72604","modified":1737360593933},{"_id":"public/tags/后端/index.html","hash":"a8b574971219a2f14d2a8bd881a92b17ce5220b2","modified":1737360593933},{"_id":"public/tags/Linux/index.html","hash":"bbff297a3b167cac224bc72d393b95b645bf8de8","modified":1737360593933},{"_id":"public/tags/数据库/index.html","hash":"4f71dd0d7eaeaff0a07be9d0a92ead93317c42b4","modified":1737360593933},{"_id":"public/tags/学习项目/index.html","hash":"f40cdab97ab1f14660d883aa6f94d7e5780bc6f2","modified":1737360593933},{"_id":"public/tags/Python/index.html","hash":"6e5c5a2cc5623707094c9e579198fe6f9f7d5293","modified":1737360593933},{"_id":"public/tags/Vim/index.html","hash":"573c32a796a86a064f93644bfa4bd1d8ce2bd84f","modified":1737360593933},{"_id":"public/tags/学习笔记/index.html","hash":"be6dd57068a51bbf49eb0ce3c22d3bb7d8c34e1c","modified":1737360593933},{"_id":"public/tags/GIT/index.html","hash":"6c7fcfae24092d5f496293c2aa2b7722b0c4ba08","modified":1737360593933},{"_id":"public/tags/算法竞赛/index.html","hash":"90741eaa27c07aff58ef3e66875f79e4d69dddd5","modified":1737360593933},{"_id":"public/tags/总结/index.html","hash":"a447541b2c9ae29708407357b355f3179b784b45","modified":1737360593933},{"_id":"public/tags/生活/index.html","hash":"1dbbb035241dddced1dc45477eb70721e3733997","modified":1737360593933},{"_id":"public/tags/无人机/index.html","hash":"27a13b9319ddb5d9432e7060e43917bf8fbc357a","modified":1737360593933},{"_id":"public/tags/嵌入式/index.html","hash":"f1e16b7534742944628ae8345e542e91ca6ef62c","modified":1737360593933},{"_id":"public/tags/阅读笔记/index.html","hash":"272a98174077a4222c19135edc9dafdf643392a3","modified":1737360593933},{"_id":"public/tags/Go/index.html","hash":"dda1f712b678b93f5a3a0c51e91a43c811b37ac0","modified":1737360593933},{"_id":"public/tags/语言学习/index.html","hash":"a66d555df815911adbad446fd5f6c8f624a3a386","modified":1737360593933},{"_id":"public/tags/JS/index.html","hash":"2541a3233d5f75e2475dd029c2455f52b8c50702","modified":1737360593933},{"_id":"public/index.html","hash":"a2f437eed3f783c61c494a40ff95102e0b430156","modified":1737360593933},{"_id":"public/page/2/index.html","hash":"1673ce716ded8105afd5f524054ef0ba278ef921","modified":1737360593933},{"_id":"public/page/3/index.html","hash":"2b3dd9b712d3e92a2e0b39a47d48e58967d28a81","modified":1737360593933},{"_id":"public/2024/09/02/语言/Python/index.html","hash":"f6d390714db223d101b477937d245b124ff95cad","modified":1737360593933},{"_id":"public/2024/05/16/语言/Go/index.html","hash":"bc8c6b569562a112bec0bc15402aa5ef3fb81870","modified":1737360593933},{"_id":"public/2024/03/26/前端/联创分享——Hexo原理浅析/index.html","hash":"9a9ba4528b6b6a9682c521c7d7dd4aaa84d4702a","modified":1737360593933},{"_id":"public/2024/02/23/前端/CSS/index.html","hash":"41ddc205c9ea065898f494f6fd282766ad97f403","modified":1737360593933},{"_id":"public/2024/02/23/前端/Node.js/index.html","hash":"3a0c8e2f9e181ee0ab374642a4ad905eab036bd3","modified":1737360593933},{"_id":"public/2024/02/23/前端/Vue3/index.html","hash":"a0e0083733754f2d286c9a8c697b14264d3930e1","modified":1737360593933},{"_id":"public/2024/02/23/其他/GIT/index.html","hash":"f8b983f57c968244175859575471066b1a68ccc5","modified":1737360593933},{"_id":"public/2024/02/23/无人机/无人机笔记/index.html","hash":"d7957c49c42766db957378125360ae0d9536cf55","modified":1737360593933},{"_id":"public/2024/02/23/语言/JS/index.html","hash":"885655710f29e441dcfe94c50c7d8e65b0f36509","modified":1737360593933},{"_id":"public/2024/02/02/阅读笔记/数学之美学习笔记/index.html","hash":"8cffd0f2ab930ef9fff1abe62bbc3114c2c051d8","modified":1737360593933},{"_id":"public/2024/02/23/前端/新人任务学习笔记/index.html","hash":"b4b8677c4f08c1fb538fa7e5886d3a48d20354b6","modified":1737360593933},{"_id":"public/font/BenderLight.ttf","hash":"7fd4b80a411cabd032aaf5aa5ad704330b1bdeb5","modified":1737360593933},{"_id":"public/font/Bender.ttf","hash":"e29dda825efdd0a9278535190a1918571f7f1019","modified":1737360593933},{"_id":"public/img/bg.jpg","hash":"463cfbcfd68886be8564a532c38cb32d180edba4","modified":1737360593933},{"_id":"public/font/JetBrainsMono-Regular.woff2","hash":"23f70e45de896a9e12798db1d1f1ce5197f33ca4","modified":1737360593933},{"_id":"public/img/faction/3.png","hash":"58601c475db65b93f1e742a79a270321bb408c2b","modified":1737360593933},{"_id":"public/img/faction/1.png","hash":"a7c71fcc55988aec2a89c5cf190c4a62d45e872a","modified":1737360593933},{"_id":"public/img/faction/2.png","hash":"312ef23aa162cbc9aeed560c68257612ef92f899","modified":1737360593933},{"_id":"public/img/faction/5.png","hash":"b05382f0898ed5cf0f75c6420cf612c87d4641d3","modified":1737360593933},{"_id":"public/img/faction/4.png","hash":"f45580479628e9cc8a4c785a8acdd958086ed893","modified":1737360593933},{"_id":"public/lib/fontawesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1737360593933},{"_id":"public/lib/fontawesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1737360593933},{"_id":"public/lib/fontawesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1737360593933},{"_id":"public/lib/fontawesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1737360593933},{"_id":"public/logo.png","hash":"9836c4ae46fe1fac39851b89f1f667c5448e77f1","modified":1737360593933},{"_id":"public/favicon.ico","hash":"e370d151abc3b081902904a4303e319ceaad2418","modified":1737360593933},{"_id":"public/lib/fontawesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1737360593933},{"_id":"public/404.html","hash":"72ac49fc2b61ad4fac410e856852f1d7bf1628d8","modified":1737360593933},{"_id":"public/README.html","hash":"930cf1481752795d42c7855182ec9e8aaba7bec7","modified":1737360593933},{"_id":"public/lib/encrypt/hbe.js","hash":"ea5bfc250db2cdb6286f7b20b3d79c73cc577490","modified":1737360593933},{"_id":"public/js/search.js","hash":"d614838db98110bb465f07ef879abd5b7285ee7b","modified":1737360593933},{"_id":"public/lib/encrypt/hbe.style.css","hash":"cb9a1870a0330ec3d97d1c23df3210bdc842f0b7","modified":1737360593933},{"_id":"public/css/arknights.css","hash":"d3e1def1198da2053fb1446844935382f06deaa8","modified":1737360593933},{"_id":"public/js/arknights.js","hash":"16064d7c3925d0435e07fc14d06e46d7e4e9ac63","modified":1737360593933},{"_id":"public/js/pjax.js","hash":"eddf2d0a09bc2f6b75ff130560985562bcb6b8d5","modified":1737360593933},{"_id":"public/lib/fontawesome/css/all.min.css","hash":"60bf2ab096ea6256181e20e110ac74d48a8f32ae","modified":1737360593933},{"_id":"public/lib/fontawesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1737360593933},{"_id":"public/lib/fontawesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1737360593933},{"_id":"public/lib/fontawesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1737360593933},{"_id":"public/img/pc-bg.jpg","hash":"7c876119e1111e9cdaccc90a4bdd952eba20d240","modified":1737360593933},{"_id":"public/img/bk.jpg","hash":"2146714c7429ca673a38469e7f74a412dc0ef09e","modified":1737360593933}],"Category":[],"Data":[],"Page":[{"title":"摘录","data":"2024-3-14","tags":["生活"],"_content":"- 把决定自己的感受的权利，从他人手上拿回来。\n- 把自己的幸福感建立在内向探寻之上，也是心理独立的开端。\n- 认清并接受自己能力的边界，依此合理“使用自己”，并用工具来扩展边界。\n- 接受平凡，不甘平凡。\n- 去掉“自己还没拿出真本事，不然只要努力就能够成功”的想法。\n- 过剩信息剥夺人类面对空白时的想象力。\n- 当生活被大量无意识的决策占据，是的，我们以前根本没意识到这些琐碎的细微的比较和联想有多耗精力，时间久了哪还有心智去干正事、去追求和探索，只剩下焦虑和空虚了。\n- 放弃那些低优先级的微小决策，尽量让它们不过脑子： 设计一套规则直接套用；临睡前安排整理第二天要做的最重要的5，6件事；限制对小事纠结的时间；减少对“完美”的追求，有的事情不需要那么完美。\n- 现在想想看，一顿饭而已踩雷了又怎样呢，跟朋友吐槽不也是一种乐趣。难得的假期，也要心操稀碎把一切安排得妥妥当当吗，也许和家人朋友在一起就是一种乐趣呢？\n- 浮生岂得长年少，莫惜醉来开口笑。\n- 莫恨乡程千里远，眼中从此故乡春。\n- 此生得作太平人，只向尘中便出尘。\n- 安能追逐人间事，万里身同不系舟。\n- 住山不记年，看云即是仙。\n- 最是凝眸无限意，似曾相连在前生。\n- 选择简单而不是复杂，把多出来的时间与心思花在你的任务上，那会更加值得。\n- 正因为你为你的玫瑰花费了时间，才使她变得这么重要\n- 心累时，去做一些力所能及的轻体力活，比如扫除、下楼散步、练个字、做手工，都利于解除被卡住的感受，恢复自我效能，也正因为它们轻，给人的反馈才比较快。\n- 重点是，你不再被动等待，而是主动疗愈。\n- 越是无力感蔓延的时刻，越是需要这种主观能动性，即，我是有行动力的主体，可以通过一些具体的行动向我想要的人生再迈近一点。\n- 创造活动能够帮助个体实现自我，这是个体心灵整合的过程，也是个体发展的核心。\n- 拥有独处能力的人在遇到危机或困难时，不只会向外寻求支持，也能够向内获得肯定。能够从所处的社会环境中跳脱出来，独立地思考和判断自己的处境，不会被别人绑架。\n- 你需要“创造”一个能够及时回应、肯定或安抚自己的存在。\n","source":"Proverb/index.md","raw":"---\ntitle: 摘录\ndata: 2024-3-14\ntags:\n  - 生活\n---\n- 把决定自己的感受的权利，从他人手上拿回来。\n- 把自己的幸福感建立在内向探寻之上，也是心理独立的开端。\n- 认清并接受自己能力的边界，依此合理“使用自己”，并用工具来扩展边界。\n- 接受平凡，不甘平凡。\n- 去掉“自己还没拿出真本事，不然只要努力就能够成功”的想法。\n- 过剩信息剥夺人类面对空白时的想象力。\n- 当生活被大量无意识的决策占据，是的，我们以前根本没意识到这些琐碎的细微的比较和联想有多耗精力，时间久了哪还有心智去干正事、去追求和探索，只剩下焦虑和空虚了。\n- 放弃那些低优先级的微小决策，尽量让它们不过脑子： 设计一套规则直接套用；临睡前安排整理第二天要做的最重要的5，6件事；限制对小事纠结的时间；减少对“完美”的追求，有的事情不需要那么完美。\n- 现在想想看，一顿饭而已踩雷了又怎样呢，跟朋友吐槽不也是一种乐趣。难得的假期，也要心操稀碎把一切安排得妥妥当当吗，也许和家人朋友在一起就是一种乐趣呢？\n- 浮生岂得长年少，莫惜醉来开口笑。\n- 莫恨乡程千里远，眼中从此故乡春。\n- 此生得作太平人，只向尘中便出尘。\n- 安能追逐人间事，万里身同不系舟。\n- 住山不记年，看云即是仙。\n- 最是凝眸无限意，似曾相连在前生。\n- 选择简单而不是复杂，把多出来的时间与心思花在你的任务上，那会更加值得。\n- 正因为你为你的玫瑰花费了时间，才使她变得这么重要\n- 心累时，去做一些力所能及的轻体力活，比如扫除、下楼散步、练个字、做手工，都利于解除被卡住的感受，恢复自我效能，也正因为它们轻，给人的反馈才比较快。\n- 重点是，你不再被动等待，而是主动疗愈。\n- 越是无力感蔓延的时刻，越是需要这种主观能动性，即，我是有行动力的主体，可以通过一些具体的行动向我想要的人生再迈近一点。\n- 创造活动能够帮助个体实现自我，这是个体心灵整合的过程，也是个体发展的核心。\n- 拥有独处能力的人在遇到危机或困难时，不只会向外寻求支持，也能够向内获得肯定。能够从所处的社会环境中跳脱出来，独立地思考和判断自己的处境，不会被别人绑架。\n- 你需要“创造”一个能够及时回应、肯定或安抚自己的存在。\n","date":"2025-01-20T07:35:33.900Z","updated":"2024-03-14T13:27:38.930Z","path":"Proverb/index.html","comments":1,"layout":"page","_id":"cm64rn3ut0000p4wve1vt1umx","content":"<ul>\r\n<li>把决定自己的感受的权利，从他人手上拿回来。</li>\r\n<li>把自己的幸福感建立在内向探寻之上，也是心理独立的开端。</li>\r\n<li>认清并接受自己能力的边界，依此合理“使用自己”，并用工具来扩展边界。</li>\r\n<li>接受平凡，不甘平凡。</li>\r\n<li>去掉“自己还没拿出真本事，不然只要努力就能够成功”的想法。</li>\r\n<li>过剩信息剥夺人类面对空白时的想象力。</li>\r\n<li>当生活被大量无意识的决策占据，是的，我们以前根本没意识到这些琐碎的细微的比较和联想有多耗精力，时间久了哪还有心智去干正事、去追求和探索，只剩下焦虑和空虚了。</li>\r\n<li>放弃那些低优先级的微小决策，尽量让它们不过脑子：\r\n设计一套规则直接套用；临睡前安排整理第二天要做的最重要的5，6件事；限制对小事纠结的时间；减少对“完美”的追求，有的事情不需要那么完美。</li>\r\n<li>现在想想看，一顿饭而已踩雷了又怎样呢，跟朋友吐槽不也是一种乐趣。难得的假期，也要心操稀碎把一切安排得妥妥当当吗，也许和家人朋友在一起就是一种乐趣呢？</li>\r\n<li>浮生岂得长年少，莫惜醉来开口笑。</li>\r\n<li>莫恨乡程千里远，眼中从此故乡春。</li>\r\n<li>此生得作太平人，只向尘中便出尘。</li>\r\n<li>安能追逐人间事，万里身同不系舟。</li>\r\n<li>住山不记年，看云即是仙。</li>\r\n<li>最是凝眸无限意，似曾相连在前生。</li>\r\n<li>选择简单而不是复杂，把多出来的时间与心思花在你的任务上，那会更加值得。</li>\r\n<li>正因为你为你的玫瑰花费了时间，才使她变得这么重要</li>\r\n<li>心累时，去做一些力所能及的轻体力活，比如扫除、下楼散步、练个字、做手工，都利于解除被卡住的感受，恢复自我效能，也正因为它们轻，给人的反馈才比较快。</li>\r\n<li>重点是，你不再被动等待，而是主动疗愈。</li>\r\n<li>越是无力感蔓延的时刻，越是需要这种主观能动性，即，我是有行动力的主体，可以通过一些具体的行动向我想要的人生再迈近一点。</li>\r\n<li>创造活动能够帮助个体实现自我，这是个体心灵整合的过程，也是个体发展的核心。</li>\r\n<li>拥有独处能力的人在遇到危机或困难时，不只会向外寻求支持，也能够向内获得肯定。能够从所处的社会环境中跳脱出来，独立地思考和判断自己的处境，不会被别人绑架。</li>\r\n<li>你需要“创造”一个能够及时回应、肯定或安抚自己的存在。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<ul>\r\n<li>把决定自己的感受的权利，从他人手上拿回来。</li>\r\n<li>把自己的幸福感建立在内向探寻之上，也是心理独立的开端。</li>\r\n<li>认清并接受自己能力的边界，依此合理“使用自己”，并用工具来扩展边界。</li>\r\n<li>接受平凡，不甘平凡。</li>\r\n<li>去掉“自己还没拿出真本事，不然只要努力就能够成功”的想法。</li>\r\n<li>过剩信息剥夺人类面对空白时的想象力。</li>\r\n<li>当生活被大量无意识的决策占据，是的，我们以前根本没意识到这些琐碎的细微的比较和联想有多耗精力，时间久了哪还有心智去干正事、去追求和探索，只剩下焦虑和空虚了。</li>\r\n<li>放弃那些低优先级的微小决策，尽量让它们不过脑子：\r\n设计一套规则直接套用；临睡前安排整理第二天要做的最重要的5，6件事；限制对小事纠结的时间；减少对“完美”的追求，有的事情不需要那么完美。</li>\r\n<li>现在想想看，一顿饭而已踩雷了又怎样呢，跟朋友吐槽不也是一种乐趣。难得的假期，也要心操稀碎把一切安排得妥妥当当吗，也许和家人朋友在一起就是一种乐趣呢？</li>\r\n<li>浮生岂得长年少，莫惜醉来开口笑。</li>\r\n<li>莫恨乡程千里远，眼中从此故乡春。</li>\r\n<li>此生得作太平人，只向尘中便出尘。</li>\r\n<li>安能追逐人间事，万里身同不系舟。</li>\r\n<li>住山不记年，看云即是仙。</li>\r\n<li>最是凝眸无限意，似曾相连在前生。</li>\r\n<li>选择简单而不是复杂，把多出来的时间与心思花在你的任务上，那会更加值得。</li>\r\n<li>正因为你为你的玫瑰花费了时间，才使她变得这么重要</li>\r\n<li>心累时，去做一些力所能及的轻体力活，比如扫除、下楼散步、练个字、做手工，都利于解除被卡住的感受，恢复自我效能，也正因为它们轻，给人的反馈才比较快。</li>\r\n<li>重点是，你不再被动等待，而是主动疗愈。</li>\r\n<li>越是无力感蔓延的时刻，越是需要这种主观能动性，即，我是有行动力的主体，可以通过一些具体的行动向我想要的人生再迈近一点。</li>\r\n<li>创造活动能够帮助个体实现自我，这是个体心灵整合的过程，也是个体发展的核心。</li>\r\n<li>拥有独处能力的人在遇到危机或困难时，不只会向外寻求支持，也能够向内获得肯定。能够从所处的社会环境中跳脱出来，独立地思考和判断自己的处境，不会被别人绑架。</li>\r\n<li>你需要“创造”一个能够及时回应、肯定或安抚自己的存在。</li>\r\n</ul>\r\n"}],"Post":[{"title":"css学习笔记","date":"2024-02-23T07:04:07.000Z","_content":"\n# css学习笔记\n\n\n## 选择多个元素\n\n```\np,li,h1{\n\tColor:red;\n}\n```\n\n## 选择器\n\n- 通用选择器（选择全部）：`*`\n\n- 伪类\n\n- 属性选择器\n\n- a:hover {color :red;}当鼠标停在a上时\n\n## 属性\n\ncolor\n\nFont-family字体\n\nFont-size\n\nText-align向哪里对齐\n\nPadding 内边距\n\nMargin 外边距\n\n- 当只指定**一个**值时，该值会统一应用到**全部四个边**的外边距上。\n- 指定**两个**值时，第一个值会应用于**上边和下边**的外边距，第二个值应用于**左边和右边**。\n- 指定**三个**值时，第一个值应用于**上边**，第二个值应用于**右边和左边**，第三个则应用于**下边**的外边距。\n- 指定**四个**值时，依次（顺时针方向）作为**上边**，**右边**，**下边**，和**左边**的外边距。\n- auto\n\n让浏览器自己选择一个合适的外边距。有时，在一些特殊情况下，该值可以使元素居中。\n\ncolor：元素内容（通常是文本）的颜色\n\nbackground-color：元素内容和内边距底下的颜色\n\nWidth height\n\n## css变量\n\n必须以--开头\n\n定义：--aa:50px;\n\n应用：height:var(--aa);\n\n## css动画\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animations/Using_CSS_animations\n\ntransition and transform\n\n## flex布局\n\n`display:flex`\n\n### 主轴和交叉轴\n\n`flex-direction:row` 或 `row-reverse` 或 `column` 或 `column-reverse`（主轴）\n\n### 宽度\n\n#### auto\n\n足够大时相当于 width=max-content（一直不换行）\n\n当元素宽度远远超过容器宽度时，相当于 width=min-content（最大单词的距离）\n\n#### 设置宽度\n\n- `flex-basis` 基础长度\n\n- `flex-grow` 生长的权值\n\t（$\\sum_i (flexBasis_i+flexGrow_i*x)=contentWidth$ 这样求x）\n\t\n\t（0：最大就是basis）\n\t\n- 实现某元素的宽度是其他元素的宽度的5倍：flex-basis：0px\n\n  （1：容器不够时均匀缩小）\n\n- `flex-shrink` 缩小的权值（如果子元素宽度和大于了容器宽度）\n\n  （$\\sum_i (flexBasis_i-flexShrink_i*x)=contentWidth$ 这样求x）\n\n- `flex:<grow> <shrink> <basis> `\n\n  默认 `flex:0 1 auto;= flex:initial`\n\n  none = 0 0 auto\n\n### 对齐\n\n（包括内部的文字也算一个item）\n\n<img src=\"C:\\Users\\27427\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240110103504960.png\" alt=\"image-20240110103504960\" style=\"zoom: 33%;\" />\n\n#### 主轴上\n\n**align-items**（一个主轴上）\n\nstretch 所有的元素行高都一样（默认）\n\n在交叉轴起点/终点/中间对齐 align-items : flex-start flex-end center\n\nbaseline 不管字体大小，都在文字的基线来对齐\n\n**align-content**（多个主轴上）\n\n同下（justify-content）\n\n#### 交叉轴上\n\n**justify-content** : flex-start flex-end center\n\nspace-between 中间相同空隙，首尾紧靠两边\n\nspace-around 中间相同空隙，首尾与两边的空隙是中间的1/2\n\nspace-evenly 中间与首位的空隙都相同\n\n### 换行\n\nflex-wrap:wrap 保证宽度的同时换行\n\n### 顺序\n\norder\n\n无障碍人士\n\n## css过渡动画\n\n过渡不行时试试\n\n`setTimeout(() => {element.style.top = \"100px\";},1);`\n\n[discussion](https://stackoverflow.com/questions/64707211/transition-not-working-correctly-when-element-is-added-to-the-dom)\n\n## cursor属性\n\n`cursor`属性用于指定鼠标指针在元素上的样式。它可以改变鼠标指针的外观，以提供视觉反馈或指示用户可以执行的操作。\n\ndefault箭头 pointer手指，可点击 text文本\n\n## 选择器\n### 相邻兄弟选择器 ‘+’ \n\n`input[type=\"checkbox\"]:checked + label` 是一个 CSS 选择器，用于选择被选中的复选框（checkbox）后面紧邻的 `<label>` 元素。\n\n### 一般兄弟组合器 `~`\n\n后一个节点在前一个节点后面的任意位置，并且共享同一个父节点。\n\n### 后代选择器 ‘ ’（空格）\n\n要实现当某个元素被覆盖时，其子元素的样式发生改变，可以使用 CSS 中的后代选择器（descendant selector）和伪类选择器（pseudo-class selector）。\n\n首先，您可以使用后代选择器来选择被覆盖元素的子元素。后代选择器使用空格来表示元素之间的层级关系。\n\n### `>` : 直接子代选择器\n\n### `:nth-child`\n\n不是真的子元素，是这个选择器选择的第n个，比如下面选择的都是`<li>`\n\n```\n/* 选择第3个子元素 */ li:nth-child(3) \n/* 选择所有3的倍数位置的子元素 */ li:nth-child(3n) \n/* 选择所有3的倍数位置的子元素，并减去2 */ li:nth-child(3n-2)\n```\n\n### 属性选择器\n\n[link](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors)\n\n### 分组选择器 `，`\n\n`,` 是将不同的选择器组合在一起的方法，它选择所有能被列表中的任意一个选择器选中的节点。\n\n### `:where` \n\n`:where(h1, h2, h3)` 将选择 `<h1>`、`<h2>` 和 `<h3>` 元素\n`:where(section, article) p` 选择器将选择 `<section>` 和 `<article>` 元素中的所有 `<p>` 元素，并将样式规则应用于它们。\n\n### `:not`\n\n 是一个CSS伪类选择器，用于选择不符合指定选择器的元素。\n\n`p:not(.red)` 选择器将选择所有 `<p>` 元素，但排除了具有 `red` 类的元素\n\n## 修改属性\n\n嗯，你提到的`labelElement.for = 'myInput'`语法是无效的，因为`for`是`label`元素的保留属性，不能直接通过赋值来修改。\n\n要修改`label`元素的`for`属性，你可以使用`setAttribute()`方法，如下所示：\n\n```\nconst labelElement = document.getElementById('myLabel');\nlabelElement.setAttribute('for', 'myInput');\n```\n\n这样，`label`元素的`for`属性就会被设置为\"myInput\"，与id为\"myInput\"的表单元素关联起来。\n\n请注意，使用`setAttribute()`方法可以在任何情况下修改元素的属性。\n\n## css函数\n\nCSS中有一些内置的函数，可以用于处理值、生成动态效果或执行其他操作。以下是一些常见的CSS函数：\n\n1. `rgb()` 和 `rgba()`：用于设置颜色值，接受红、绿、蓝和透明度参数。\n\n   ````css\n   color: rgb(255, 0, 0);       /* 红色 */\n   background-color: rgba(0, 0, 255, 0.5);  /* 半透明蓝色 */\n   ```\n\n2. `hsl()` 和 `hsla()`：用于设置颜色值，接受色调、饱和度、亮度和透明度参数。\n\n   ````css\n   color: hsl(120, 100%, 50%);       /* 饱和度为100%，亮度为50%的绿色 */\n   background-color: hsla(240, 100%, 50%, 0.5);  /* 半透明的饱和度为100%，亮度为50%的蓝色 */\n   \n3. `calc()`：用于执行数学计算，可以在CSS属性中使用。\n\n   ````css\n   width: calc(100% - 20px);   /* 宽度为父元素宽度减去20像素 */\n   \n4. `var()`：用于引用CSS自定义属性的值。\n\n   ````css\n   --primary-color: blue;\n   color: var(--primary-color);   /* 使用自定义属性的值作为颜色 */\n   \n5. `url()`：用于引用外部资源，如图像、字体等。\n\n   ````css\n   background-image: url(\"path/to/image.jpg\");   /* 引用图像资源 */\n   ````\n\n### css单位\n\n1. px\n\n2. 百分比（%）：百分比单位相对于父元素的相对值。\n\n3. em：em单位是相对于元素的字体大小。如果修改的属性为`font-size`，则相对于父元素的字体大小。\n\n   ````css\n   font-size: 1.2em;   /* 相对于父元素字体大小的1.2倍 */\n   margin: 0.5em;      /* 相对于元素字体大小的0.5倍 */\n   ````\n\n4. 视窗单位（vw、vh、vmin、vmax）：视窗单位是相对于视窗大小的相对值。\n\n   ````css\n   width: 50vw;    /* 相对于视窗宽度的50% */\n   height: 25vh;   /* 相对于视窗高度的25% */\n   ````\n\n## 背景图片自适应\n```vue\n<div\n    :style=\"{\n      backgroundImage: `url(${backgroundImageUrl})`,\n      height: '100%',\n    }\"\n    class=\"bg-cover w-full absolute\"\n    id=\"container\"\n```\n\n","source":"_posts/前端/CSS.md","raw":"---\ntitle: css学习笔记\ndate: 2024-02-23 15:04:07\ntags:\n  - 前端\n  - CSS\n---\n\n# css学习笔记\n\n\n## 选择多个元素\n\n```\np,li,h1{\n\tColor:red;\n}\n```\n\n## 选择器\n\n- 通用选择器（选择全部）：`*`\n\n- 伪类\n\n- 属性选择器\n\n- a:hover {color :red;}当鼠标停在a上时\n\n## 属性\n\ncolor\n\nFont-family字体\n\nFont-size\n\nText-align向哪里对齐\n\nPadding 内边距\n\nMargin 外边距\n\n- 当只指定**一个**值时，该值会统一应用到**全部四个边**的外边距上。\n- 指定**两个**值时，第一个值会应用于**上边和下边**的外边距，第二个值应用于**左边和右边**。\n- 指定**三个**值时，第一个值应用于**上边**，第二个值应用于**右边和左边**，第三个则应用于**下边**的外边距。\n- 指定**四个**值时，依次（顺时针方向）作为**上边**，**右边**，**下边**，和**左边**的外边距。\n- auto\n\n让浏览器自己选择一个合适的外边距。有时，在一些特殊情况下，该值可以使元素居中。\n\ncolor：元素内容（通常是文本）的颜色\n\nbackground-color：元素内容和内边距底下的颜色\n\nWidth height\n\n## css变量\n\n必须以--开头\n\n定义：--aa:50px;\n\n应用：height:var(--aa);\n\n## css动画\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animations/Using_CSS_animations\n\ntransition and transform\n\n## flex布局\n\n`display:flex`\n\n### 主轴和交叉轴\n\n`flex-direction:row` 或 `row-reverse` 或 `column` 或 `column-reverse`（主轴）\n\n### 宽度\n\n#### auto\n\n足够大时相当于 width=max-content（一直不换行）\n\n当元素宽度远远超过容器宽度时，相当于 width=min-content（最大单词的距离）\n\n#### 设置宽度\n\n- `flex-basis` 基础长度\n\n- `flex-grow` 生长的权值\n\t（$\\sum_i (flexBasis_i+flexGrow_i*x)=contentWidth$ 这样求x）\n\t\n\t（0：最大就是basis）\n\t\n- 实现某元素的宽度是其他元素的宽度的5倍：flex-basis：0px\n\n  （1：容器不够时均匀缩小）\n\n- `flex-shrink` 缩小的权值（如果子元素宽度和大于了容器宽度）\n\n  （$\\sum_i (flexBasis_i-flexShrink_i*x)=contentWidth$ 这样求x）\n\n- `flex:<grow> <shrink> <basis> `\n\n  默认 `flex:0 1 auto;= flex:initial`\n\n  none = 0 0 auto\n\n### 对齐\n\n（包括内部的文字也算一个item）\n\n<img src=\"C:\\Users\\27427\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240110103504960.png\" alt=\"image-20240110103504960\" style=\"zoom: 33%;\" />\n\n#### 主轴上\n\n**align-items**（一个主轴上）\n\nstretch 所有的元素行高都一样（默认）\n\n在交叉轴起点/终点/中间对齐 align-items : flex-start flex-end center\n\nbaseline 不管字体大小，都在文字的基线来对齐\n\n**align-content**（多个主轴上）\n\n同下（justify-content）\n\n#### 交叉轴上\n\n**justify-content** : flex-start flex-end center\n\nspace-between 中间相同空隙，首尾紧靠两边\n\nspace-around 中间相同空隙，首尾与两边的空隙是中间的1/2\n\nspace-evenly 中间与首位的空隙都相同\n\n### 换行\n\nflex-wrap:wrap 保证宽度的同时换行\n\n### 顺序\n\norder\n\n无障碍人士\n\n## css过渡动画\n\n过渡不行时试试\n\n`setTimeout(() => {element.style.top = \"100px\";},1);`\n\n[discussion](https://stackoverflow.com/questions/64707211/transition-not-working-correctly-when-element-is-added-to-the-dom)\n\n## cursor属性\n\n`cursor`属性用于指定鼠标指针在元素上的样式。它可以改变鼠标指针的外观，以提供视觉反馈或指示用户可以执行的操作。\n\ndefault箭头 pointer手指，可点击 text文本\n\n## 选择器\n### 相邻兄弟选择器 ‘+’ \n\n`input[type=\"checkbox\"]:checked + label` 是一个 CSS 选择器，用于选择被选中的复选框（checkbox）后面紧邻的 `<label>` 元素。\n\n### 一般兄弟组合器 `~`\n\n后一个节点在前一个节点后面的任意位置，并且共享同一个父节点。\n\n### 后代选择器 ‘ ’（空格）\n\n要实现当某个元素被覆盖时，其子元素的样式发生改变，可以使用 CSS 中的后代选择器（descendant selector）和伪类选择器（pseudo-class selector）。\n\n首先，您可以使用后代选择器来选择被覆盖元素的子元素。后代选择器使用空格来表示元素之间的层级关系。\n\n### `>` : 直接子代选择器\n\n### `:nth-child`\n\n不是真的子元素，是这个选择器选择的第n个，比如下面选择的都是`<li>`\n\n```\n/* 选择第3个子元素 */ li:nth-child(3) \n/* 选择所有3的倍数位置的子元素 */ li:nth-child(3n) \n/* 选择所有3的倍数位置的子元素，并减去2 */ li:nth-child(3n-2)\n```\n\n### 属性选择器\n\n[link](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors)\n\n### 分组选择器 `，`\n\n`,` 是将不同的选择器组合在一起的方法，它选择所有能被列表中的任意一个选择器选中的节点。\n\n### `:where` \n\n`:where(h1, h2, h3)` 将选择 `<h1>`、`<h2>` 和 `<h3>` 元素\n`:where(section, article) p` 选择器将选择 `<section>` 和 `<article>` 元素中的所有 `<p>` 元素，并将样式规则应用于它们。\n\n### `:not`\n\n 是一个CSS伪类选择器，用于选择不符合指定选择器的元素。\n\n`p:not(.red)` 选择器将选择所有 `<p>` 元素，但排除了具有 `red` 类的元素\n\n## 修改属性\n\n嗯，你提到的`labelElement.for = 'myInput'`语法是无效的，因为`for`是`label`元素的保留属性，不能直接通过赋值来修改。\n\n要修改`label`元素的`for`属性，你可以使用`setAttribute()`方法，如下所示：\n\n```\nconst labelElement = document.getElementById('myLabel');\nlabelElement.setAttribute('for', 'myInput');\n```\n\n这样，`label`元素的`for`属性就会被设置为\"myInput\"，与id为\"myInput\"的表单元素关联起来。\n\n请注意，使用`setAttribute()`方法可以在任何情况下修改元素的属性。\n\n## css函数\n\nCSS中有一些内置的函数，可以用于处理值、生成动态效果或执行其他操作。以下是一些常见的CSS函数：\n\n1. `rgb()` 和 `rgba()`：用于设置颜色值，接受红、绿、蓝和透明度参数。\n\n   ````css\n   color: rgb(255, 0, 0);       /* 红色 */\n   background-color: rgba(0, 0, 255, 0.5);  /* 半透明蓝色 */\n   ```\n\n2. `hsl()` 和 `hsla()`：用于设置颜色值，接受色调、饱和度、亮度和透明度参数。\n\n   ````css\n   color: hsl(120, 100%, 50%);       /* 饱和度为100%，亮度为50%的绿色 */\n   background-color: hsla(240, 100%, 50%, 0.5);  /* 半透明的饱和度为100%，亮度为50%的蓝色 */\n   \n3. `calc()`：用于执行数学计算，可以在CSS属性中使用。\n\n   ````css\n   width: calc(100% - 20px);   /* 宽度为父元素宽度减去20像素 */\n   \n4. `var()`：用于引用CSS自定义属性的值。\n\n   ````css\n   --primary-color: blue;\n   color: var(--primary-color);   /* 使用自定义属性的值作为颜色 */\n   \n5. `url()`：用于引用外部资源，如图像、字体等。\n\n   ````css\n   background-image: url(\"path/to/image.jpg\");   /* 引用图像资源 */\n   ````\n\n### css单位\n\n1. px\n\n2. 百分比（%）：百分比单位相对于父元素的相对值。\n\n3. em：em单位是相对于元素的字体大小。如果修改的属性为`font-size`，则相对于父元素的字体大小。\n\n   ````css\n   font-size: 1.2em;   /* 相对于父元素字体大小的1.2倍 */\n   margin: 0.5em;      /* 相对于元素字体大小的0.5倍 */\n   ````\n\n4. 视窗单位（vw、vh、vmin、vmax）：视窗单位是相对于视窗大小的相对值。\n\n   ````css\n   width: 50vw;    /* 相对于视窗宽度的50% */\n   height: 25vh;   /* 相对于视窗高度的25% */\n   ````\n\n## 背景图片自适应\n```vue\n<div\n    :style=\"{\n      backgroundImage: `url(${backgroundImageUrl})`,\n      height: '100%',\n    }\"\n    class=\"bg-cover w-full absolute\"\n    id=\"container\"\n```\n\n","slug":"前端/CSS","published":1,"updated":"2024-12-19T08:19:36.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3v00001p4wvh529hp6b","content":"<h1 id=\"css学习笔记\"><a href=\"#css学习笔记\" class=\"headerlink\" title=\"css学习笔记\"></a>css学习笔记</h1>\r\n<h2 id=\"选择多个元素\"><a href=\"#选择多个元素\" class=\"headerlink\" title=\"选择多个元素\"></a>选择多个元素</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">p,li,h1&#123;<br>\tColor:red;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2>\r\n<ul>\r\n<li><p>通用选择器（选择全部）：<code>*</code></p></li>\r\n<li><p>伪类</p></li>\r\n<li><p>属性选择器</p></li>\r\n<li><p>a:hover {color :red;}当鼠标停在a上时</p></li>\r\n</ul>\r\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2>\r\n<p>color</p>\r\n<p>Font-family字体</p>\r\n<p>Font-size</p>\r\n<p>Text-align向哪里对齐</p>\r\n<p>Padding 内边距</p>\r\n<p>Margin 外边距</p>\r\n<ul>\r\n<li>当只指定<strong>一个</strong>值时，该值会统一应用到<strong>全部四个边</strong>的外边距上。</li>\r\n<li>指定<strong>两个</strong>值时，第一个值会应用于<strong>上边和下边</strong>的外边距，第二个值应用于<strong>左边和右边</strong>。</li>\r\n<li>指定<strong>三个</strong>值时，第一个值应用于<strong>上边</strong>，第二个值应用于<strong>右边和左边</strong>，第三个则应用于<strong>下边</strong>的外边距。</li>\r\n<li>指定<strong>四个</strong>值时，依次（顺时针方向）作为<strong>上边</strong>，<strong>右边</strong>，<strong>下边</strong>，和<strong>左边</strong>的外边距。</li>\r\n<li>auto</li>\r\n</ul>\r\n<p>让浏览器自己选择一个合适的外边距。有时，在一些特殊情况下，该值可以使元素居中。</p>\r\n<p>color：元素内容（通常是文本）的颜色</p>\r\n<p>background-color：元素内容和内边距底下的颜色</p>\r\n<p>Width height</p>\r\n<h2 id=\"css变量\"><a href=\"#css变量\" class=\"headerlink\" title=\"css变量\"></a>css变量</h2>\r\n<p>必须以--开头</p>\r\n<p>定义：--aa:50px;</p>\r\n<p>应用：height:var(--aa);</p>\r\n<h2 id=\"css动画\"><a href=\"#css动画\" class=\"headerlink\" title=\"css动画\"></a>css动画</h2>\r\n<p>https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animations/Using_CSS_animations</p>\r\n<p>transition and transform</p>\r\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2>\r\n<p><code>display:flex</code></p>\r\n<h3 id=\"主轴和交叉轴\"><a href=\"#主轴和交叉轴\" class=\"headerlink\" title=\"主轴和交叉轴\"></a>主轴和交叉轴</h3>\r\n<p><code>flex-direction:row</code> 或 <code>row-reverse</code> 或\r\n<code>column</code> 或 <code>column-reverse</code>（主轴）</p>\r\n<h3 id=\"宽度\"><a href=\"#宽度\" class=\"headerlink\" title=\"宽度\"></a>宽度</h3>\r\n<h4 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a>auto</h4>\r\n<p>足够大时相当于 width=max-content（一直不换行）</p>\r\n<p>当元素宽度远远超过容器宽度时，相当于\r\nwidth=min-content（最大单词的距离）</p>\r\n<h4 id=\"设置宽度\"><a href=\"#设置宽度\" class=\"headerlink\" title=\"设置宽度\"></a>设置宽度</h4>\r\n<ul>\r\n<li><p><code>flex-basis</code> 基础长度</p></li>\r\n<li><p><code>flex-grow</code> 生长的权值 （<span\r\nclass=\"math inline\">\\(\\sum_i\r\n(flexBasis_i+flexGrow_i*x)=contentWidth\\)</span> 这样求x）</p>\r\n<p>（0：最大就是basis）</p></li>\r\n<li><p>实现某元素的宽度是其他元素的宽度的5倍：flex-basis：0px</p>\r\n<p>（1：容器不够时均匀缩小）</p></li>\r\n<li><p><code>flex-shrink</code>\r\n缩小的权值（如果子元素宽度和大于了容器宽度）</p>\r\n<p>（<span class=\"math inline\">\\(\\sum_i\r\n(flexBasis_i-flexShrink_i*x)=contentWidth\\)</span> 这样求x）</p></li>\r\n<li><p><code>flex:&lt;grow&gt; &lt;shrink&gt; &lt;basis&gt;</code></p>\r\n<p>默认 <code>flex:0 1 auto;= flex:initial</code></p>\r\n<p>none = 0 0 auto</p></li>\r\n</ul>\r\n<h3 id=\"对齐\"><a href=\"#对齐\" class=\"headerlink\" title=\"对齐\"></a>对齐</h3>\r\n<p>（包括内部的文字也算一个item）</p>\r\n<p class='item-img' data-src='C:\\Users\\27427\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240110103504960.png'><img src=\"C:\\Users\\27427\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240110103504960.png\" alt=\"image-20240110103504960\" style=\"zoom: 33%;\" /></p>\r\n<h4 id=\"主轴上\"><a href=\"#主轴上\" class=\"headerlink\" title=\"主轴上\"></a>主轴上</h4>\r\n<p><strong>align-items</strong>（一个主轴上）</p>\r\n<p>stretch 所有的元素行高都一样（默认）</p>\r\n<p>在交叉轴起点/终点/中间对齐 align-items : flex-start flex-end\r\ncenter</p>\r\n<p>baseline 不管字体大小，都在文字的基线来对齐</p>\r\n<p><strong>align-content</strong>（多个主轴上）</p>\r\n<p>同下（justify-content）</p>\r\n<h4 id=\"交叉轴上\"><a href=\"#交叉轴上\" class=\"headerlink\" title=\"交叉轴上\"></a>交叉轴上</h4>\r\n<p><strong>justify-content</strong> : flex-start flex-end center</p>\r\n<p>space-between 中间相同空隙，首尾紧靠两边</p>\r\n<p>space-around 中间相同空隙，首尾与两边的空隙是中间的1/2</p>\r\n<p>space-evenly 中间与首位的空隙都相同</p>\r\n<h3 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h3>\r\n<p>flex-wrap:wrap 保证宽度的同时换行</p>\r\n<h3 id=\"顺序\"><a href=\"#顺序\" class=\"headerlink\" title=\"顺序\"></a>顺序</h3>\r\n<p>order</p>\r\n<p>无障碍人士</p>\r\n<h2 id=\"css过渡动画\"><a href=\"#css过渡动画\" class=\"headerlink\" title=\"css过渡动画\"></a>css过渡动画</h2>\r\n<p>过渡不行时试试</p>\r\n<p><code>setTimeout(() =&gt; &#123;element.style.top = \"100px\";&#125;,1);</code></p>\r\n<p><a\r\nhref=\"https://stackoverflow.com/questions/64707211/transition-not-working-correctly-when-element-is-added-to-the-dom\">discussion</a></p>\r\n<h2 id=\"cursor属性\"><a href=\"#cursor属性\" class=\"headerlink\" title=\"cursor属性\"></a>cursor属性</h2>\r\n<p><code>cursor</code>属性用于指定鼠标指针在元素上的样式。它可以改变鼠标指针的外观，以提供视觉反馈或指示用户可以执行的操作。</p>\r\n<p>default箭头 pointer手指，可点击 text文本</p>\r\n<h2 id=\"选择器-1\"><a href=\"#选择器-1\" class=\"headerlink\" title=\"选择器-1\"></a>选择器</h2>\r\n<h3 id=\"相邻兄弟选择器\"><a href=\"#相邻兄弟选择器\" class=\"headerlink\" title=\"相邻兄弟选择器\"></a>相邻兄弟选择器 ‘+’</h3>\r\n<p><code>input[type=\"checkbox\"]:checked + label</code> 是一个 CSS\r\n选择器，用于选择被选中的复选框（checkbox）后面紧邻的\r\n<code>&lt;label&gt;</code> 元素。</p>\r\n<h3 id=\"一般兄弟组合器\"><a href=\"#一般兄弟组合器\" class=\"headerlink\" title=\"一般兄弟组合器\"></a>一般兄弟组合器 <code>~</code></h3>\r\n<p>后一个节点在前一个节点后面的任意位置，并且共享同一个父节点。</p>\r\n<h3 id=\"后代选择器-空格\"><a href=\"#后代选择器-空格\" class=\"headerlink\" title=\"后代选择器-空格\"></a>后代选择器 ‘ ’（空格）</h3>\r\n<p>要实现当某个元素被覆盖时，其子元素的样式发生改变，可以使用 CSS\r\n中的后代选择器（descendant selector）和伪类选择器（pseudo-class\r\nselector）。</p>\r\n<p>首先，您可以使用后代选择器来选择被覆盖元素的子元素。后代选择器使用空格来表示元素之间的层级关系。</p>\r\n<h3 id=\"直接子代选择器\"><a href=\"#直接子代选择器\" class=\"headerlink\" title=\"直接子代选择器\"></a><code>&gt;</code> : 直接子代选择器</h3>\r\n<h3 id=\"nth-child\"><a href=\"#nth-child\" class=\"headerlink\" title=\"nth-child\"></a><code>:nth-child</code></h3>\r\n<p>不是真的子元素，是这个选择器选择的第n个，比如下面选择的都是<code>&lt;li&gt;</code></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">/* 选择第3个子元素 */ li:nth-child(3) <br>/* 选择所有3的倍数位置的子元素 */ li:nth-child(3n) <br>/* 选择所有3的倍数位置的子元素，并减去2 */ li:nth-child(3n-2)<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3>\r\n<p><a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors\">link</a></p>\r\n<h3 id=\"分组选择器\"><a href=\"#分组选择器\" class=\"headerlink\" title=\"分组选择器\"></a>分组选择器 <code>，</code></h3>\r\n<p><code>,</code>\r\n是将不同的选择器组合在一起的方法，它选择所有能被列表中的任意一个选择器选中的节点。</p>\r\n<h3 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a><code>:where</code></h3>\r\n<p><code>:where(h1, h2, h3)</code> 将选择\r\n<code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code> 和\r\n<code>&lt;h3&gt;</code> 元素 <code>:where(section, article) p</code>\r\n选择器将选择 <code>&lt;section&gt;</code> 和\r\n<code>&lt;article&gt;</code> 元素中的所有 <code>&lt;p&gt;</code>\r\n元素，并将样式规则应用于它们。</p>\r\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not\"></a><code>:not</code></h3>\r\n<p>是一个CSS伪类选择器，用于选择不符合指定选择器的元素。</p>\r\n<p><code>p:not(.red)</code> 选择器将选择所有 <code>&lt;p&gt;</code>\r\n元素，但排除了具有 <code>red</code> 类的元素</p>\r\n<h2 id=\"修改属性\"><a href=\"#修改属性\" class=\"headerlink\" title=\"修改属性\"></a>修改属性</h2>\r\n<p>嗯，你提到的<code>labelElement.for = 'myInput'</code>语法是无效的，因为<code>for</code>是<code>label</code>元素的保留属性，不能直接通过赋值来修改。</p>\r\n<p>要修改<code>label</code>元素的<code>for</code>属性，你可以使用<code>setAttribute()</code>方法，如下所示：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">const labelElement = document.getElementById(&#x27;myLabel&#x27;);<br>labelElement.setAttribute(&#x27;for&#x27;, &#x27;myInput&#x27;);<br></code></pre></td></tr></table></figure>\r\n<p>这样，<code>label</code>元素的<code>for</code>属性就会被设置为\"myInput\"，与id为\"myInput\"的表单元素关联起来。</p>\r\n<p>请注意，使用<code>setAttribute()</code>方法可以在任何情况下修改元素的属性。</p>\r\n<h2 id=\"css函数\"><a href=\"#css函数\" class=\"headerlink\" title=\"css函数\"></a>css函数</h2>\r\n<p>CSS中有一些内置的函数，可以用于处理值、生成动态效果或执行其他操作。以下是一些常见的CSS函数：</p>\r\n<ol type=\"1\">\r\n<li><p><code>rgb()</code> 和\r\n<code>rgba()</code>：用于设置颜色值，接受红、绿、蓝和透明度参数。</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">   <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">/* 红色 */</span><br>   <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.5</span>);  <span class=\"hljs-comment\">/* 半透明蓝色 */</span><br>   ```<br><br><span class=\"hljs-number\">2</span>. `hsl()` 和 `hsla()`：用于设置颜色值，接受色调、饱和度、亮度和透明度参数。<br><br>   ````css<br>   <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">hsl</span>(<span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">100%</span>, <span class=\"hljs-number\">50%</span>);       <span class=\"hljs-comment\">/* 饱和度为100%，亮度为50%的绿色 */</span><br>   <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">hsla</span>(<span class=\"hljs-number\">240</span>, <span class=\"hljs-number\">100%</span>, <span class=\"hljs-number\">50%</span>, <span class=\"hljs-number\">0.5</span>);  <span class=\"hljs-comment\">/* 半透明的饱和度为100%，亮度为50%的蓝色 */</span><br>   <br><span class=\"hljs-number\">3</span>. `calc()`：用于执行数学计算，可以在CSS属性中使用。<br><br>   ````css<br>   <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-built_in\">calc</span>(<span class=\"hljs-number\">100%</span> - <span class=\"hljs-number\">20px</span>);   <span class=\"hljs-comment\">/* 宽度为父元素宽度减去20像素 */</span><br>   <br><span class=\"hljs-number\">4</span>. `<span class=\"hljs-selector-tag\">var</span>()`：用于引用CSS自定义属性的值。<br><br>   ````css<br>   <span class=\"hljs-attr\">--primary-color</span>: blue;<br>   <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--primary-color);   <span class=\"hljs-comment\">/* 使用自定义属性的值作为颜色 */</span><br>   <br><span class=\"hljs-number\">5</span>. `url()`：用于引用外部资源，如图像、字体等。<br><br>   ````css<br>   <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">&quot;path/to/image.jpg&quot;</span>);   <span class=\"hljs-comment\">/* 引用图像资源 */</span><br></code></pre></td></tr></table></figure></li>\r\n</ol>\r\n<h3 id=\"css单位\"><a href=\"#css单位\" class=\"headerlink\" title=\"css单位\"></a>css单位</h3>\r\n<ol type=\"1\">\r\n<li><p>px</p></li>\r\n<li><p>百分比（%）：百分比单位相对于父元素的相对值。</p></li>\r\n<li><p>em：em单位是相对于元素的字体大小。如果修改的属性为<code>font-size</code>，则相对于父元素的字体大小。</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2em</span>;   <span class=\"hljs-comment\">/* 相对于父元素字体大小的1.2倍 */</span><br><span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0.5em</span>;      <span class=\"hljs-comment\">/* 相对于元素字体大小的0.5倍 */</span><br></code></pre></td></tr></table></figure></li>\r\n<li><p>视窗单位（vw、vh、vmin、vmax）：视窗单位是相对于视窗大小的相对值。</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">50vw</span>;    <span class=\"hljs-comment\">/* 相对于视窗宽度的50% */</span><br><span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">25vh</span>;   <span class=\"hljs-comment\">/* 相对于视窗高度的25% */</span><br></code></pre></td></tr></table></figure></li>\r\n</ol>\r\n<h2 id=\"背景图片自适应\"><a href=\"#背景图片自适应\" class=\"headerlink\" title=\"背景图片自适应\"></a>背景图片自适应</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;div<br>    :style=&quot;&#123;<br>      backgroundImage: `url($&#123;backgroundImageUrl&#125;)`,<br>      height: &#x27;100%&#x27;,<br>    &#125;&quot;<br>    class=&quot;bg-cover w-full absolute&quot;<br>    id=&quot;container&quot;<br></code></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"css学习笔记\"><a href=\"#css学习笔记\" class=\"headerlink\" title=\"css学习笔记\"></a>css学习笔记</h1>\r\n<h2 id=\"选择多个元素\"><a href=\"#选择多个元素\" class=\"headerlink\" title=\"选择多个元素\"></a>选择多个元素</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">p,li,h1&#123;<br>\tColor:red;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2>\r\n<ul>\r\n<li><p>通用选择器（选择全部）：<code>*</code></p></li>\r\n<li><p>伪类</p></li>\r\n<li><p>属性选择器</p></li>\r\n<li><p>a:hover {color :red;}当鼠标停在a上时</p></li>\r\n</ul>\r\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2>\r\n<p>color</p>\r\n<p>Font-family字体</p>\r\n<p>Font-size</p>\r\n<p>Text-align向哪里对齐</p>\r\n<p>Padding 内边距</p>\r\n<p>Margin 外边距</p>\r\n<ul>\r\n<li>当只指定<strong>一个</strong>值时，该值会统一应用到<strong>全部四个边</strong>的外边距上。</li>\r\n<li>指定<strong>两个</strong>值时，第一个值会应用于<strong>上边和下边</strong>的外边距，第二个值应用于<strong>左边和右边</strong>。</li>\r\n<li>指定<strong>三个</strong>值时，第一个值应用于<strong>上边</strong>，第二个值应用于<strong>右边和左边</strong>，第三个则应用于<strong>下边</strong>的外边距。</li>\r\n<li>指定<strong>四个</strong>值时，依次（顺时针方向）作为<strong>上边</strong>，<strong>右边</strong>，<strong>下边</strong>，和<strong>左边</strong>的外边距。</li>\r\n<li>auto</li>\r\n</ul>\r\n<p>让浏览器自己选择一个合适的外边距。有时，在一些特殊情况下，该值可以使元素居中。</p>\r\n<p>color：元素内容（通常是文本）的颜色</p>\r\n<p>background-color：元素内容和内边距底下的颜色</p>\r\n<p>Width height</p>\r\n<h2 id=\"css变量\"><a href=\"#css变量\" class=\"headerlink\" title=\"css变量\"></a>css变量</h2>\r\n<p>必须以--开头</p>\r\n<p>定义：--aa:50px;</p>\r\n<p>应用：height:var(--aa);</p>\r\n<h2 id=\"css动画\"><a href=\"#css动画\" class=\"headerlink\" title=\"css动画\"></a>css动画</h2>\r\n<p>https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animations/Using_CSS_animations</p>\r\n<p>transition and transform</p>\r\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2>\r\n<p><code>display:flex</code></p>\r\n<h3 id=\"主轴和交叉轴\"><a href=\"#主轴和交叉轴\" class=\"headerlink\" title=\"主轴和交叉轴\"></a>主轴和交叉轴</h3>\r\n<p><code>flex-direction:row</code> 或 <code>row-reverse</code> 或\r\n<code>column</code> 或 <code>column-reverse</code>（主轴）</p>\r\n<h3 id=\"宽度\"><a href=\"#宽度\" class=\"headerlink\" title=\"宽度\"></a>宽度</h3>\r\n<h4 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a>auto</h4>\r\n<p>足够大时相当于 width=max-content（一直不换行）</p>\r\n<p>当元素宽度远远超过容器宽度时，相当于\r\nwidth=min-content（最大单词的距离）</p>\r\n<h4 id=\"设置宽度\"><a href=\"#设置宽度\" class=\"headerlink\" title=\"设置宽度\"></a>设置宽度</h4>\r\n<ul>\r\n<li><p><code>flex-basis</code> 基础长度</p></li>\r\n<li><p><code>flex-grow</code> 生长的权值 （<span\r\nclass=\"math inline\">\\(\\sum_i\r\n(flexBasis_i+flexGrow_i*x)=contentWidth\\)</span> 这样求x）</p>\r\n<p>（0：最大就是basis）</p></li>\r\n<li><p>实现某元素的宽度是其他元素的宽度的5倍：flex-basis：0px</p>\r\n<p>（1：容器不够时均匀缩小）</p></li>\r\n<li><p><code>flex-shrink</code>\r\n缩小的权值（如果子元素宽度和大于了容器宽度）</p>\r\n<p>（<span class=\"math inline\">\\(\\sum_i\r\n(flexBasis_i-flexShrink_i*x)=contentWidth\\)</span> 这样求x）</p></li>\r\n<li><p><code>flex:&lt;grow&gt; &lt;shrink&gt; &lt;basis&gt;</code></p>\r\n<p>默认 <code>flex:0 1 auto;= flex:initial</code></p>\r\n<p>none = 0 0 auto</p></li>\r\n</ul>\r\n<h3 id=\"对齐\"><a href=\"#对齐\" class=\"headerlink\" title=\"对齐\"></a>对齐</h3>\r\n<p>（包括内部的文字也算一个item）</p>\r\n<p><img src=\"C:\\Users\\27427\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240110103504960.png\" alt=\"image-20240110103504960\" style=\"zoom: 33%;\" /></p>\r\n<h4 id=\"主轴上\"><a href=\"#主轴上\" class=\"headerlink\" title=\"主轴上\"></a>主轴上</h4>\r\n<p><strong>align-items</strong>（一个主轴上）</p>\r\n<p>stretch 所有的元素行高都一样（默认）</p>\r\n<p>在交叉轴起点/终点/中间对齐 align-items : flex-start flex-end\r\ncenter</p>\r\n<p>baseline 不管字体大小，都在文字的基线来对齐</p>\r\n<p><strong>align-content</strong>（多个主轴上）</p>\r\n<p>同下（justify-content）</p>\r\n<h4 id=\"交叉轴上\"><a href=\"#交叉轴上\" class=\"headerlink\" title=\"交叉轴上\"></a>交叉轴上</h4>\r\n<p><strong>justify-content</strong> : flex-start flex-end center</p>\r\n<p>space-between 中间相同空隙，首尾紧靠两边</p>\r\n<p>space-around 中间相同空隙，首尾与两边的空隙是中间的1/2</p>\r\n<p>space-evenly 中间与首位的空隙都相同</p>\r\n<h3 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h3>\r\n<p>flex-wrap:wrap 保证宽度的同时换行</p>\r\n<h3 id=\"顺序\"><a href=\"#顺序\" class=\"headerlink\" title=\"顺序\"></a>顺序</h3>\r\n<p>order</p>\r\n<p>无障碍人士</p>\r\n<h2 id=\"css过渡动画\"><a href=\"#css过渡动画\" class=\"headerlink\" title=\"css过渡动画\"></a>css过渡动画</h2>\r\n<p>过渡不行时试试</p>\r\n<p><code>setTimeout(() =&gt; &#123;element.style.top = \"100px\";&#125;,1);</code></p>\r\n<p><a\r\nhref=\"https://stackoverflow.com/questions/64707211/transition-not-working-correctly-when-element-is-added-to-the-dom\">discussion</a></p>\r\n<h2 id=\"cursor属性\"><a href=\"#cursor属性\" class=\"headerlink\" title=\"cursor属性\"></a>cursor属性</h2>\r\n<p><code>cursor</code>属性用于指定鼠标指针在元素上的样式。它可以改变鼠标指针的外观，以提供视觉反馈或指示用户可以执行的操作。</p>\r\n<p>default箭头 pointer手指，可点击 text文本</p>\r\n<h2 id=\"选择器-1\"><a href=\"#选择器-1\" class=\"headerlink\" title=\"选择器-1\"></a>选择器</h2>\r\n<h3 id=\"相邻兄弟选择器\"><a href=\"#相邻兄弟选择器\" class=\"headerlink\" title=\"相邻兄弟选择器\"></a>相邻兄弟选择器 ‘+’</h3>\r\n<p><code>input[type=\"checkbox\"]:checked + label</code> 是一个 CSS\r\n选择器，用于选择被选中的复选框（checkbox）后面紧邻的\r\n<code>&lt;label&gt;</code> 元素。</p>\r\n<h3 id=\"一般兄弟组合器\"><a href=\"#一般兄弟组合器\" class=\"headerlink\" title=\"一般兄弟组合器\"></a>一般兄弟组合器 <code>~</code></h3>\r\n<p>后一个节点在前一个节点后面的任意位置，并且共享同一个父节点。</p>\r\n<h3 id=\"后代选择器-空格\"><a href=\"#后代选择器-空格\" class=\"headerlink\" title=\"后代选择器-空格\"></a>后代选择器 ‘ ’（空格）</h3>\r\n<p>要实现当某个元素被覆盖时，其子元素的样式发生改变，可以使用 CSS\r\n中的后代选择器（descendant selector）和伪类选择器（pseudo-class\r\nselector）。</p>\r\n<p>首先，您可以使用后代选择器来选择被覆盖元素的子元素。后代选择器使用空格来表示元素之间的层级关系。</p>\r\n<h3 id=\"直接子代选择器\"><a href=\"#直接子代选择器\" class=\"headerlink\" title=\"直接子代选择器\"></a><code>&gt;</code> : 直接子代选择器</h3>\r\n<h3 id=\"nth-child\"><a href=\"#nth-child\" class=\"headerlink\" title=\"nth-child\"></a><code>:nth-child</code></h3>\r\n<p>不是真的子元素，是这个选择器选择的第n个，比如下面选择的都是<code>&lt;li&gt;</code></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">/* 选择第3个子元素 */ li:nth-child(3) <br>/* 选择所有3的倍数位置的子元素 */ li:nth-child(3n) <br>/* 选择所有3的倍数位置的子元素，并减去2 */ li:nth-child(3n-2)<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3>\r\n<p><a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors\">link</a></p>\r\n<h3 id=\"分组选择器\"><a href=\"#分组选择器\" class=\"headerlink\" title=\"分组选择器\"></a>分组选择器 <code>，</code></h3>\r\n<p><code>,</code>\r\n是将不同的选择器组合在一起的方法，它选择所有能被列表中的任意一个选择器选中的节点。</p>\r\n<h3 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a><code>:where</code></h3>\r\n<p><code>:where(h1, h2, h3)</code> 将选择\r\n<code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code> 和\r\n<code>&lt;h3&gt;</code> 元素 <code>:where(section, article) p</code>\r\n选择器将选择 <code>&lt;section&gt;</code> 和\r\n<code>&lt;article&gt;</code> 元素中的所有 <code>&lt;p&gt;</code>\r\n元素，并将样式规则应用于它们。</p>\r\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not\"></a><code>:not</code></h3>\r\n<p>是一个CSS伪类选择器，用于选择不符合指定选择器的元素。</p>\r\n<p><code>p:not(.red)</code> 选择器将选择所有 <code>&lt;p&gt;</code>\r\n元素，但排除了具有 <code>red</code> 类的元素</p>\r\n<h2 id=\"修改属性\"><a href=\"#修改属性\" class=\"headerlink\" title=\"修改属性\"></a>修改属性</h2>\r\n<p>嗯，你提到的<code>labelElement.for = 'myInput'</code>语法是无效的，因为<code>for</code>是<code>label</code>元素的保留属性，不能直接通过赋值来修改。</p>\r\n<p>要修改<code>label</code>元素的<code>for</code>属性，你可以使用<code>setAttribute()</code>方法，如下所示：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">const labelElement = document.getElementById(&#x27;myLabel&#x27;);<br>labelElement.setAttribute(&#x27;for&#x27;, &#x27;myInput&#x27;);<br></code></pre></td></tr></table></figure>\r\n<p>这样，<code>label</code>元素的<code>for</code>属性就会被设置为\"myInput\"，与id为\"myInput\"的表单元素关联起来。</p>\r\n<p>请注意，使用<code>setAttribute()</code>方法可以在任何情况下修改元素的属性。</p>\r\n<h2 id=\"css函数\"><a href=\"#css函数\" class=\"headerlink\" title=\"css函数\"></a>css函数</h2>\r\n<p>CSS中有一些内置的函数，可以用于处理值、生成动态效果或执行其他操作。以下是一些常见的CSS函数：</p>\r\n<ol type=\"1\">\r\n<li><p><code>rgb()</code> 和\r\n<code>rgba()</code>：用于设置颜色值，接受红、绿、蓝和透明度参数。</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">   <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">/* 红色 */</span><br>   <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.5</span>);  <span class=\"hljs-comment\">/* 半透明蓝色 */</span><br>   ```<br><br><span class=\"hljs-number\">2</span>. `hsl()` 和 `hsla()`：用于设置颜色值，接受色调、饱和度、亮度和透明度参数。<br><br>   ````css<br>   <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">hsl</span>(<span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">100%</span>, <span class=\"hljs-number\">50%</span>);       <span class=\"hljs-comment\">/* 饱和度为100%，亮度为50%的绿色 */</span><br>   <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">hsla</span>(<span class=\"hljs-number\">240</span>, <span class=\"hljs-number\">100%</span>, <span class=\"hljs-number\">50%</span>, <span class=\"hljs-number\">0.5</span>);  <span class=\"hljs-comment\">/* 半透明的饱和度为100%，亮度为50%的蓝色 */</span><br>   <br><span class=\"hljs-number\">3</span>. `calc()`：用于执行数学计算，可以在CSS属性中使用。<br><br>   ````css<br>   <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-built_in\">calc</span>(<span class=\"hljs-number\">100%</span> - <span class=\"hljs-number\">20px</span>);   <span class=\"hljs-comment\">/* 宽度为父元素宽度减去20像素 */</span><br>   <br><span class=\"hljs-number\">4</span>. `<span class=\"hljs-selector-tag\">var</span>()`：用于引用CSS自定义属性的值。<br><br>   ````css<br>   <span class=\"hljs-attr\">--primary-color</span>: blue;<br>   <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--primary-color);   <span class=\"hljs-comment\">/* 使用自定义属性的值作为颜色 */</span><br>   <br><span class=\"hljs-number\">5</span>. `url()`：用于引用外部资源，如图像、字体等。<br><br>   ````css<br>   <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">&quot;path/to/image.jpg&quot;</span>);   <span class=\"hljs-comment\">/* 引用图像资源 */</span><br></code></pre></td></tr></table></figure></li>\r\n</ol>\r\n<h3 id=\"css单位\"><a href=\"#css单位\" class=\"headerlink\" title=\"css单位\"></a>css单位</h3>\r\n<ol type=\"1\">\r\n<li><p>px</p></li>\r\n<li><p>百分比（%）：百分比单位相对于父元素的相对值。</p></li>\r\n<li><p>em：em单位是相对于元素的字体大小。如果修改的属性为<code>font-size</code>，则相对于父元素的字体大小。</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2em</span>;   <span class=\"hljs-comment\">/* 相对于父元素字体大小的1.2倍 */</span><br><span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0.5em</span>;      <span class=\"hljs-comment\">/* 相对于元素字体大小的0.5倍 */</span><br></code></pre></td></tr></table></figure></li>\r\n<li><p>视窗单位（vw、vh、vmin、vmax）：视窗单位是相对于视窗大小的相对值。</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">50vw</span>;    <span class=\"hljs-comment\">/* 相对于视窗宽度的50% */</span><br><span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">25vh</span>;   <span class=\"hljs-comment\">/* 相对于视窗高度的25% */</span><br></code></pre></td></tr></table></figure></li>\r\n</ol>\r\n<h2 id=\"背景图片自适应\"><a href=\"#背景图片自适应\" class=\"headerlink\" title=\"背景图片自适应\"></a>背景图片自适应</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;div<br>    :style=&quot;&#123;<br>      backgroundImage: `url($&#123;backgroundImageUrl&#125;)`,<br>      height: &#x27;100%&#x27;,<br>    &#125;&quot;<br>    class=&quot;bg-cover w-full absolute&quot;<br>    id=&quot;container&quot;<br></code></pre></td></tr></table></figure>\r\n"},{"title":"Node.js","date":"2024-02-22T16:00:00.000Z","_content":"# node.js\n\n## 基本操作\n\nnode aa.js 运行\n\n第一行总是写上`'use strict';`是因为我们总是以严格模式运行JavaScript代码，避免各种潜在陷阱。\n\n此外，文件名只能是英文字母、数字和下划线的组合。\n\n看到只有`>`是在Node交互式环境下\n\n两次ctrl+c退出node环境\n\n`node --use_strict calc.js ` 开启严格模式\n\n模块：完成一种功能的单独一个文件\n\n`module.exports = greet;` 把greet函数作为入口（hello.js文件中）\n\n `var aa = require(\"./hello\");`  引入的hello模块作为变量保存在aa变量中，aa就是hello中的greet\n\n位于同一个目录，所以我们用了当前目录`.` 。\n\n## global \n\n唯一的全局变量\n\n## process\n\n- 如果我们想要在下一次事件响应中执行代码，可以调用`process.nextTick()`\n\n- 如果我们响应`exit`事件，就可以在程序即将退出时执行某个回调函数：\n\n  ```js\n  // 程序即将退出时的回调函数:\n  process.on('exit', function (code) {\n      console.log('about to exit with code: ' + code);\n  });\n  ```\n\n## fs模块 \n\n读写文件\n\n### 异步读文件\n\n```js\nvar fs = require('fs');\n\nfs.readFile('sample.txt', 'utf-8', function (err, data) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(data);\n    }\n});\n```\n\n但正常读取时err=null\n\n- 文本文档 data是String\n\n- 二进制文件 data是Buffer 一个包含零个或任意个字节的数组\n\n  ```\n  let a = new Buffer('END.', 'utf-8');//string to buffer by utf-8\n  ```\n\n\n### 同步读文件\n\n```\nvar data = fs.readFileSync('sample.txt', 'utf-8');\n```\n\n### 异步写文件\n\n```js\nvar data = 'Hello, Node.js';\nfs.writeFile('output.txt', data, function (err) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log('ok.');\n    }\n});\n```\n### 文件信息\n```js\nfs.stat('sample.txt', function (err, stat) {\n    if (err) {\n        console.log(err);\n    } else {\n        // 是否是文件:\n        console.log('isFile: ' + stat.isFile());\n        // 是否是目录:\n        console.log('isDirectory: ' + stat.isDirectory());\n        if (stat.isFile()) {\n            // 文件大小:\n            console.log('size: ' + stat.size);\n            // 创建时间, Date对象:\n            console.log('birth time: ' + stat.birthtime);\n            // 修改时间, Date对象:\n            console.log('modified time: ' + stat.mtime);\n        }\n    }\n});\n```\n\n## stream\n\n支持“流”这种数据结构，还是在fs模块中的\n\n### 读\n\n`var rs = fs.createReadStream('sample.txt', 'utf-8');`\n\n`data`事件表示流的数据已经可以读取了，`end`事件表示这个流已经到末尾了，没有数据可以读取了，`error`事件表示出错了。\n\n要注意，`data`事件可能会有多次，每次传递的`chunk`是流的一部分数据。\n\n### 写\n\n`createWriteStream`\n\n要以流的形式写入文件，只需要不断调用`write()`方法，最后以`end()`结束：\n\n### pipe()\n\n把两个文件流串起来\n\n```\nvar rs = fs.createReadStream('sample.txt');\nvar ws = fs.createWriteStream('copied.txt');\nrs.pipe(ws);//cope the file\n//rs.pipe(ws, { end: false });//not close ws stream, can still write\n```\n\n## http模块\n\nrequest对象：HTTP请求\n\nresponse对象：HTTP响应\n\n由于`response`对象本身是一个`Writable Stream`\n\n## npm\n\nCLI(只允许键盘输入) & GUI(图形化界面)\n\n### 起始\n\n`cd xxx`\n\n`npm init` 生成package.json档案\n\n### 设置代理\n\n `npm config set proxy http://127.0.0.1:翻牆端口`\n\n代理服务器 IP 地址和端口号查找\n\n1. 在开始搜索“Internet 选项”。\n2. 选择“连接”标签页。\n3. 点击“局域网设置”按钮。\n4. 在弹出的窗口中，您可以看到代理服务器 IP 地址和端口号。\n\n### 锁定文件\npnpm-lock.yaml 和 package-lock.json 都是项目中的锁定文件，它们的作用是锁定项目所依赖的包的版本。\n\npnpm-lock.yaml 是由 pnpm（一个 JavaScript 包管理工具）生成的锁定文件，它记录了所有项目依赖的包的版本。\n\npackage-lock.json 是 NPM（Node Package Manager，一个 JavaScript 包管理工具）生成的锁定文件，它也记录了所有项目依赖的包的版本。\n\n## install\n\nnpm install lodash --save \n\n设置与项目相依，会存在package.json中\n\n卸载 uninstall\n\nnpm ls查看已安装\n\nnpm update lodash\n\n### 版本控制\n\n版本号有三位数字组成（譬如：1.2.3），`1` 表示主版本、`1.2`表示次要版本、`1.2.3` 表示补丁版本。\n\n`^`  表示用于确定主版本号、 `~`  用于确定主版本号 + 次要版本号；\n\n- `^1` ：等同于 `1.x.x` ,  以`1`开头的所有版本；\n- `~2.2` ：等同于 `2.2.x` ，以  `2.2`  开头的所有版本。\n- `~2.2.1` ：以  `2.2`  开头，且最后一位 补丁号≥1 的所有版本，即 `2.2.1`  与 `2.2.9` 之间版本，包括头尾。\n\n","source":"_posts/前端/Node.js.md","raw":"---\ntitle: Node.js\ndate: 2024-02-23 00:00:00\ntags:\n  - 前端\n  - Nodejs\n---\n# node.js\n\n## 基本操作\n\nnode aa.js 运行\n\n第一行总是写上`'use strict';`是因为我们总是以严格模式运行JavaScript代码，避免各种潜在陷阱。\n\n此外，文件名只能是英文字母、数字和下划线的组合。\n\n看到只有`>`是在Node交互式环境下\n\n两次ctrl+c退出node环境\n\n`node --use_strict calc.js ` 开启严格模式\n\n模块：完成一种功能的单独一个文件\n\n`module.exports = greet;` 把greet函数作为入口（hello.js文件中）\n\n `var aa = require(\"./hello\");`  引入的hello模块作为变量保存在aa变量中，aa就是hello中的greet\n\n位于同一个目录，所以我们用了当前目录`.` 。\n\n## global \n\n唯一的全局变量\n\n## process\n\n- 如果我们想要在下一次事件响应中执行代码，可以调用`process.nextTick()`\n\n- 如果我们响应`exit`事件，就可以在程序即将退出时执行某个回调函数：\n\n  ```js\n  // 程序即将退出时的回调函数:\n  process.on('exit', function (code) {\n      console.log('about to exit with code: ' + code);\n  });\n  ```\n\n## fs模块 \n\n读写文件\n\n### 异步读文件\n\n```js\nvar fs = require('fs');\n\nfs.readFile('sample.txt', 'utf-8', function (err, data) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log(data);\n    }\n});\n```\n\n但正常读取时err=null\n\n- 文本文档 data是String\n\n- 二进制文件 data是Buffer 一个包含零个或任意个字节的数组\n\n  ```\n  let a = new Buffer('END.', 'utf-8');//string to buffer by utf-8\n  ```\n\n\n### 同步读文件\n\n```\nvar data = fs.readFileSync('sample.txt', 'utf-8');\n```\n\n### 异步写文件\n\n```js\nvar data = 'Hello, Node.js';\nfs.writeFile('output.txt', data, function (err) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log('ok.');\n    }\n});\n```\n### 文件信息\n```js\nfs.stat('sample.txt', function (err, stat) {\n    if (err) {\n        console.log(err);\n    } else {\n        // 是否是文件:\n        console.log('isFile: ' + stat.isFile());\n        // 是否是目录:\n        console.log('isDirectory: ' + stat.isDirectory());\n        if (stat.isFile()) {\n            // 文件大小:\n            console.log('size: ' + stat.size);\n            // 创建时间, Date对象:\n            console.log('birth time: ' + stat.birthtime);\n            // 修改时间, Date对象:\n            console.log('modified time: ' + stat.mtime);\n        }\n    }\n});\n```\n\n## stream\n\n支持“流”这种数据结构，还是在fs模块中的\n\n### 读\n\n`var rs = fs.createReadStream('sample.txt', 'utf-8');`\n\n`data`事件表示流的数据已经可以读取了，`end`事件表示这个流已经到末尾了，没有数据可以读取了，`error`事件表示出错了。\n\n要注意，`data`事件可能会有多次，每次传递的`chunk`是流的一部分数据。\n\n### 写\n\n`createWriteStream`\n\n要以流的形式写入文件，只需要不断调用`write()`方法，最后以`end()`结束：\n\n### pipe()\n\n把两个文件流串起来\n\n```\nvar rs = fs.createReadStream('sample.txt');\nvar ws = fs.createWriteStream('copied.txt');\nrs.pipe(ws);//cope the file\n//rs.pipe(ws, { end: false });//not close ws stream, can still write\n```\n\n## http模块\n\nrequest对象：HTTP请求\n\nresponse对象：HTTP响应\n\n由于`response`对象本身是一个`Writable Stream`\n\n## npm\n\nCLI(只允许键盘输入) & GUI(图形化界面)\n\n### 起始\n\n`cd xxx`\n\n`npm init` 生成package.json档案\n\n### 设置代理\n\n `npm config set proxy http://127.0.0.1:翻牆端口`\n\n代理服务器 IP 地址和端口号查找\n\n1. 在开始搜索“Internet 选项”。\n2. 选择“连接”标签页。\n3. 点击“局域网设置”按钮。\n4. 在弹出的窗口中，您可以看到代理服务器 IP 地址和端口号。\n\n### 锁定文件\npnpm-lock.yaml 和 package-lock.json 都是项目中的锁定文件，它们的作用是锁定项目所依赖的包的版本。\n\npnpm-lock.yaml 是由 pnpm（一个 JavaScript 包管理工具）生成的锁定文件，它记录了所有项目依赖的包的版本。\n\npackage-lock.json 是 NPM（Node Package Manager，一个 JavaScript 包管理工具）生成的锁定文件，它也记录了所有项目依赖的包的版本。\n\n## install\n\nnpm install lodash --save \n\n设置与项目相依，会存在package.json中\n\n卸载 uninstall\n\nnpm ls查看已安装\n\nnpm update lodash\n\n### 版本控制\n\n版本号有三位数字组成（譬如：1.2.3），`1` 表示主版本、`1.2`表示次要版本、`1.2.3` 表示补丁版本。\n\n`^`  表示用于确定主版本号、 `~`  用于确定主版本号 + 次要版本号；\n\n- `^1` ：等同于 `1.x.x` ,  以`1`开头的所有版本；\n- `~2.2` ：等同于 `2.2.x` ，以  `2.2`  开头的所有版本。\n- `~2.2.1` ：以  `2.2`  开头，且最后一位 补丁号≥1 的所有版本，即 `2.2.1`  与 `2.2.9` 之间版本，包括头尾。\n\n","slug":"前端/Node.js","published":1,"updated":"2024-03-05T08:11:14.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3v90002p4wv261o3r19","content":"<h1 id=\"node.js\"><a href=\"#node.js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h1>\r\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2>\r\n<p>node aa.js 运行</p>\r\n<p>第一行总是写上<code>'use strict';</code>是因为我们总是以严格模式运行JavaScript代码，避免各种潜在陷阱。</p>\r\n<p>此外，文件名只能是英文字母、数字和下划线的组合。</p>\r\n<p>看到只有<code>&gt;</code>是在Node交互式环境下</p>\r\n<p>两次ctrl+c退出node环境</p>\r\n<p><code>node --use_strict calc.js</code> 开启严格模式</p>\r\n<p>模块：完成一种功能的单独一个文件</p>\r\n<p><code>module.exports = greet;</code>\r\n把greet函数作为入口（hello.js文件中）</p>\r\n<p><code>var aa = require(\"./hello\");</code>\r\n引入的hello模块作为变量保存在aa变量中，aa就是hello中的greet</p>\r\n<p>位于同一个目录，所以我们用了当前目录<code>.</code> 。</p>\r\n<h2 id=\"global\"><a href=\"#global\" class=\"headerlink\" title=\"global\"></a>global</h2>\r\n<p>唯一的全局变量</p>\r\n<h2 id=\"process\"><a href=\"#process\" class=\"headerlink\" title=\"process\"></a>process</h2>\r\n<ul>\r\n<li><p>如果我们想要在下一次事件响应中执行代码，可以调用<code>process.nextTick()</code></p></li>\r\n<li><p>如果我们响应<code>exit</code>事件，就可以在程序即将退出时执行某个回调函数：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 程序即将退出时的回调函数:</span><br>process.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;exit&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">code</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;about to exit with code: &#x27;</span> + code);<br>&#125;);<br></code></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h2 id=\"fs模块\"><a href=\"#fs模块\" class=\"headerlink\" title=\"fs模块\"></a>fs模块</h2>\r\n<p>读写文件</p>\r\n<h3 id=\"异步读文件\"><a href=\"#异步读文件\" class=\"headerlink\" title=\"异步读文件\"></a>异步读文件</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);<br><br>fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;sample.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (err) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\r\n<p>但正常读取时err=null</p>\r\n<ul>\r\n<li><p>文本文档 data是String</p></li>\r\n<li><p>二进制文件 data是Buffer 一个包含零个或任意个字节的数组</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">let a = new Buffer(&#x27;END.&#x27;, &#x27;utf-8&#x27;);//string to buffer by utf-8<br></code></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h3 id=\"同步读文件\"><a href=\"#同步读文件\" class=\"headerlink\" title=\"同步读文件\"></a>同步读文件</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">var data = fs.readFileSync(&#x27;sample.txt&#x27;, &#x27;utf-8&#x27;);<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"异步写文件\"><a href=\"#异步写文件\" class=\"headerlink\" title=\"异步写文件\"></a>异步写文件</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-string\">&#x27;Hello, Node.js&#x27;</span>;<br>fs.<span class=\"hljs-title function_\">writeFile</span>(<span class=\"hljs-string\">&#x27;output.txt&#x27;</span>, data, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (err) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;ok.&#x27;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"文件信息\"><a href=\"#文件信息\" class=\"headerlink\" title=\"文件信息\"></a>文件信息</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.<span class=\"hljs-title function_\">stat</span>(<span class=\"hljs-string\">&#x27;sample.txt&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, stat</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (err) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 是否是文件:</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;isFile: &#x27;</span> + stat.<span class=\"hljs-title function_\">isFile</span>());<br>        <span class=\"hljs-comment\">// 是否是目录:</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;isDirectory: &#x27;</span> + stat.<span class=\"hljs-title function_\">isDirectory</span>());<br>        <span class=\"hljs-keyword\">if</span> (stat.<span class=\"hljs-title function_\">isFile</span>()) &#123;<br>            <span class=\"hljs-comment\">// 文件大小:</span><br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;size: &#x27;</span> + stat.<span class=\"hljs-property\">size</span>);<br>            <span class=\"hljs-comment\">// 创建时间, Date对象:</span><br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;birth time: &#x27;</span> + stat.<span class=\"hljs-property\">birthtime</span>);<br>            <span class=\"hljs-comment\">// 修改时间, Date对象:</span><br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;modified time: &#x27;</span> + stat.<span class=\"hljs-property\">mtime</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h2>\r\n<p>支持“流”这种数据结构，还是在fs模块中的</p>\r\n<h3 id=\"读\"><a href=\"#读\" class=\"headerlink\" title=\"读\"></a>读</h3>\r\n<p><code>var rs = fs.createReadStream('sample.txt', 'utf-8');</code></p>\r\n<p><code>data</code>事件表示流的数据已经可以读取了，<code>end</code>事件表示这个流已经到末尾了，没有数据可以读取了，<code>error</code>事件表示出错了。</p>\r\n<p>要注意，<code>data</code>事件可能会有多次，每次传递的<code>chunk</code>是流的一部分数据。</p>\r\n<h3 id=\"写\"><a href=\"#写\" class=\"headerlink\" title=\"写\"></a>写</h3>\r\n<p><code>createWriteStream</code></p>\r\n<p>要以流的形式写入文件，只需要不断调用<code>write()</code>方法，最后以<code>end()</code>结束：</p>\r\n<h3 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe\"></a>pipe()</h3>\r\n<p>把两个文件流串起来</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">var rs = fs.createReadStream(&#x27;sample.txt&#x27;);<br>var ws = fs.createWriteStream(&#x27;copied.txt&#x27;);<br>rs.pipe(ws);//cope the file<br>//rs.pipe(ws, &#123; end: false &#125;);//not close ws stream, can still write<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"http模块\"><a href=\"#http模块\" class=\"headerlink\" title=\"http模块\"></a>http模块</h2>\r\n<p>request对象：HTTP请求</p>\r\n<p>response对象：HTTP响应</p>\r\n<p>由于<code>response</code>对象本身是一个<code>Writable Stream</code></p>\r\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2>\r\n<p>CLI(只允许键盘输入) &amp; GUI(图形化界面)</p>\r\n<h3 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h3>\r\n<p><code>cd xxx</code></p>\r\n<p><code>npm init</code> 生成package.json档案</p>\r\n<h3 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h3>\r\n<p><code>npm config set proxy http://127.0.0.1:翻牆端口</code></p>\r\n<p>代理服务器 IP 地址和端口号查找</p>\r\n<ol type=\"1\">\r\n<li>在开始搜索“Internet 选项”。</li>\r\n<li>选择“连接”标签页。</li>\r\n<li>点击“局域网设置”按钮。</li>\r\n<li>在弹出的窗口中，您可以看到代理服务器 IP 地址和端口号。</li>\r\n</ol>\r\n<h3 id=\"锁定文件\"><a href=\"#锁定文件\" class=\"headerlink\" title=\"锁定文件\"></a>锁定文件</h3>\r\n<p>pnpm-lock.yaml 和 package-lock.json\r\n都是项目中的锁定文件，它们的作用是锁定项目所依赖的包的版本。</p>\r\n<p>pnpm-lock.yaml 是由 pnpm（一个 JavaScript\r\n包管理工具）生成的锁定文件，它记录了所有项目依赖的包的版本。</p>\r\n<p>package-lock.json 是 NPM（Node Package Manager，一个 JavaScript\r\n包管理工具）生成的锁定文件，它也记录了所有项目依赖的包的版本。</p>\r\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2>\r\n<p>npm install lodash --save</p>\r\n<p>设置与项目相依，会存在package.json中</p>\r\n<p>卸载 uninstall</p>\r\n<p>npm ls查看已安装</p>\r\n<p>npm update lodash</p>\r\n<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3>\r\n<p>版本号有三位数字组成（譬如：1.2.3），<code>1</code>\r\n表示主版本、<code>1.2</code>表示次要版本、<code>1.2.3</code>\r\n表示补丁版本。</p>\r\n<p><code>^</code> 表示用于确定主版本号、 <code>~</code> 用于确定主版本号\r\n+ 次要版本号；</p>\r\n<ul>\r\n<li><code>^1</code> ：等同于 <code>1.x.x</code> ,\r\n以<code>1</code>开头的所有版本；</li>\r\n<li><code>~2.2</code> ：等同于 <code>2.2.x</code> ，以 <code>2.2</code>\r\n开头的所有版本。</li>\r\n<li><code>~2.2.1</code> ：以 <code>2.2</code> 开头，且最后一位 补丁号≥1\r\n的所有版本，即 <code>2.2.1</code> 与 <code>2.2.9</code>\r\n之间版本，包括头尾。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"node.js\"><a href=\"#node.js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h1>\r\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2>\r\n<p>node aa.js 运行</p>\r\n<p>第一行总是写上<code>'use strict';</code>是因为我们总是以严格模式运行JavaScript代码，避免各种潜在陷阱。</p>\r\n<p>此外，文件名只能是英文字母、数字和下划线的组合。</p>\r\n<p>看到只有<code>&gt;</code>是在Node交互式环境下</p>\r\n<p>两次ctrl+c退出node环境</p>\r\n<p><code>node --use_strict calc.js</code> 开启严格模式</p>\r\n<p>模块：完成一种功能的单独一个文件</p>\r\n<p><code>module.exports = greet;</code>\r\n把greet函数作为入口（hello.js文件中）</p>\r\n<p><code>var aa = require(\"./hello\");</code>\r\n引入的hello模块作为变量保存在aa变量中，aa就是hello中的greet</p>\r\n<p>位于同一个目录，所以我们用了当前目录<code>.</code> 。</p>\r\n<h2 id=\"global\"><a href=\"#global\" class=\"headerlink\" title=\"global\"></a>global</h2>\r\n<p>唯一的全局变量</p>\r\n<h2 id=\"process\"><a href=\"#process\" class=\"headerlink\" title=\"process\"></a>process</h2>\r\n<ul>\r\n<li><p>如果我们想要在下一次事件响应中执行代码，可以调用<code>process.nextTick()</code></p></li>\r\n<li><p>如果我们响应<code>exit</code>事件，就可以在程序即将退出时执行某个回调函数：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 程序即将退出时的回调函数:</span><br>process.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;exit&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">code</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;about to exit with code: &#x27;</span> + code);<br>&#125;);<br></code></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h2 id=\"fs模块\"><a href=\"#fs模块\" class=\"headerlink\" title=\"fs模块\"></a>fs模块</h2>\r\n<p>读写文件</p>\r\n<h3 id=\"异步读文件\"><a href=\"#异步读文件\" class=\"headerlink\" title=\"异步读文件\"></a>异步读文件</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);<br><br>fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&#x27;sample.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (err) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\r\n<p>但正常读取时err=null</p>\r\n<ul>\r\n<li><p>文本文档 data是String</p></li>\r\n<li><p>二进制文件 data是Buffer 一个包含零个或任意个字节的数组</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">let a = new Buffer(&#x27;END.&#x27;, &#x27;utf-8&#x27;);//string to buffer by utf-8<br></code></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h3 id=\"同步读文件\"><a href=\"#同步读文件\" class=\"headerlink\" title=\"同步读文件\"></a>同步读文件</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">var data = fs.readFileSync(&#x27;sample.txt&#x27;, &#x27;utf-8&#x27;);<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"异步写文件\"><a href=\"#异步写文件\" class=\"headerlink\" title=\"异步写文件\"></a>异步写文件</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-string\">&#x27;Hello, Node.js&#x27;</span>;<br>fs.<span class=\"hljs-title function_\">writeFile</span>(<span class=\"hljs-string\">&#x27;output.txt&#x27;</span>, data, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (err) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;ok.&#x27;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"文件信息\"><a href=\"#文件信息\" class=\"headerlink\" title=\"文件信息\"></a>文件信息</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fs.<span class=\"hljs-title function_\">stat</span>(<span class=\"hljs-string\">&#x27;sample.txt&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, stat</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (err) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 是否是文件:</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;isFile: &#x27;</span> + stat.<span class=\"hljs-title function_\">isFile</span>());<br>        <span class=\"hljs-comment\">// 是否是目录:</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;isDirectory: &#x27;</span> + stat.<span class=\"hljs-title function_\">isDirectory</span>());<br>        <span class=\"hljs-keyword\">if</span> (stat.<span class=\"hljs-title function_\">isFile</span>()) &#123;<br>            <span class=\"hljs-comment\">// 文件大小:</span><br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;size: &#x27;</span> + stat.<span class=\"hljs-property\">size</span>);<br>            <span class=\"hljs-comment\">// 创建时间, Date对象:</span><br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;birth time: &#x27;</span> + stat.<span class=\"hljs-property\">birthtime</span>);<br>            <span class=\"hljs-comment\">// 修改时间, Date对象:</span><br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;modified time: &#x27;</span> + stat.<span class=\"hljs-property\">mtime</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h2>\r\n<p>支持“流”这种数据结构，还是在fs模块中的</p>\r\n<h3 id=\"读\"><a href=\"#读\" class=\"headerlink\" title=\"读\"></a>读</h3>\r\n<p><code>var rs = fs.createReadStream('sample.txt', 'utf-8');</code></p>\r\n<p><code>data</code>事件表示流的数据已经可以读取了，<code>end</code>事件表示这个流已经到末尾了，没有数据可以读取了，<code>error</code>事件表示出错了。</p>\r\n<p>要注意，<code>data</code>事件可能会有多次，每次传递的<code>chunk</code>是流的一部分数据。</p>\r\n<h3 id=\"写\"><a href=\"#写\" class=\"headerlink\" title=\"写\"></a>写</h3>\r\n<p><code>createWriteStream</code></p>\r\n<p>要以流的形式写入文件，只需要不断调用<code>write()</code>方法，最后以<code>end()</code>结束：</p>\r\n<h3 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe\"></a>pipe()</h3>\r\n<p>把两个文件流串起来</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">var rs = fs.createReadStream(&#x27;sample.txt&#x27;);<br>var ws = fs.createWriteStream(&#x27;copied.txt&#x27;);<br>rs.pipe(ws);//cope the file<br>//rs.pipe(ws, &#123; end: false &#125;);//not close ws stream, can still write<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"http模块\"><a href=\"#http模块\" class=\"headerlink\" title=\"http模块\"></a>http模块</h2>\r\n<p>request对象：HTTP请求</p>\r\n<p>response对象：HTTP响应</p>\r\n<p>由于<code>response</code>对象本身是一个<code>Writable Stream</code></p>\r\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2>\r\n<p>CLI(只允许键盘输入) &amp; GUI(图形化界面)</p>\r\n<h3 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h3>\r\n<p><code>cd xxx</code></p>\r\n<p><code>npm init</code> 生成package.json档案</p>\r\n<h3 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h3>\r\n<p><code>npm config set proxy http://127.0.0.1:翻牆端口</code></p>\r\n<p>代理服务器 IP 地址和端口号查找</p>\r\n<ol type=\"1\">\r\n<li>在开始搜索“Internet 选项”。</li>\r\n<li>选择“连接”标签页。</li>\r\n<li>点击“局域网设置”按钮。</li>\r\n<li>在弹出的窗口中，您可以看到代理服务器 IP 地址和端口号。</li>\r\n</ol>\r\n<h3 id=\"锁定文件\"><a href=\"#锁定文件\" class=\"headerlink\" title=\"锁定文件\"></a>锁定文件</h3>\r\n<p>pnpm-lock.yaml 和 package-lock.json\r\n都是项目中的锁定文件，它们的作用是锁定项目所依赖的包的版本。</p>\r\n<p>pnpm-lock.yaml 是由 pnpm（一个 JavaScript\r\n包管理工具）生成的锁定文件，它记录了所有项目依赖的包的版本。</p>\r\n<p>package-lock.json 是 NPM（Node Package Manager，一个 JavaScript\r\n包管理工具）生成的锁定文件，它也记录了所有项目依赖的包的版本。</p>\r\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2>\r\n<p>npm install lodash --save</p>\r\n<p>设置与项目相依，会存在package.json中</p>\r\n<p>卸载 uninstall</p>\r\n<p>npm ls查看已安装</p>\r\n<p>npm update lodash</p>\r\n<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3>\r\n<p>版本号有三位数字组成（譬如：1.2.3），<code>1</code>\r\n表示主版本、<code>1.2</code>表示次要版本、<code>1.2.3</code>\r\n表示补丁版本。</p>\r\n<p><code>^</code> 表示用于确定主版本号、 <code>~</code> 用于确定主版本号\r\n+ 次要版本号；</p>\r\n<ul>\r\n<li><code>^1</code> ：等同于 <code>1.x.x</code> ,\r\n以<code>1</code>开头的所有版本；</li>\r\n<li><code>~2.2</code> ：等同于 <code>2.2.x</code> ，以 <code>2.2</code>\r\n开头的所有版本。</li>\r\n<li><code>~2.2.1</code> ：以 <code>2.2</code> 开头，且最后一位 补丁号≥1\r\n的所有版本，即 <code>2.2.1</code> 与 <code>2.2.9</code>\r\n之间版本，包括头尾。</li>\r\n</ul>\r\n"},{"title":"HTML","date":"2024-02-22T16:00:00.000Z","_content":"## 简介\n\n```html\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>test</title>\n        <link style=\"\"\n    </head>\n    <body>\n        \n    </body>\n</html>\n```\n\n\\<head> 不可见的东西\n\n\\<body> 可见的东西\n\n<Img>:src\n\n\\<h1><h2><h3>:标题\n\n\\<p>段落\n\n\\<ul><ol>列表：·或者1./里面用<li>表示一行\n\n- 就是<ul>\n\n1. 就是<ol>\n\n<a>:href\n\n[html5语义化标签](https://juejin.cn/post/6844903544995184653)\n\n## 引入代码文件\n\nbody最后：\n\n```html\n<script src=\"aaa.js\"></script>\n```\nhead里：\n```html\n<link rel=\"stylesheet\" href=\"style.css\">\n```\n\n## `<label>`标签\n\n`<label>`元素可以通过两种方式与相关的表单元素关联起来：使用`for`属性或者将表单元素放置在`<label>`标签内部。当使用`for`属性时，`for`属性的值应该与相关表单元素的`id`属性值相匹配。这样，当用户点击`<label>`元素时，相关的表单元素就会获得焦点或选中。\n\n这提供了更大的点击区域，使用户更容易选择或输入数据。使用`<label>`元素可以增加HTML文档的语义化。\n\n","source":"_posts/前端/HTML.md","raw":"---\ntitle: HTML\ndate: 2024-02-23 00:00:00\ntags:\n  - 前端\n  - HTML\n---\n## 简介\n\n```html\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>test</title>\n        <link style=\"\"\n    </head>\n    <body>\n        \n    </body>\n</html>\n```\n\n\\<head> 不可见的东西\n\n\\<body> 可见的东西\n\n<Img>:src\n\n\\<h1><h2><h3>:标题\n\n\\<p>段落\n\n\\<ul><ol>列表：·或者1./里面用<li>表示一行\n\n- 就是<ul>\n\n1. 就是<ol>\n\n<a>:href\n\n[html5语义化标签](https://juejin.cn/post/6844903544995184653)\n\n## 引入代码文件\n\nbody最后：\n\n```html\n<script src=\"aaa.js\"></script>\n```\nhead里：\n```html\n<link rel=\"stylesheet\" href=\"style.css\">\n```\n\n## `<label>`标签\n\n`<label>`元素可以通过两种方式与相关的表单元素关联起来：使用`for`属性或者将表单元素放置在`<label>`标签内部。当使用`for`属性时，`for`属性的值应该与相关表单元素的`id`属性值相匹配。这样，当用户点击`<label>`元素时，相关的表单元素就会获得焦点或选中。\n\n这提供了更大的点击区域，使用户更容易选择或输入数据。使用`<label>`元素可以增加HTML文档的语义化。\n\n","slug":"前端/HTML","published":1,"updated":"2024-02-23T07:24:02.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vc0004p4wvbd3g1abi","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!doctype <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;&quot;</span></span><br><span class=\"hljs-tag\">    &lt;/<span class=\"hljs-attr\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>        <br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\r\n<p>&lt;head&gt; 不可见的东西</p>\r\n<p>&lt;body&gt; 可见的东西</p>\r\n<p><Img>:src</p>\r\n&lt;h1&gt;\r\n<h2>\r\n<h3>\r\n<p>:标题</p>\r\n<p>&lt;p&gt;段落</p>\r\n&lt;ul&gt;\r\n<ol>\r\n列表：·或者1./里面用\r\n<li>\r\n<p>表示一行</p>\r\n<ul>\r\n<li>就是\r\n<ul></li>\r\n</ul>\r\n<ol type=\"1\">\r\n<li>就是\r\n<ol></li>\r\n</ol>\r\n<p><a>:href</p>\r\n<p><a\r\nhref=\"https://juejin.cn/post/6844903544995184653\">html5语义化标签</a></p>\r\n<h2 id=\"引入代码文件\"><a href=\"#引入代码文件\" class=\"headerlink\" title=\"引入代码文件\"></a>引入代码文件</h2>\r\n<p>body最后：</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;aaa.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\r\n<p>head里： <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\r\n<h2 id=\"label标签\"><a href=\"#label标签\" class=\"headerlink\" title=\"label标签\"></a><code>&lt;label&gt;</code>标签</h2>\r\n<p><code>&lt;label&gt;</code>元素可以通过两种方式与相关的表单元素关联起来：使用<code>for</code>属性或者将表单元素放置在<code>&lt;label&gt;</code>标签内部。当使用<code>for</code>属性时，<code>for</code>属性的值应该与相关表单元素的<code>id</code>属性值相匹配。这样，当用户点击<code>&lt;label&gt;</code>元素时，相关的表单元素就会获得焦点或选中。</p>\r\n<p>这提供了更大的点击区域，使用户更容易选择或输入数据。使用<code>&lt;label&gt;</code>元素可以增加HTML文档的语义化。</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!doctype <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;&quot;</span></span><br><span class=\"hljs-tag\">    &lt;/<span class=\"hljs-attr\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>        <br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\r\n<p>&lt;head&gt; 不可见的东西</p>\r\n<p>&lt;body&gt; 可见的东西</p>\r\n<p><Img>:src</p>\r\n&lt;h1&gt;\r\n<h2>\r\n<h3>\r\n<p>:标题</p>\r\n<p>&lt;p&gt;段落</p>\r\n&lt;ul&gt;\r\n<ol>\r\n列表：·或者1./里面用\r\n<li>\r\n<p>表示一行</p>\r\n<ul>\r\n<li>就是\r\n<ul></li>\r\n</ul>\r\n<ol type=\"1\">\r\n<li>就是\r\n<ol></li>\r\n</ol>\r\n<p><a>:href</p>\r\n<p><a\r\nhref=\"https://juejin.cn/post/6844903544995184653\">html5语义化标签</a></p>\r\n<h2 id=\"引入代码文件\"><a href=\"#引入代码文件\" class=\"headerlink\" title=\"引入代码文件\"></a>引入代码文件</h2>\r\n<p>body最后：</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;aaa.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\r\n<p>head里： <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></p>\r\n<h2 id=\"label标签\"><a href=\"#label标签\" class=\"headerlink\" title=\"label标签\"></a><code>&lt;label&gt;</code>标签</h2>\r\n<p><code>&lt;label&gt;</code>元素可以通过两种方式与相关的表单元素关联起来：使用<code>for</code>属性或者将表单元素放置在<code>&lt;label&gt;</code>标签内部。当使用<code>for</code>属性时，<code>for</code>属性的值应该与相关表单元素的<code>id</code>属性值相匹配。这样，当用户点击<code>&lt;label&gt;</code>元素时，相关的表单元素就会获得焦点或选中。</p>\r\n<p>这提供了更大的点击区域，使用户更容易选择或输入数据。使用<code>&lt;label&gt;</code>元素可以增加HTML文档的语义化。</p>\r\n"},{"title":"高三暑假集训总结","date":"2024-02-22T16:00:00.000Z","_content":"# Vue3学习笔记\n\n## 开始\n\nhttps://cn.vuejs.org/guide/quick-start.html\n`pnpm create vite FrontEndTs --template vue-ts`\n\n## 应用与组件\n\n一个vue应用里有很多组件，组成组件树，\n\n```js\nimport { createApp } from 'vue'\n// 从一个单文件组件(.vue)中导入根组件(App)\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.mount('#app') // 应用根组件(app)的内容将会被渲染在容器元素(#app)里面。//不包括此容器(#app)\n```\n\n## 数据绑定\n\n### 文本插值\n\n{{ aaa + 1 }} (内部支持js语法，但必须是一个表达式，if不行，三元表达式可以，可以是一个函数)\n\n### 指令\n\n指令是带有 `v-` 前缀的特殊 attribute。\n\n#### v-html\n\n这里看到的 `v-html` attribute 被称为一个**指令**。简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 `rawHtml` 属性保持同步。其中rawHtml是script中的变量\n\n```html\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### v-bind\n\n`v-bind` 指令指示 Vue 将元素的 `id` attribute 与组件的 `dynamicId` 属性保持一致。如果绑定的值是 `null` 或者 `undefined`，那么该 attribute 将会从渲染的元素上移除。\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n简写（更常见） 去掉v-bind \n\n```\n<div :id=\"dynamicId\"></div>\n```\n\n另一种方法（绑定多个值）：绑定一个对象，对象的键值是属性名\n\n#### v-if v-else-if v-else\n\n```vue\n<div v-if=\"condition1\">\n  <!-- 在条件1为真时渲染的内容 -->\n</div>\n<div v-else-if=\"condition2\">\n  <!-- 在条件1为假且条件2为真时渲染的内容 -->\n</div>\n<div v-else>\n  <!-- 在前面的条件都不满足时渲染的内容 -->\n</div>\n```\n\n#### v-on 监听事件\n\n```vue\n<a v-on:click=\"doSomething\"> ... </a>\n<!-- 简写 --> <a @click=\"doSomething\"> ... </a>\n```\n\n`:` 后的属性也是可以\n\n#### v-model 双向绑定\n\n`<input v-model=\"text\"> <p>{{ text }}</p>` （把text的值和输入框的value双向绑定）\n\n跟踪某个dom节点的值时（如input的value）经常使用\n\n#### v-for \n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\n// 给每个 todo 对象一个唯一的 id\nlet id = 0\n\nconst newTodo = ref('')\nconst todos = ref([\n  { id: id++, text: 'Learn HTML' },\n  { id: id++, text: 'Learn JavaScript' },\n  { id: id++, text: 'Learn Vue' }\n])\n\nfunction addTodo() {\n  todos.value.push({ id: id++, text: newTodo.value })\n  newTodo.value = ''\n}\n\nfunction removeTodo(todo) {\n  todos.value = todos.value.filter((t) => t !== todo)\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"addTodo\">\n    <input v-model=\"newTodo\">\n    <button>Add Todo</button>    \n  </form>\n  <ul>\n    <li v-for=\"todo in todos\" :key=\"todo.id\">\n      {{ todo.text }}\n      <button @click=\"removeTodo(todo)\">X</button>\n    </li>\n  </ul>\n</template>\n```\n\n## 响应式\n\n在Vue.js中，响应式是指当数据发生变化时，相关的视图会自动更新以保持与数据的同步。\n\n只有添加了响应式才能改变\n\n### rep()\n\nint a = 0; => int a = rep(0);\n\na++; => a.value++; !!!记得加value\n\nreactive 数组或对象，不用加value\n\n记得import { ref } from 'vue' \n\n### computed()\n\n跟踪其他东西，其他东西变得时候它变\n\n```vue\nconst filteredTodos = computed(() => {\n  return hideCompleted.value\n    ? todos.value.filter((t) => !t.done)\n    : todos.value\n})\n```\n\n### watch()\n\n当观察的变量变了的时候执行回调函数\n\n```vue\nwatch(count, (newCount) => {\n\tconsole.log(`new count is: ${newCount}`) \n})\n```\n\n\n只要hideCompleted.value或者todos.value变得时候就会变\n\n## 模板引用\n\n`<p ref=\"pElementRef\">hello</p>`\n\n`const pElementRef = ref(null);`\n\npElementRef.value就是那个dom节点\n\n## 生命周期钩子\n\n- onMounted （组件都挂载（mount）之后调用回调函数）\n\t- `onMounted(() => {  // component is now mounted. })`\n- onUpdated\n\n\n## 组件嵌套\n\n`import ChildComp from './ChildComp.vue'`\n\n`<ChildComp />`\n\n### 数据下放\n\n#### props\n\nA child component can accept input data from the parent via **props**.\n\nin 父组件：` <ChildComp :msg=\"greeting\" />` （msg是子组件里的名字，相当于子组件的一个属性。greeting是父组件的一个变量）\n\nin 子组件：\n\n```vue\nconst props = defineProps({ msg: String })\n```\n\n注意在template可以直接用msg（也可以用props.msg（建议）），但在script中只能是props.msg\n\n可以动态改变\n#### v-model\n双向绑定\nhttps://vuejs.org/guide/components/v-model.html\n\n#### slot\n\n```vue\n<ChildComp>\n  This is some slot content!\n</ChildComp>\n// or <ChildComp /> means no slot\n```\n\n```vue\n<slot>Fallback content</slot>\n// or <slot /> (means no fallback)\n```\n\n\n\n### 数据上传\n\n```vue\n<script setup>\n// declare emitted events //自定义上传函数名\nconst emit = defineEmits(['response'])\n\n// emit with argument, 第二个参数到最后一个参数是下面那个回调函数的参数\nemit('response', 'hello from child')\n</script>\n```\n\n```vue\n<ChildComp @response=\"(msg) => childMsg = msg\" />\n```\n\n## Pinia\n\n它有点像一个永远存在的组件，每个组件都可以读取和写入它。它有**三个概念**，[state](https://pinia.vuejs.org/zh/core-concepts/state.html)、[getter](https://pinia.vuejs.org/zh/core-concepts/getters.html) 和 [action](https://pinia.vuejs.org/zh/core-concepts/actions.html)，我们可以假设这些概念相当于组件中的 `data`、 `computed` 和 `methods`。\n\nstore 应该用于在许多地方使用的数据\n## 杂记\n\n### 文件信息\n\n`import.meta.glob` 是 Vite 提供的一个特性，它可以在 JavaScript 或 Vue 文件中使用。这个函数会匹配文件系统中的所有特定模式的文件，并将它们作为 JavaScript 模块导入。\n\n例如，如果你想要导入目录中的所有 `.js` 文件，你可以这样做：\n\nconst modules = import.meta.glob('./*.js');\n\n这将返回一个对象，其中的每个键都是匹配的文件路径，每个值都是导入这个模块的函数，返回值是这个模块（组件）。\n\n这个特性在你需要动态导入目录中的所有模块时非常有用，例如，自动注册 Vue 组件或 Vuex 模块。\n\n（这里debug了好久，因为copilot一开始给的函数名就有错（globEager已弃用），还是不要轻信AI，去网上查一查即时信息）(同步函数 import.meta.glob('xxx', {eagger:true}))\n\n```vue\nasync function initialModule() {\n    const modulesImport = import.meta.glob('./components/*.vue');\n    const modules = {};\n    for (const path in modulesImport) {\n      const name = path.match(/\\.\\/components\\/(.*)\\.vue$/)[1];\n      console.log('Import a module: ', name);\n      modules[name] = await modulesImport[path]();\n      // console.log('module', module);\n    }\n    return modules;\n  }\n```\n\n### Object.keys(), Array.map()\t\n\n前者返回所有键组成的数组\n\n后者可以应用于数组，并返回一个新的数组，其中包含对原始数组中的每个元素应用某个函数的结果。\n\n### 动态绑定class\n\n`class=\"['tab-button', { active: currentTab === tab }]\"` 是一个动态绑定的 `class` 属性，用于设置元素的 CSS 类名。\n\n在这个绑定中，`['tab-button', { active: currentTab === tab }]` 是一个数组，数组的第一个元素是字符串 `'tab-button'`，表示一个静态的 CSS 类名 `'tab-button'`。数组的第二个元素是一个对象 `{ active: currentTab === tab }`，表示一个动态的 CSS 类名。\n\n对象中的 `active: currentTab === tab` 表示当 `currentTab` 和 `tab` 相等时，该类名 `active` 将被应用，否则不会应用。\n\n例如，如果 `currentTab` 和 `tab` 相等，那么 `active` 类名将被应用于元素，使其具有相应的样式。如果它们不相等，则不会应用 `active` 类名。\n\n这样可以根据条件来动态地切换元素的样式，例如在实现选项卡时，可以通过切换 `active` 类名来标记当前活动的选项卡。\n\n### for (a, b) in arr\n\n是的，你理解得很对！在 `v-for=\"(_, tab) in tabs\"` 中，`_` 是一个占位符，表示当前遍历的元素的值，而 `tab` 则表示当前元素的键或索引。\n\n### `<component :is=\"view\" />`\n\n动态渲染组件\n\n要渲染的实际组件由 `is` prop 决定。\n\n- 当 `is` 是字符串，它既可以是 HTML 标签名也可以是组件的注册名。\n- 或者，`is` 也可以直接绑定到组件的定义。\n\n（如果不会注册的话还是直接绑定义(import)）\n\n[tab标签功能展示](https://play.vuejs.org/#eNqNVdFu2jAU/RUrfaCVCLRj2kMG1bqp0raHrdr61kxTcBxwSezIdhgI8e87thMT1FIBErLvPT4+5+bmsovu6nq0bliURFNNFa8N0cw09W0qeFVLZchXWTFSKFmRwWhsNxY+COkHqY0Oebc7BtwpuuTrA0W7PwbtiGIF2bcgnyKpoFJoQ2ijFBPmMZuTmcVdDqyMwVUqOoTJ5hq5HQ45vUO7cFrcqr0yFftUTMfeJgxiY1hVl5lh2BEyzfma0DLTepZGOatkGrk4MvPGGIkDdoPPOi6kAujy79DefUW4cBrSKECSFdsCgWg/2LE/DZCIPetgCPsZNVCYHHmdzSwp2f/pMXyiJacrMBwVpX9LK5mQ3c4fh2nnYeyvs8YNtlSi9AIUJOFWktX/dGDFpaEWjv52Og5HfLnGqBdW03Gvithqsy3tcmRL6J9JIYWJi6zi5TYhOhM61kzx4qPNzaXKmUrITb0hWpY8JxeMsV4qVlnOG52Qd/XGhessz7lYIHCNMxP8uHCVqQUXsZE1yFjVj80lnFcJed9hG9wPDSWjJiECnlxUrpkqSvkv3iQka4xEEMWDk8PD8n6Cgg8QcNORtnIhIC5ZYYLuycu84ovlKcBRKSilLoUHoyVSteTCMOXhGV0tlGxEnpCL4tp+XzMdg64fd3eHMAz27CVLWwNv8oieXdvvC/zI9+0ZB1rIaYehpm09/bvqeikaRt3gsXPq9EvrG9X3u5tboWNPNCyYw8g6n9rPvDO4e7PufPZuYJ7BbzTmX8EXo2ctBW5wNcZswEleMvWzNhzzMY0SX32by0o0+HcXM6rxk9KdWTK6eiX+rDc2lkYPiuGlwRSNQs6goZjx6fvfP9gG65CsZN6UQL+R/MXQA43V6GGf0TqQ3cM5td/cfwR641HfbwwTujNlhVrk3uHTCGX+8ob1g9zJaOLOocui/X90F1hu)\n\n### 如何打包\n\n搞了半天，发现简单问题chatgpt还是可以，网上都太高端了\n\n直接 pnpm run build，然后就在disk文件夹里。注意要把所有直接路径改为间接路径，好奇怪的东西（比如 `/assets/a.png -> assets/a.png`）。然后不能直接用浏览器打开html文件，有啥限制。\n\n### 引入txt文件\n`import proverb from '../assets/proverb.txt?raw';`\n`?raw` 代表以字符串的形式引入\n\n### 引入tailwind\nhttps://tailwindcss.com/docs/guides/vite#vue\n```js\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{html,js,ts,jsx,tsx,vue}\" // 注意导入vue\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n","source":"_posts/前端/Vue3.md","raw":"---\ntitle: 高三暑假集训总结\ndate: 2024-02-23 00:00:00\ntags:\n  - 前端\n  - Vue3\n---\n# Vue3学习笔记\n\n## 开始\n\nhttps://cn.vuejs.org/guide/quick-start.html\n`pnpm create vite FrontEndTs --template vue-ts`\n\n## 应用与组件\n\n一个vue应用里有很多组件，组成组件树，\n\n```js\nimport { createApp } from 'vue'\n// 从一个单文件组件(.vue)中导入根组件(App)\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.mount('#app') // 应用根组件(app)的内容将会被渲染在容器元素(#app)里面。//不包括此容器(#app)\n```\n\n## 数据绑定\n\n### 文本插值\n\n{{ aaa + 1 }} (内部支持js语法，但必须是一个表达式，if不行，三元表达式可以，可以是一个函数)\n\n### 指令\n\n指令是带有 `v-` 前缀的特殊 attribute。\n\n#### v-html\n\n这里看到的 `v-html` attribute 被称为一个**指令**。简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 `rawHtml` 属性保持同步。其中rawHtml是script中的变量\n\n```html\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### v-bind\n\n`v-bind` 指令指示 Vue 将元素的 `id` attribute 与组件的 `dynamicId` 属性保持一致。如果绑定的值是 `null` 或者 `undefined`，那么该 attribute 将会从渲染的元素上移除。\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n简写（更常见） 去掉v-bind \n\n```\n<div :id=\"dynamicId\"></div>\n```\n\n另一种方法（绑定多个值）：绑定一个对象，对象的键值是属性名\n\n#### v-if v-else-if v-else\n\n```vue\n<div v-if=\"condition1\">\n  <!-- 在条件1为真时渲染的内容 -->\n</div>\n<div v-else-if=\"condition2\">\n  <!-- 在条件1为假且条件2为真时渲染的内容 -->\n</div>\n<div v-else>\n  <!-- 在前面的条件都不满足时渲染的内容 -->\n</div>\n```\n\n#### v-on 监听事件\n\n```vue\n<a v-on:click=\"doSomething\"> ... </a>\n<!-- 简写 --> <a @click=\"doSomething\"> ... </a>\n```\n\n`:` 后的属性也是可以\n\n#### v-model 双向绑定\n\n`<input v-model=\"text\"> <p>{{ text }}</p>` （把text的值和输入框的value双向绑定）\n\n跟踪某个dom节点的值时（如input的value）经常使用\n\n#### v-for \n\n```vue\n<script setup>\nimport { ref } from 'vue'\n\n// 给每个 todo 对象一个唯一的 id\nlet id = 0\n\nconst newTodo = ref('')\nconst todos = ref([\n  { id: id++, text: 'Learn HTML' },\n  { id: id++, text: 'Learn JavaScript' },\n  { id: id++, text: 'Learn Vue' }\n])\n\nfunction addTodo() {\n  todos.value.push({ id: id++, text: newTodo.value })\n  newTodo.value = ''\n}\n\nfunction removeTodo(todo) {\n  todos.value = todos.value.filter((t) => t !== todo)\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"addTodo\">\n    <input v-model=\"newTodo\">\n    <button>Add Todo</button>    \n  </form>\n  <ul>\n    <li v-for=\"todo in todos\" :key=\"todo.id\">\n      {{ todo.text }}\n      <button @click=\"removeTodo(todo)\">X</button>\n    </li>\n  </ul>\n</template>\n```\n\n## 响应式\n\n在Vue.js中，响应式是指当数据发生变化时，相关的视图会自动更新以保持与数据的同步。\n\n只有添加了响应式才能改变\n\n### rep()\n\nint a = 0; => int a = rep(0);\n\na++; => a.value++; !!!记得加value\n\nreactive 数组或对象，不用加value\n\n记得import { ref } from 'vue' \n\n### computed()\n\n跟踪其他东西，其他东西变得时候它变\n\n```vue\nconst filteredTodos = computed(() => {\n  return hideCompleted.value\n    ? todos.value.filter((t) => !t.done)\n    : todos.value\n})\n```\n\n### watch()\n\n当观察的变量变了的时候执行回调函数\n\n```vue\nwatch(count, (newCount) => {\n\tconsole.log(`new count is: ${newCount}`) \n})\n```\n\n\n只要hideCompleted.value或者todos.value变得时候就会变\n\n## 模板引用\n\n`<p ref=\"pElementRef\">hello</p>`\n\n`const pElementRef = ref(null);`\n\npElementRef.value就是那个dom节点\n\n## 生命周期钩子\n\n- onMounted （组件都挂载（mount）之后调用回调函数）\n\t- `onMounted(() => {  // component is now mounted. })`\n- onUpdated\n\n\n## 组件嵌套\n\n`import ChildComp from './ChildComp.vue'`\n\n`<ChildComp />`\n\n### 数据下放\n\n#### props\n\nA child component can accept input data from the parent via **props**.\n\nin 父组件：` <ChildComp :msg=\"greeting\" />` （msg是子组件里的名字，相当于子组件的一个属性。greeting是父组件的一个变量）\n\nin 子组件：\n\n```vue\nconst props = defineProps({ msg: String })\n```\n\n注意在template可以直接用msg（也可以用props.msg（建议）），但在script中只能是props.msg\n\n可以动态改变\n#### v-model\n双向绑定\nhttps://vuejs.org/guide/components/v-model.html\n\n#### slot\n\n```vue\n<ChildComp>\n  This is some slot content!\n</ChildComp>\n// or <ChildComp /> means no slot\n```\n\n```vue\n<slot>Fallback content</slot>\n// or <slot /> (means no fallback)\n```\n\n\n\n### 数据上传\n\n```vue\n<script setup>\n// declare emitted events //自定义上传函数名\nconst emit = defineEmits(['response'])\n\n// emit with argument, 第二个参数到最后一个参数是下面那个回调函数的参数\nemit('response', 'hello from child')\n</script>\n```\n\n```vue\n<ChildComp @response=\"(msg) => childMsg = msg\" />\n```\n\n## Pinia\n\n它有点像一个永远存在的组件，每个组件都可以读取和写入它。它有**三个概念**，[state](https://pinia.vuejs.org/zh/core-concepts/state.html)、[getter](https://pinia.vuejs.org/zh/core-concepts/getters.html) 和 [action](https://pinia.vuejs.org/zh/core-concepts/actions.html)，我们可以假设这些概念相当于组件中的 `data`、 `computed` 和 `methods`。\n\nstore 应该用于在许多地方使用的数据\n## 杂记\n\n### 文件信息\n\n`import.meta.glob` 是 Vite 提供的一个特性，它可以在 JavaScript 或 Vue 文件中使用。这个函数会匹配文件系统中的所有特定模式的文件，并将它们作为 JavaScript 模块导入。\n\n例如，如果你想要导入目录中的所有 `.js` 文件，你可以这样做：\n\nconst modules = import.meta.glob('./*.js');\n\n这将返回一个对象，其中的每个键都是匹配的文件路径，每个值都是导入这个模块的函数，返回值是这个模块（组件）。\n\n这个特性在你需要动态导入目录中的所有模块时非常有用，例如，自动注册 Vue 组件或 Vuex 模块。\n\n（这里debug了好久，因为copilot一开始给的函数名就有错（globEager已弃用），还是不要轻信AI，去网上查一查即时信息）(同步函数 import.meta.glob('xxx', {eagger:true}))\n\n```vue\nasync function initialModule() {\n    const modulesImport = import.meta.glob('./components/*.vue');\n    const modules = {};\n    for (const path in modulesImport) {\n      const name = path.match(/\\.\\/components\\/(.*)\\.vue$/)[1];\n      console.log('Import a module: ', name);\n      modules[name] = await modulesImport[path]();\n      // console.log('module', module);\n    }\n    return modules;\n  }\n```\n\n### Object.keys(), Array.map()\t\n\n前者返回所有键组成的数组\n\n后者可以应用于数组，并返回一个新的数组，其中包含对原始数组中的每个元素应用某个函数的结果。\n\n### 动态绑定class\n\n`class=\"['tab-button', { active: currentTab === tab }]\"` 是一个动态绑定的 `class` 属性，用于设置元素的 CSS 类名。\n\n在这个绑定中，`['tab-button', { active: currentTab === tab }]` 是一个数组，数组的第一个元素是字符串 `'tab-button'`，表示一个静态的 CSS 类名 `'tab-button'`。数组的第二个元素是一个对象 `{ active: currentTab === tab }`，表示一个动态的 CSS 类名。\n\n对象中的 `active: currentTab === tab` 表示当 `currentTab` 和 `tab` 相等时，该类名 `active` 将被应用，否则不会应用。\n\n例如，如果 `currentTab` 和 `tab` 相等，那么 `active` 类名将被应用于元素，使其具有相应的样式。如果它们不相等，则不会应用 `active` 类名。\n\n这样可以根据条件来动态地切换元素的样式，例如在实现选项卡时，可以通过切换 `active` 类名来标记当前活动的选项卡。\n\n### for (a, b) in arr\n\n是的，你理解得很对！在 `v-for=\"(_, tab) in tabs\"` 中，`_` 是一个占位符，表示当前遍历的元素的值，而 `tab` 则表示当前元素的键或索引。\n\n### `<component :is=\"view\" />`\n\n动态渲染组件\n\n要渲染的实际组件由 `is` prop 决定。\n\n- 当 `is` 是字符串，它既可以是 HTML 标签名也可以是组件的注册名。\n- 或者，`is` 也可以直接绑定到组件的定义。\n\n（如果不会注册的话还是直接绑定义(import)）\n\n[tab标签功能展示](https://play.vuejs.org/#eNqNVdFu2jAU/RUrfaCVCLRj2kMG1bqp0raHrdr61kxTcBxwSezIdhgI8e87thMT1FIBErLvPT4+5+bmsovu6nq0bliURFNNFa8N0cw09W0qeFVLZchXWTFSKFmRwWhsNxY+COkHqY0Oebc7BtwpuuTrA0W7PwbtiGIF2bcgnyKpoFJoQ2ijFBPmMZuTmcVdDqyMwVUqOoTJ5hq5HQ45vUO7cFrcqr0yFftUTMfeJgxiY1hVl5lh2BEyzfma0DLTepZGOatkGrk4MvPGGIkDdoPPOi6kAujy79DefUW4cBrSKECSFdsCgWg/2LE/DZCIPetgCPsZNVCYHHmdzSwp2f/pMXyiJacrMBwVpX9LK5mQ3c4fh2nnYeyvs8YNtlSi9AIUJOFWktX/dGDFpaEWjv52Og5HfLnGqBdW03Gvithqsy3tcmRL6J9JIYWJi6zi5TYhOhM61kzx4qPNzaXKmUrITb0hWpY8JxeMsV4qVlnOG52Qd/XGhessz7lYIHCNMxP8uHCVqQUXsZE1yFjVj80lnFcJed9hG9wPDSWjJiECnlxUrpkqSvkv3iQka4xEEMWDk8PD8n6Cgg8QcNORtnIhIC5ZYYLuycu84ovlKcBRKSilLoUHoyVSteTCMOXhGV0tlGxEnpCL4tp+XzMdg64fd3eHMAz27CVLWwNv8oieXdvvC/zI9+0ZB1rIaYehpm09/bvqeikaRt3gsXPq9EvrG9X3u5tboWNPNCyYw8g6n9rPvDO4e7PufPZuYJ7BbzTmX8EXo2ctBW5wNcZswEleMvWzNhzzMY0SX32by0o0+HcXM6rxk9KdWTK6eiX+rDc2lkYPiuGlwRSNQs6goZjx6fvfP9gG65CsZN6UQL+R/MXQA43V6GGf0TqQ3cM5td/cfwR641HfbwwTujNlhVrk3uHTCGX+8ob1g9zJaOLOocui/X90F1hu)\n\n### 如何打包\n\n搞了半天，发现简单问题chatgpt还是可以，网上都太高端了\n\n直接 pnpm run build，然后就在disk文件夹里。注意要把所有直接路径改为间接路径，好奇怪的东西（比如 `/assets/a.png -> assets/a.png`）。然后不能直接用浏览器打开html文件，有啥限制。\n\n### 引入txt文件\n`import proverb from '../assets/proverb.txt?raw';`\n`?raw` 代表以字符串的形式引入\n\n### 引入tailwind\nhttps://tailwindcss.com/docs/guides/vite#vue\n```js\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{html,js,ts,jsx,tsx,vue}\" // 注意导入vue\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n","slug":"前端/Vue3","published":1,"updated":"2024-08-10T08:47:17.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vd0005p4wv7fjobgex","content":"<h1 id=\"vue3学习笔记\"><a href=\"#vue3学习笔记\" class=\"headerlink\" title=\"vue3学习笔记\"></a>Vue3学习笔记</h1>\r\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\r\n<p>https://cn.vuejs.org/guide/quick-start.html\r\n<code>pnpm create vite FrontEndTs --template vue-ts</code></p>\r\n<h2 id=\"应用与组件\"><a href=\"#应用与组件\" class=\"headerlink\" title=\"应用与组件\"></a>应用与组件</h2>\r\n<p>一个vue应用里有很多组件，组成组件树，</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-comment\">// 从一个单文件组件(.vue)中导入根组件(App)</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App.vue&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>(<span class=\"hljs-title class_\">App</span>)<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>) <span class=\"hljs-comment\">// 应用根组件(app)的内容将会被渲染在容器元素(#app)里面。//不包括此容器(#app)</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2>\r\n<h3 id=\"文本插值\"><a href=\"#文本插值\" class=\"headerlink\" title=\"文本插值\"></a>文本插值</h3>\r\nNaN\r\n<p>(内部支持js语法，但必须是一个表达式，if不行，三元表达式可以，可以是一个函数)</p>\r\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3>\r\n<p>指令是带有 <code>v-</code> 前缀的特殊 attribute。</p>\r\n<h4 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h4>\r\n<p>这里看到的 <code>v-html</code> attribute\r\n被称为一个<strong>指令</strong>。简单来说就是：在当前组件实例上，将此元素的\r\ninnerHTML 与 <code>rawHtml</code>\r\n属性保持同步。其中rawHtml是script中的变量</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Using v-html directive: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\r\n<h4 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h4>\r\n<p><code>v-bind</code> 指令指示 Vue 将元素的 <code>id</code> attribute\r\n与组件的 <code>dynamicId</code> 属性保持一致。如果绑定的值是\r\n<code>null</code> 或者 <code>undefined</code>，那么该 attribute\r\n将会从渲染的元素上移除。</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:id</span>=<span class=\"hljs-string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\r\n<p>简写（更常见） 去掉v-bind</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;div :id=&quot;dynamicId&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure>\r\n<p>另一种方法（绑定多个值）：绑定一个对象，对象的键值是属性名</p>\r\n<h4 id=\"v-if-v-else-if-v-else\"><a href=\"#v-if-v-else-if-v-else\" class=\"headerlink\" title=\"v-if-v-else-if-v-else\"></a>v-if v-else-if v-else</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;div v-if=&quot;condition1&quot;&gt;<br>  &lt;!-- 在条件1为真时渲染的内容 --&gt;<br>&lt;/div&gt;<br>&lt;div v-else-if=&quot;condition2&quot;&gt;<br>  &lt;!-- 在条件1为假且条件2为真时渲染的内容 --&gt;<br>&lt;/div&gt;<br>&lt;div v-else&gt;<br>  &lt;!-- 在前面的条件都不满足时渲染的内容 --&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>\r\n<h4 id=\"v-on-监听事件\"><a href=\"#v-on-监听事件\" class=\"headerlink\" title=\"v-on-监听事件\"></a>v-on 监听事件</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br>&lt;!-- 简写 --&gt; &lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure>\r\n<p><code>:</code> 后的属性也是可以</p>\r\n<h4 id=\"v-model-双向绑定\"><a href=\"#v-model-双向绑定\" class=\"headerlink\" title=\"v-model-双向绑定\"></a>v-model 双向绑定</h4>\r\n<p><code>&lt;input v-model=\"text\"&gt; &lt;p&gt;&#123;&#123; text &#125;&#125;&lt;/p&gt;</code>\r\n（把text的值和输入框的value双向绑定）</p>\r\n<p>跟踪某个dom节点的值时（如input的value）经常使用</p>\r\n<h4 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br><br>// 给每个 todo 对象一个唯一的 id<br>let id = 0<br><br>const newTodo = ref(&#x27;&#x27;)<br>const todos = ref([<br>  &#123; id: id++, text: &#x27;Learn HTML&#x27; &#125;,<br>  &#123; id: id++, text: &#x27;Learn JavaScript&#x27; &#125;,<br>  &#123; id: id++, text: &#x27;Learn Vue&#x27; &#125;<br>])<br><br>function addTodo() &#123;<br>  todos.value.push(&#123; id: id++, text: newTodo.value &#125;)<br>  newTodo.value = &#x27;&#x27;<br>&#125;<br><br>function removeTodo(todo) &#123;<br>  todos.value = todos.value.filter((t) =&gt; t !== todo)<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;<br>    &lt;input v-model=&quot;newTodo&quot;&gt;<br>    &lt;button&gt;Add Todo&lt;/button&gt;    <br>  &lt;/form&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt;<br>      &#123;&#123; todo.text &#125;&#125;<br>      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h2>\r\n<p>在Vue.js中，响应式是指当数据发生变化时，相关的视图会自动更新以保持与数据的同步。</p>\r\n<p>只有添加了响应式才能改变</p>\r\n<h3 id=\"rep\"><a href=\"#rep\" class=\"headerlink\" title=\"rep\"></a>rep()</h3>\r\n<p>int a = 0; =&gt; int a = rep(0);</p>\r\n<p>a++; =&gt; a.value++; !!!记得加value</p>\r\n<p>reactive 数组或对象，不用加value</p>\r\n<p>记得import { ref } from 'vue'</p>\r\n<h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed()</h3>\r\n<p>跟踪其他东西，其他东西变得时候它变</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">const filteredTodos = computed(() =&gt; &#123;<br>  return hideCompleted.value<br>    ? todos.value.filter((t) =&gt; !t.done)<br>    : todos.value<br>&#125;)<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch()</h3>\r\n<p>当观察的变量变了的时候执行回调函数</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">watch(count, (newCount) =&gt; &#123;<br>\tconsole.log(`new count is: $&#123;newCount&#125;`) <br>&#125;)<br></code></pre></td></tr></table></figure>\r\n<p>只要hideCompleted.value或者todos.value变得时候就会变</p>\r\n<h2 id=\"模板引用\"><a href=\"#模板引用\" class=\"headerlink\" title=\"模板引用\"></a>模板引用</h2>\r\n<p><code>&lt;p ref=\"pElementRef\"&gt;hello&lt;/p&gt;</code></p>\r\n<p><code>const pElementRef = ref(null);</code></p>\r\n<p>pElementRef.value就是那个dom节点</p>\r\n<h2 id=\"生命周期钩子\"><a href=\"#生命周期钩子\" class=\"headerlink\" title=\"生命周期钩子\"></a>生命周期钩子</h2>\r\n<ul>\r\n<li>onMounted （组件都挂载（mount）之后调用回调函数）\r\n<ul>\r\n<li><code>onMounted(() =&gt; &#123;  // component is now mounted. &#125;)</code></li>\r\n</ul></li>\r\n<li>onUpdated</li>\r\n</ul>\r\n<h2 id=\"组件嵌套\"><a href=\"#组件嵌套\" class=\"headerlink\" title=\"组件嵌套\"></a>组件嵌套</h2>\r\n<p><code>import ChildComp from './ChildComp.vue'</code></p>\r\n<p><code>&lt;ChildComp /&gt;</code></p>\r\n<h3 id=\"数据下放\"><a href=\"#数据下放\" class=\"headerlink\" title=\"数据下放\"></a>数据下放</h3>\r\n<h4 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h4>\r\n<p>A child component can accept input data from the parent via\r\n<strong>props</strong>.</p>\r\n<p>in 父组件：<code>&lt;ChildComp :msg=\"greeting\" /&gt;</code>\r\n（msg是子组件里的名字，相当于子组件的一个属性。greeting是父组件的一个变量）</p>\r\n<p>in 子组件：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">const props = defineProps(&#123; msg: String &#125;)<br></code></pre></td></tr></table></figure>\r\n<p>注意在template可以直接用msg（也可以用props.msg（建议）），但在script中只能是props.msg</p>\r\n<p>可以动态改变 #### v-model 双向绑定\r\nhttps://vuejs.org/guide/components/v-model.html</p>\r\n<h4 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;ChildComp&gt;<br>  This is some slot content!<br>&lt;/ChildComp&gt;<br>// or &lt;ChildComp /&gt; means no slot<br></code></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;slot&gt;Fallback content&lt;/slot&gt;<br>// or &lt;slot /&gt; (means no fallback)<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"数据上传\"><a href=\"#数据上传\" class=\"headerlink\" title=\"数据上传\"></a>数据上传</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;script setup&gt;<br>// declare emitted events //自定义上传函数名<br>const emit = defineEmits([&#x27;response&#x27;])<br><br>// emit with argument, 第二个参数到最后一个参数是下面那个回调函数的参数<br>emit(&#x27;response&#x27;, &#x27;hello from child&#x27;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;ChildComp @response=&quot;(msg) =&gt; childMsg = msg&quot; /&gt;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"pinia\"><a href=\"#pinia\" class=\"headerlink\" title=\"pinia\"></a>Pinia</h2>\r\n<p>它有点像一个永远存在的组件，每个组件都可以读取和写入它。它有<strong>三个概念</strong>，<a\r\nhref=\"https://pinia.vuejs.org/zh/core-concepts/state.html\">state</a>、<a\r\nhref=\"https://pinia.vuejs.org/zh/core-concepts/getters.html\">getter</a> 和 <a\r\nhref=\"https://pinia.vuejs.org/zh/core-concepts/actions.html\">action</a>，我们可以假设这些概念相当于组件中的 <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p>\r\n<p>store 应该用于在许多地方使用的数据 ## 杂记</p>\r\n<h3 id=\"文件信息\"><a href=\"#文件信息\" class=\"headerlink\" title=\"文件信息\"></a>文件信息</h3>\r\n<p><code>import.meta.glob</code> 是 Vite 提供的一个特性，它可以在\r\nJavaScript 或 Vue\r\n文件中使用。这个函数会匹配文件系统中的所有特定模式的文件，并将它们作为\r\nJavaScript 模块导入。</p>\r\n<p>例如，如果你想要导入目录中的所有 <code>.js</code>\r\n文件，你可以这样做：</p>\r\n<p>const modules = import.meta.glob('./*.js');</p>\r\n<p>这将返回一个对象，其中的每个键都是匹配的文件路径，每个值都是导入这个模块的函数，返回值是这个模块（组件）。</p>\r\n<p>这个特性在你需要动态导入目录中的所有模块时非常有用，例如，自动注册\r\nVue 组件或 Vuex 模块。</p>\r\n<p>（这里debug了好久，因为copilot一开始给的函数名就有错（globEager已弃用），还是不要轻信AI，去网上查一查即时信息）(同步函数\r\nimport.meta.glob('xxx', {eagger:true}))</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">async function initialModule() &#123;<br>    const modulesImport = import.meta.glob(&#x27;./components/*.vue&#x27;);<br>    const modules = &#123;&#125;;<br>    for (const path in modulesImport) &#123;<br>      const name = path.match(/\\.\\/components\\/(.*)\\.vue$/)[1];<br>      console.log(&#x27;Import a module: &#x27;, name);<br>      modules[name] = await modulesImport[path]();<br>      // console.log(&#x27;module&#x27;, module);<br>    &#125;<br>    return modules;<br>  &#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"object.keys-array.map\"><a href=\"#object.keys-array.map\" class=\"headerlink\" title=\"object.keys-array.map\"></a>Object.keys(), Array.map()</h3>\r\n<p>前者返回所有键组成的数组</p>\r\n<p>后者可以应用于数组，并返回一个新的数组，其中包含对原始数组中的每个元素应用某个函数的结果。</p>\r\n<h3 id=\"动态绑定class\"><a href=\"#动态绑定class\" class=\"headerlink\" title=\"动态绑定class\"></a>动态绑定class</h3>\r\n<p><code>class=\"['tab-button', &#123; active: currentTab === tab &#125;]\"</code>\r\n是一个动态绑定的 <code>class</code> 属性，用于设置元素的 CSS 类名。</p>\r\n<p>在这个绑定中，<code>['tab-button', &#123; active: currentTab === tab &#125;]</code>\r\n是一个数组，数组的第一个元素是字符串\r\n<code>'tab-button'</code>，表示一个静态的 CSS 类名\r\n<code>'tab-button'</code>。数组的第二个元素是一个对象\r\n<code>&#123; active: currentTab === tab &#125;</code>，表示一个动态的 CSS\r\n类名。</p>\r\n<p>对象中的 <code>active: currentTab === tab</code> 表示当\r\n<code>currentTab</code> 和 <code>tab</code> 相等时，该类名\r\n<code>active</code> 将被应用，否则不会应用。</p>\r\n<p>例如，如果 <code>currentTab</code> 和 <code>tab</code> 相等，那么\r\n<code>active</code>\r\n类名将被应用于元素，使其具有相应的样式。如果它们不相等，则不会应用\r\n<code>active</code> 类名。</p>\r\n<p>这样可以根据条件来动态地切换元素的样式，例如在实现选项卡时，可以通过切换\r\n<code>active</code> 类名来标记当前活动的选项卡。</p>\r\n<h3 id=\"for-a-b-in-arr\"><a href=\"#for-a-b-in-arr\" class=\"headerlink\" title=\"for-a-b-in-arr\"></a>for (a, b) in arr</h3>\r\n<p>是的，你理解得很对！在 <code>v-for=\"(_, tab) in tabs\"</code>\r\n中，<code>_</code> 是一个占位符，表示当前遍历的元素的值，而\r\n<code>tab</code> 则表示当前元素的键或索引。</p>\r\n<h3\r\nid=\"component-isview\"><code>&lt;component :is=\"view\" /&gt;</code></h3>\r\n<p>动态渲染组件</p>\r\n<p>要渲染的实际组件由 <code>is</code> prop 决定。</p>\r\n<ul>\r\n<li>当 <code>is</code> 是字符串，它既可以是 HTML\r\n标签名也可以是组件的注册名。</li>\r\n<li>或者，<code>is</code> 也可以直接绑定到组件的定义。</li>\r\n</ul>\r\n<p>（如果不会注册的话还是直接绑定义(import)）</p>\r\n<p><a\r\nhref=\"https://play.vuejs.org/#eNqNVdFu2jAU/RUrfaCVCLRj2kMG1bqp0raHrdr61kxTcBxwSezIdhgI8e87thMT1FIBErLvPT4+5+bmsovu6nq0bliURFNNFa8N0cw09W0qeFVLZchXWTFSKFmRwWhsNxY+COkHqY0Oebc7BtwpuuTrA0W7PwbtiGIF2bcgnyKpoFJoQ2ijFBPmMZuTmcVdDqyMwVUqOoTJ5hq5HQ45vUO7cFrcqr0yFftUTMfeJgxiY1hVl5lh2BEyzfma0DLTepZGOatkGrk4MvPGGIkDdoPPOi6kAujy79DefUW4cBrSKECSFdsCgWg/2LE/DZCIPetgCPsZNVCYHHmdzSwp2f/pMXyiJacrMBwVpX9LK5mQ3c4fh2nnYeyvs8YNtlSi9AIUJOFWktX/dGDFpaEWjv52Og5HfLnGqBdW03Gvithqsy3tcmRL6J9JIYWJi6zi5TYhOhM61kzx4qPNzaXKmUrITb0hWpY8JxeMsV4qVlnOG52Qd/XGhessz7lYIHCNMxP8uHCVqQUXsZE1yFjVj80lnFcJed9hG9wPDSWjJiECnlxUrpkqSvkv3iQka4xEEMWDk8PD8n6Cgg8QcNORtnIhIC5ZYYLuycu84ovlKcBRKSilLoUHoyVSteTCMOXhGV0tlGxEnpCL4tp+XzMdg64fd3eHMAz27CVLWwNv8oieXdvvC/zI9+0ZB1rIaYehpm09/bvqeikaRt3gsXPq9EvrG9X3u5tboWNPNCyYw8g6n9rPvDO4e7PufPZuYJ7BbzTmX8EXo2ctBW5wNcZswEleMvWzNhzzMY0SX32by0o0+HcXM6rxk9KdWTK6eiX+rDc2lkYPiuGlwRSNQs6goZjx6fvfP9gG65CsZN6UQL+R/MXQA43V6GGf0TqQ3cM5td/cfwR641HfbwwTujNlhVrk3uHTCGX+8ob1g9zJaOLOocui/X90F1hu\">tab标签功能展示</a></p>\r\n<h3 id=\"如何打包\"><a href=\"#如何打包\" class=\"headerlink\" title=\"如何打包\"></a>如何打包</h3>\r\n<p>搞了半天，发现简单问题chatgpt还是可以，网上都太高端了</p>\r\n<p>直接 pnpm run\r\nbuild，然后就在disk文件夹里。注意要把所有直接路径改为间接路径，好奇怪的东西（比如\r\n<code>/assets/a.png -&gt; assets/a.png</code>）。然后不能直接用浏览器打开html文件，有啥限制。</p>\r\n<h3 id=\"引入txt文件\"><a href=\"#引入txt文件\" class=\"headerlink\" title=\"引入txt文件\"></a>引入txt文件</h3>\r\n<p><code>import proverb from '../assets/proverb.txt?raw';</code>\r\n<code>?raw</code> 代表以字符串的形式引入</p>\r\n<h3 id=\"引入tailwind\"><a href=\"#引入tailwind\" class=\"headerlink\" title=\"引入tailwind\"></a>引入tailwind</h3>\r\n<p>https://tailwindcss.com/docs/guides/vite#vue <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@type</span> &#123;<span class=\"hljs-type\">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-attr\">content</span>: [<br>    <span class=\"hljs-string\">&quot;./index.html&quot;</span>,<br>    <span class=\"hljs-string\">&quot;./src/**/*.&#123;html,js,ts,jsx,tsx,vue&#125;&quot;</span> <span class=\"hljs-comment\">// 注意导入vue</span><br>  ],<br>  <span class=\"hljs-attr\">theme</span>: &#123;<br>    <span class=\"hljs-attr\">extend</span>: &#123;&#125;,<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [],<br>&#125;<br></code></pre></td></tr></table></figure></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue3学习笔记\"><a href=\"#vue3学习笔记\" class=\"headerlink\" title=\"vue3学习笔记\"></a>Vue3学习笔记</h1>\r\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\r\n<p>https://cn.vuejs.org/guide/quick-start.html\r\n<code>pnpm create vite FrontEndTs --template vue-ts</code></p>\r\n<h2 id=\"应用与组件\"><a href=\"#应用与组件\" class=\"headerlink\" title=\"应用与组件\"></a>应用与组件</h2>\r\n<p>一个vue应用里有很多组件，组成组件树，</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; createApp &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-comment\">// 从一个单文件组件(.vue)中导入根组件(App)</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App.vue&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">createApp</span>(<span class=\"hljs-title class_\">App</span>)<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>) <span class=\"hljs-comment\">// 应用根组件(app)的内容将会被渲染在容器元素(#app)里面。//不包括此容器(#app)</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2>\r\n<h3 id=\"文本插值\"><a href=\"#文本插值\" class=\"headerlink\" title=\"文本插值\"></a>文本插值</h3>\r\nNaN\r\n<p>(内部支持js语法，但必须是一个表达式，if不行，三元表达式可以，可以是一个函数)</p>\r\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3>\r\n<p>指令是带有 <code>v-</code> 前缀的特殊 attribute。</p>\r\n<h4 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h4>\r\n<p>这里看到的 <code>v-html</code> attribute\r\n被称为一个<strong>指令</strong>。简单来说就是：在当前组件实例上，将此元素的\r\ninnerHTML 与 <code>rawHtml</code>\r\n属性保持同步。其中rawHtml是script中的变量</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Using v-html directive: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\r\n<h4 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h4>\r\n<p><code>v-bind</code> 指令指示 Vue 将元素的 <code>id</code> attribute\r\n与组件的 <code>dynamicId</code> 属性保持一致。如果绑定的值是\r\n<code>null</code> 或者 <code>undefined</code>，那么该 attribute\r\n将会从渲染的元素上移除。</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:id</span>=<span class=\"hljs-string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\r\n<p>简写（更常见） 去掉v-bind</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;div :id=&quot;dynamicId&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure>\r\n<p>另一种方法（绑定多个值）：绑定一个对象，对象的键值是属性名</p>\r\n<h4 id=\"v-if-v-else-if-v-else\"><a href=\"#v-if-v-else-if-v-else\" class=\"headerlink\" title=\"v-if-v-else-if-v-else\"></a>v-if v-else-if v-else</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;div v-if=&quot;condition1&quot;&gt;<br>  &lt;!-- 在条件1为真时渲染的内容 --&gt;<br>&lt;/div&gt;<br>&lt;div v-else-if=&quot;condition2&quot;&gt;<br>  &lt;!-- 在条件1为假且条件2为真时渲染的内容 --&gt;<br>&lt;/div&gt;<br>&lt;div v-else&gt;<br>  &lt;!-- 在前面的条件都不满足时渲染的内容 --&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>\r\n<h4 id=\"v-on-监听事件\"><a href=\"#v-on-监听事件\" class=\"headerlink\" title=\"v-on-监听事件\"></a>v-on 监听事件</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br>&lt;!-- 简写 --&gt; &lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure>\r\n<p><code>:</code> 后的属性也是可以</p>\r\n<h4 id=\"v-model-双向绑定\"><a href=\"#v-model-双向绑定\" class=\"headerlink\" title=\"v-model-双向绑定\"></a>v-model 双向绑定</h4>\r\n<p><code>&lt;input v-model=\"text\"&gt; &lt;p&gt;&#123;&#123; text &#125;&#125;&lt;/p&gt;</code>\r\n（把text的值和输入框的value双向绑定）</p>\r\n<p>跟踪某个dom节点的值时（如input的value）经常使用</p>\r\n<h4 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br><br>// 给每个 todo 对象一个唯一的 id<br>let id = 0<br><br>const newTodo = ref(&#x27;&#x27;)<br>const todos = ref([<br>  &#123; id: id++, text: &#x27;Learn HTML&#x27; &#125;,<br>  &#123; id: id++, text: &#x27;Learn JavaScript&#x27; &#125;,<br>  &#123; id: id++, text: &#x27;Learn Vue&#x27; &#125;<br>])<br><br>function addTodo() &#123;<br>  todos.value.push(&#123; id: id++, text: newTodo.value &#125;)<br>  newTodo.value = &#x27;&#x27;<br>&#125;<br><br>function removeTodo(todo) &#123;<br>  todos.value = todos.value.filter((t) =&gt; t !== todo)<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;<br>    &lt;input v-model=&quot;newTodo&quot;&gt;<br>    &lt;button&gt;Add Todo&lt;/button&gt;    <br>  &lt;/form&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt;<br>      &#123;&#123; todo.text &#125;&#125;<br>      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h2>\r\n<p>在Vue.js中，响应式是指当数据发生变化时，相关的视图会自动更新以保持与数据的同步。</p>\r\n<p>只有添加了响应式才能改变</p>\r\n<h3 id=\"rep\"><a href=\"#rep\" class=\"headerlink\" title=\"rep\"></a>rep()</h3>\r\n<p>int a = 0; =&gt; int a = rep(0);</p>\r\n<p>a++; =&gt; a.value++; !!!记得加value</p>\r\n<p>reactive 数组或对象，不用加value</p>\r\n<p>记得import { ref } from 'vue'</p>\r\n<h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed()</h3>\r\n<p>跟踪其他东西，其他东西变得时候它变</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">const filteredTodos = computed(() =&gt; &#123;<br>  return hideCompleted.value<br>    ? todos.value.filter((t) =&gt; !t.done)<br>    : todos.value<br>&#125;)<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch()</h3>\r\n<p>当观察的变量变了的时候执行回调函数</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">watch(count, (newCount) =&gt; &#123;<br>\tconsole.log(`new count is: $&#123;newCount&#125;`) <br>&#125;)<br></code></pre></td></tr></table></figure>\r\n<p>只要hideCompleted.value或者todos.value变得时候就会变</p>\r\n<h2 id=\"模板引用\"><a href=\"#模板引用\" class=\"headerlink\" title=\"模板引用\"></a>模板引用</h2>\r\n<p><code>&lt;p ref=\"pElementRef\"&gt;hello&lt;/p&gt;</code></p>\r\n<p><code>const pElementRef = ref(null);</code></p>\r\n<p>pElementRef.value就是那个dom节点</p>\r\n<h2 id=\"生命周期钩子\"><a href=\"#生命周期钩子\" class=\"headerlink\" title=\"生命周期钩子\"></a>生命周期钩子</h2>\r\n<ul>\r\n<li>onMounted （组件都挂载（mount）之后调用回调函数）\r\n<ul>\r\n<li><code>onMounted(() =&gt; &#123;  // component is now mounted. &#125;)</code></li>\r\n</ul></li>\r\n<li>onUpdated</li>\r\n</ul>\r\n<h2 id=\"组件嵌套\"><a href=\"#组件嵌套\" class=\"headerlink\" title=\"组件嵌套\"></a>组件嵌套</h2>\r\n<p><code>import ChildComp from './ChildComp.vue'</code></p>\r\n<p><code>&lt;ChildComp /&gt;</code></p>\r\n<h3 id=\"数据下放\"><a href=\"#数据下放\" class=\"headerlink\" title=\"数据下放\"></a>数据下放</h3>\r\n<h4 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h4>\r\n<p>A child component can accept input data from the parent via\r\n<strong>props</strong>.</p>\r\n<p>in 父组件：<code>&lt;ChildComp :msg=\"greeting\" /&gt;</code>\r\n（msg是子组件里的名字，相当于子组件的一个属性。greeting是父组件的一个变量）</p>\r\n<p>in 子组件：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">const props = defineProps(&#123; msg: String &#125;)<br></code></pre></td></tr></table></figure>\r\n<p>注意在template可以直接用msg（也可以用props.msg（建议）），但在script中只能是props.msg</p>\r\n<p>可以动态改变 #### v-model 双向绑定\r\nhttps://vuejs.org/guide/components/v-model.html</p>\r\n<h4 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;ChildComp&gt;<br>  This is some slot content!<br>&lt;/ChildComp&gt;<br>// or &lt;ChildComp /&gt; means no slot<br></code></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;slot&gt;Fallback content&lt;/slot&gt;<br>// or &lt;slot /&gt; (means no fallback)<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"数据上传\"><a href=\"#数据上传\" class=\"headerlink\" title=\"数据上传\"></a>数据上传</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;script setup&gt;<br>// declare emitted events //自定义上传函数名<br>const emit = defineEmits([&#x27;response&#x27;])<br><br>// emit with argument, 第二个参数到最后一个参数是下面那个回调函数的参数<br>emit(&#x27;response&#x27;, &#x27;hello from child&#x27;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;ChildComp @response=&quot;(msg) =&gt; childMsg = msg&quot; /&gt;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"pinia\"><a href=\"#pinia\" class=\"headerlink\" title=\"pinia\"></a>Pinia</h2>\r\n<p>它有点像一个永远存在的组件，每个组件都可以读取和写入它。它有<strong>三个概念</strong>，<a\r\nhref=\"https://pinia.vuejs.org/zh/core-concepts/state.html\">state</a>、<a\r\nhref=\"https://pinia.vuejs.org/zh/core-concepts/getters.html\">getter</a> 和 <a\r\nhref=\"https://pinia.vuejs.org/zh/core-concepts/actions.html\">action</a>，我们可以假设这些概念相当于组件中的 <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p>\r\n<p>store 应该用于在许多地方使用的数据 ## 杂记</p>\r\n<h3 id=\"文件信息\"><a href=\"#文件信息\" class=\"headerlink\" title=\"文件信息\"></a>文件信息</h3>\r\n<p><code>import.meta.glob</code> 是 Vite 提供的一个特性，它可以在\r\nJavaScript 或 Vue\r\n文件中使用。这个函数会匹配文件系统中的所有特定模式的文件，并将它们作为\r\nJavaScript 模块导入。</p>\r\n<p>例如，如果你想要导入目录中的所有 <code>.js</code>\r\n文件，你可以这样做：</p>\r\n<p>const modules = import.meta.glob('./*.js');</p>\r\n<p>这将返回一个对象，其中的每个键都是匹配的文件路径，每个值都是导入这个模块的函数，返回值是这个模块（组件）。</p>\r\n<p>这个特性在你需要动态导入目录中的所有模块时非常有用，例如，自动注册\r\nVue 组件或 Vuex 模块。</p>\r\n<p>（这里debug了好久，因为copilot一开始给的函数名就有错（globEager已弃用），还是不要轻信AI，去网上查一查即时信息）(同步函数\r\nimport.meta.glob('xxx', {eagger:true}))</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">async function initialModule() &#123;<br>    const modulesImport = import.meta.glob(&#x27;./components/*.vue&#x27;);<br>    const modules = &#123;&#125;;<br>    for (const path in modulesImport) &#123;<br>      const name = path.match(/\\.\\/components\\/(.*)\\.vue$/)[1];<br>      console.log(&#x27;Import a module: &#x27;, name);<br>      modules[name] = await modulesImport[path]();<br>      // console.log(&#x27;module&#x27;, module);<br>    &#125;<br>    return modules;<br>  &#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"object.keys-array.map\"><a href=\"#object.keys-array.map\" class=\"headerlink\" title=\"object.keys-array.map\"></a>Object.keys(), Array.map()</h3>\r\n<p>前者返回所有键组成的数组</p>\r\n<p>后者可以应用于数组，并返回一个新的数组，其中包含对原始数组中的每个元素应用某个函数的结果。</p>\r\n<h3 id=\"动态绑定class\"><a href=\"#动态绑定class\" class=\"headerlink\" title=\"动态绑定class\"></a>动态绑定class</h3>\r\n<p><code>class=\"['tab-button', &#123; active: currentTab === tab &#125;]\"</code>\r\n是一个动态绑定的 <code>class</code> 属性，用于设置元素的 CSS 类名。</p>\r\n<p>在这个绑定中，<code>['tab-button', &#123; active: currentTab === tab &#125;]</code>\r\n是一个数组，数组的第一个元素是字符串\r\n<code>'tab-button'</code>，表示一个静态的 CSS 类名\r\n<code>'tab-button'</code>。数组的第二个元素是一个对象\r\n<code>&#123; active: currentTab === tab &#125;</code>，表示一个动态的 CSS\r\n类名。</p>\r\n<p>对象中的 <code>active: currentTab === tab</code> 表示当\r\n<code>currentTab</code> 和 <code>tab</code> 相等时，该类名\r\n<code>active</code> 将被应用，否则不会应用。</p>\r\n<p>例如，如果 <code>currentTab</code> 和 <code>tab</code> 相等，那么\r\n<code>active</code>\r\n类名将被应用于元素，使其具有相应的样式。如果它们不相等，则不会应用\r\n<code>active</code> 类名。</p>\r\n<p>这样可以根据条件来动态地切换元素的样式，例如在实现选项卡时，可以通过切换\r\n<code>active</code> 类名来标记当前活动的选项卡。</p>\r\n<h3 id=\"for-a-b-in-arr\"><a href=\"#for-a-b-in-arr\" class=\"headerlink\" title=\"for-a-b-in-arr\"></a>for (a, b) in arr</h3>\r\n<p>是的，你理解得很对！在 <code>v-for=\"(_, tab) in tabs\"</code>\r\n中，<code>_</code> 是一个占位符，表示当前遍历的元素的值，而\r\n<code>tab</code> 则表示当前元素的键或索引。</p>\r\n<h3\r\nid=\"component-isview\"><code>&lt;component :is=\"view\" /&gt;</code></h3>\r\n<p>动态渲染组件</p>\r\n<p>要渲染的实际组件由 <code>is</code> prop 决定。</p>\r\n<ul>\r\n<li>当 <code>is</code> 是字符串，它既可以是 HTML\r\n标签名也可以是组件的注册名。</li>\r\n<li>或者，<code>is</code> 也可以直接绑定到组件的定义。</li>\r\n</ul>\r\n<p>（如果不会注册的话还是直接绑定义(import)）</p>\r\n<p><a\r\nhref=\"https://play.vuejs.org/#eNqNVdFu2jAU/RUrfaCVCLRj2kMG1bqp0raHrdr61kxTcBxwSezIdhgI8e87thMT1FIBErLvPT4+5+bmsovu6nq0bliURFNNFa8N0cw09W0qeFVLZchXWTFSKFmRwWhsNxY+COkHqY0Oebc7BtwpuuTrA0W7PwbtiGIF2bcgnyKpoFJoQ2ijFBPmMZuTmcVdDqyMwVUqOoTJ5hq5HQ45vUO7cFrcqr0yFftUTMfeJgxiY1hVl5lh2BEyzfma0DLTepZGOatkGrk4MvPGGIkDdoPPOi6kAujy79DefUW4cBrSKECSFdsCgWg/2LE/DZCIPetgCPsZNVCYHHmdzSwp2f/pMXyiJacrMBwVpX9LK5mQ3c4fh2nnYeyvs8YNtlSi9AIUJOFWktX/dGDFpaEWjv52Og5HfLnGqBdW03Gvithqsy3tcmRL6J9JIYWJi6zi5TYhOhM61kzx4qPNzaXKmUrITb0hWpY8JxeMsV4qVlnOG52Qd/XGhessz7lYIHCNMxP8uHCVqQUXsZE1yFjVj80lnFcJed9hG9wPDSWjJiECnlxUrpkqSvkv3iQka4xEEMWDk8PD8n6Cgg8QcNORtnIhIC5ZYYLuycu84ovlKcBRKSilLoUHoyVSteTCMOXhGV0tlGxEnpCL4tp+XzMdg64fd3eHMAz27CVLWwNv8oieXdvvC/zI9+0ZB1rIaYehpm09/bvqeikaRt3gsXPq9EvrG9X3u5tboWNPNCyYw8g6n9rPvDO4e7PufPZuYJ7BbzTmX8EXo2ctBW5wNcZswEleMvWzNhzzMY0SX32by0o0+HcXM6rxk9KdWTK6eiX+rDc2lkYPiuGlwRSNQs6goZjx6fvfP9gG65CsZN6UQL+R/MXQA43V6GGf0TqQ3cM5td/cfwR641HfbwwTujNlhVrk3uHTCGX+8ob1g9zJaOLOocui/X90F1hu\">tab标签功能展示</a></p>\r\n<h3 id=\"如何打包\"><a href=\"#如何打包\" class=\"headerlink\" title=\"如何打包\"></a>如何打包</h3>\r\n<p>搞了半天，发现简单问题chatgpt还是可以，网上都太高端了</p>\r\n<p>直接 pnpm run\r\nbuild，然后就在disk文件夹里。注意要把所有直接路径改为间接路径，好奇怪的东西（比如\r\n<code>/assets/a.png -&gt; assets/a.png</code>）。然后不能直接用浏览器打开html文件，有啥限制。</p>\r\n<h3 id=\"引入txt文件\"><a href=\"#引入txt文件\" class=\"headerlink\" title=\"引入txt文件\"></a>引入txt文件</h3>\r\n<p><code>import proverb from '../assets/proverb.txt?raw';</code>\r\n<code>?raw</code> 代表以字符串的形式引入</p>\r\n<h3 id=\"引入tailwind\"><a href=\"#引入tailwind\" class=\"headerlink\" title=\"引入tailwind\"></a>引入tailwind</h3>\r\n<p>https://tailwindcss.com/docs/guides/vite#vue <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@type</span> &#123;<span class=\"hljs-type\">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-attr\">content</span>: [<br>    <span class=\"hljs-string\">&quot;./index.html&quot;</span>,<br>    <span class=\"hljs-string\">&quot;./src/**/*.&#123;html,js,ts,jsx,tsx,vue&#125;&quot;</span> <span class=\"hljs-comment\">// 注意导入vue</span><br>  ],<br>  <span class=\"hljs-attr\">theme</span>: &#123;<br>    <span class=\"hljs-attr\">extend</span>: &#123;&#125;,<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [],<br>&#125;<br></code></pre></td></tr></table></figure></p>\r\n"},{"title":"ToBeDone","date":"2024-02-22T16:00:00.000Z","hidden":true,"_content":"- Bootstrap \n- 加密 前端加密 前后端分离\n- axios \n- [token](https://cloud.tencent.com/developer/article/1386062)\n- 数据库\n- 容器查询\n- linear-gradient、cubic-bezier","source":"_posts/前端/ToBeDone.md","raw":"---\ntitle: ToBeDone\ndate: 2024-02-23 00:00:00\ntags:\n  - 前端\nhidden: true\n---\n- Bootstrap \n- 加密 前端加密 前后端分离\n- axios \n- [token](https://cloud.tencent.com/developer/article/1386062)\n- 数据库\n- 容器查询\n- linear-gradient、cubic-bezier","slug":"前端/ToBeDone","published":1,"updated":"2024-09-23T03:40:52.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vd0006p4wvckrf83gj","content":"<ul>\r\n<li>Bootstrap</li>\r\n<li>加密 前端加密 前后端分离</li>\r\n<li>axios</li>\r\n<li><a\r\nhref=\"https://cloud.tencent.com/developer/article/1386062\">token</a></li>\r\n<li>数据库</li>\r\n<li>容器查询</li>\r\n<li>linear-gradient、cubic-bezier</li>\r\n</ul>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<ul>\r\n<li>Bootstrap</li>\r\n<li>加密 前端加密 前后端分离</li>\r\n<li>axios</li>\r\n<li><a\r\nhref=\"https://cloud.tencent.com/developer/article/1386062\">token</a></li>\r\n<li>数据库</li>\r\n<li>容器查询</li>\r\n<li>linear-gradient、cubic-bezier</li>\r\n</ul>\r\n"},{"title":" 新人任务学习笔记","date":"2024-02-22T16:00:00.000Z","hidden":true,"_content":"# 新人任务学习笔记\n\n# week 1 (keyword:加载/刷新/同步)\n\n更改css样式后需要html刷新一次才能更新\n\njs是同步执行的，邻近的命令会一起执行\n\n创造html子元素有函数\n\n```js\nlet div = document.createElement('div');\ndocument.body.appendChild(div);\n```\n\n# week 2 虚拟 DOM\n\n[vdom学习视频 b站](https://www.bilibili.com/video/BV12T411t796?p=4&vd_source=610d5016ada513f5a725f4e7b2c16173)\n\n[Virtual DOM 的设计与实现](https://nosaid.com/article/virtual-dom#%E7%94%9F%E6%88%90%20VNode)\n\n[手把手教你手写vdom](https://juejin.cn/post/6984784551503790116#heading-31)\n\n## 作用\n\n性能：对 `dom` 的操作是昂贵的，最后在一个合适的时机去一次性更新真实 `dom`\n\n跨平台\n\n## VNode\n\n对象\n\n## diff\n\n检查自从上一期patch后修改了哪些\n\n同一个位置（可能是移动后）若新旧节点key和type一样，则复用（用旧的element（real dom））\n\n否则 重新建一个element（real dom）暴力新建和删除\n\n## patch\n\n根据 diff 对比，把结果反馈到真实 dom 上\n\n## 一些方法\n\ninsertBefore\n\nappendChild（末尾）\n\n（如果有，只是移动）\n\ntagName（大写的标签名）\n\nremoveChild\n\ndocument.createElement\n\nstring.toLowerCase();\n\nNode.parentNode\n\nNode.nextSibling\n\n## vue3优化\n\n事件缓存\n\n静态节点标记\n\n比较方式\n\n- 头和头比\n- 尾和尾比\n- 基于最长递增子序列进行移动/添加/删除\n\n## react diff算法\n\n[111](https://www.jb51.net/article/277184.htm)\n\n直接用key比较，\n\nif (nowindex (这一个新节点对应的老index) < lastindex (上一个新节点对应的老index，已移动过的) ) 移动\n\n## emmet\n\nhttps://juejin.cn/post/7018567571876102151\n\n## 问题\n\n- 不用 for in 用 of\n- const t = [] 因为数组的地址不会改变\n- [Object.freeze()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n\n# week 3 [promise](https://space.bilibili.com/203376774/video)\n\n[参考代码（有些问题）](http://blog.coderyq.cn/index.php/2022/09/22/promise%e7%9a%84%e4%bd%bf%e7%94%a8%e5%92%8c%e6%89%8b%e5%86%99/)\n\n[手把手教你](https://juejin.cn/post/7043758954496655397)\n\n回调函数：把一个函数作为参数传到另一个函数中，这个作为参数的函数就是回调函数\n\n[JavaScript 异步编程指南](https://juejin.cn/column/6965423613981753380)\n\n## for in & for of  遍历对象键值 [JS](JS.md)\n\n- 使用`for...in`循环遍历对象的可枚举属性（包括原型链上的属性）。\n- 使用`for...of`循环遍历可迭代对象，如数组、字符串、Map、Set等。\n- 在处理数组时，尽量避免使用`for...in`循环，以防止意外的结果和性能问题。\n- 在JavaScript中，如果您想要遍历一个对象的键值对，您可以使用 `Object.entries()` 方法。这个方法会返回一个由键值对组成的数组，然后您可以使用 `for...of` 循环或数组的 `forEach()` 方法来遍历这些键值对。\n\n## 基本操作\n\n```js\nconst promise = new Promise((resolve, reject) => {  // 异步操作...  \n    if (/* 异步操作成功 */) {    \n        resolve(result); // 将结果传递给resolve函数  \n    } else {    \n        reject(error); // 将错误信息传递给reject函数  \n    } \n}); \npromise  \n    .then(result => {\n    \t// 处理异步操作成功的结果  \n\t})  \n    .catch(error => {\n    \t// 处理异步操作失败的结果  \n\t});\n```\nnew promise时自动执行promise内函数\n\n- then\n\n  then支持一个或两个函数参数：then(onFulfilled)，then(onFulfilled, onRejected)\n\n  then的返回值是promise，是它的回调函数的返回值\n\n  若不传第二个参数，此promise为rejected时自动返回此promise\n\n    ```js\n    promise\n        .then(result => {console.log(\"1\");return 111});\n    ```\n\n  如果返回的不是promise对象，转换为一个状态为fulfilled，result为返回值的promise对象\n\n  执行时报错变成rejected\n\n- catch\n\n  如果此promise时fulfilled，则直接返回此promise\n\n  否则执行回调函数\n\n- finally\n\n  无论此promise的状态时fulfilled或者rejected，都执行回调函数\n\n  若函数返回rejected状态的promise或有错误，返回此promise或错误\n  \n  否则返回原promise\n\n## 微任务\n\n```js\nconst p = new Promise((resolve, reject) => {\n  setTimeout(() => {console.log(\"promise\"); return resolve(); })\n});\n\nsetTimeout(() => {console.log(\"setTimeout\"); });\n\np.then(res => {console.log(\"then\")});\n\nconsole.log(\"common\");\n\n//console : common promise then setTimeout\n```\n\n创造微任务：queueMicrotask()\n\n## 高级操作\n\n### Promise.all\n\n`Promise.all`方法接收一个由 Promise 实例组成的iterable对象（如数组）作为参数，并返回一个新的 Promise 实例。\n\n若在数组中的所有 Promise 实例都变为`fulfilled`状态后，才会变为`fulfilled`状态，并将每个 Promise 实例的结果值组成一个数组作为自己的result。\n\n如果出现一个变为rejected，立即变为rejected状态，且把第一个rejected的promise的result作为自己的result\n\n## Promise.allSettled()\n\n和all大致一样，但是其返回值result为`[{state:...,result:...},{state:...,result:...},{state:...,result:...}...]`，装所有promise的状态和res\n\n## Promise.race\n\n只要有一个变成fulfilled或rejected状态，就变成那个状态，把这一个的result/error给回调函数\n\n## Promise.resolve()\n\n若参数为promise对象，直接返回promise对象\n\n否则 返回一个新的 Promise 对象，该实例的状态为`fulfilled`，并将传递的参数作为result。\n\n## Promise.reject\n\n返回的promise状态一定是rejected\n\n## async & await\n\nasync 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。\n\n## 杂项\n\nfunction.bind(a);在运行此函数时把函数内的this绑定为a\n\n**`instanceof`** **运算符**用于检测构造函数的 `prototype` 属性是否出现在某个实例对象的原型链上。\n\n三个点（...）真名叫扩展运算符，不管是大括号（[]）、花括号（{}），统统不在话下，全部脱掉脱掉。但是只能脱掉一层，所以\n\nA.call(B, a1, a2) 调用A方法，并且A中的this为B，a1，a2...为A的参数\n\n箭头函数：this固定，不能是构造函数\n\n# week 4 TodeList\n\n## [webpack](https://juejin.cn/post/7101643125117943839)\n\n把所有js和css文件压缩成一个js文件\n\n## 杂项\n\n- `onclick`是一种直接在HTML标签中定义事件处理程序的简便方法，而`click`是通过JavaScript代码动态添加事件监听器的更灵活的方式。\n\n- `indexOf()`：这个方法返回子串在字符串中第一次出现的索引位置。如果找不到子串，则返回-1\n\n- ```\n  // 获取复选框元素\n  const checkbox = document.getElementById(\"myCheckbox\");\n  \n  // 模拟点击复选框\n  checkbox.click();\n  ```\n  \n- `document.querySelector(selector);`\n\n  其中，`selector`是一个字符串，表示要选择的元素的CSS选择器。它可以是元素的标签名、类名、ID、属性等。\n\n  `querySelector`方法返回与选择器匹配的第一个元素，如果没有找到匹配的元素，则返回`null`。如`'div','#id','.class','[a=b]'`\n  \n- `splice` 方法可以用于在数组的指定位置插入元素。它还可以用于删除元素或同时删除和插入元素。\n\n  ```\n  const arr = [1, 2, 3, 4, 5];\n  arr.splice(2, 0, 6);\n  console.log(arr); // 输出: [1, 2, 6, 3, 4, 5]\n  ```\n\n## 响应式布局\n\n响应式布局是一种设计方法，可以使网站或应用程序在不同设备和屏幕尺寸上提供最佳的用户体验。它可以根据用户的设备大小和屏幕分辨率自动调整和适应布局。可以使用媒体查询，弹性布局（flex）等办法。\n\n## 媒体查询\n\n媒体查询是CSS中的一种技术，它允许你根据设备的特性（如屏幕宽度、高度、方向等）应用不同的样式。你可以在CSS中使用媒体查询来定义不同屏幕尺寸下的样式规则。\n\n```css\n/* 在小屏幕上应用不同的样式 */\n@media (max-width: 768px) {\n  /* 在屏幕宽度小于等于768px时应用的样式 */\n}\n\n/* 在大屏幕上应用不同的样式 */\n@media (min-width: 1200px) {\n  /* 在屏幕宽度大于等于1200px时应用的样式 */\n}\n```\n\n通过使用媒体查询，你可以根据不同的屏幕尺寸应用不同的样式，以适应不同的设备。\n\n- html\n\n  `<link rel=\"stylesheet\" href=\"small.css\" media=\"(min-width: 20em)\" />`\n\n- css\n\n  ```css\n  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {  \n  .card {    \n  \tbackground: #bada55;  \n  \t} \n  }\n  ```\n\n- js\n\n  `window.matchMedia()`\n  ```js\n  // Create a condition that targets viewports at least 768px wide\n  const mediaQuery = window.matchMedia('(min-width: 768px)')\n\t\n  function handleTabletChange(e) {\n    // Check if the media query is true\n    if (e.matches) {\n      // Then log the following message to the console\n      console.log('Media Query Matched!')\n    }\n  }\n\t\n  // Register event listener\n  mediaQuery.addListener(handleTabletChange)\n\t\n  // Initial check\n  handleTabletChange(mediaQuery)\n  ```\n\n![媒体查询结构](https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/media-query-anatomy.jpg?resize=2048%2C135&ssl=1)\n\n- media type：如all，print，screen（最常用），speech\n\n- madia feature：如width，min-width，height，min-height，aspect-ratio（宽高比），orientation（屏幕的方向）……其他见文档\n\n- operator：@media 约等于 if\n\n  > The `@media` rule is itself a logical operator that is basically stating that “if” the following types and features are matches, then do some stuff.\n\n  `and`，`,`（or的意思），not\n  \n## 客户端存储技术\n\n#### cookie（少量，不安全）\n\nhttps://cloud.tencent.com/developer/article/1861983\n\n通过document.cookie直接设置cookie\n\n**expires过期时间**：表示什么时间删除`cookie`，即不再发送到服务器。默认情况下浏览器**会话结束后**会删除所有cookie。不过，可以设置删除`cookie`的具体时间，这样即使关闭浏览器`cookie`也会保存在用户的本机上。把过期时间设置为过去的时间就可以实现删除`cookie`\n\ndocument.cookie = '' 添加一个cookie，注意不是覆盖而是添加\n\n### Web Storage (localStorage, sessionStorage)\n\n`localstorage`的存储方式是以==`key-value`==的形式进行存储的，首先我们先了解以下其中的操作方法\n\n1.  `localstorage.length`：获取当前存储中的键值对数量 \n2.  `localstorage.key(index)`：得到某个索引的键值 \n3.  `localstorage.getItem(key)`：读取对应键值的数据 \n4.  `localstorage.setItem(key,value)`：设置对应的键值对，保存数据 \n5.  `localstorage.remove(key)`：清除某个指定数据 \n6.  `localstorage.clear()`：清除存储的所有数据 \n\n### 区别\n\n1. cookie在每次请求时都会被发送到服务器，这样会浪费带宽\n2. cookie中的操作方法需要自己封装，web storage中有`setItem`，`getItem`等方法\n3. cookie能够与服务器端交互，web Storage只是将数据保存在本地\n4. 存储数据的大小限制不一样，`cookie`一般4k，`web Storage`一般5M\n5. 数据的生命周期不一致，cookie能设置时间，本地存储是永久性的，临时存储可以说是一次性的\n6. 作用域不同，`sessionStorage`不在不同的浏览器窗口中共享，`localstorage`和`cookie`在所有同源窗口中都是共享的\n\n## 正则表达式\n\n- 创建： `let a = /ab+c/;` `let a = new RegExp(\"ab+c\");`\n\n- `/ab+c/g ` 全局匹配\n\n- `String.prototype.match(regex);` 返回一个Array，装有所有匹配的字符串\n\n- `String.prototype.search(regex);` 返回第一个匹配的索引位置\n\n- `String.prototype.replace(regex);` `String.prototype.split(regex);`\n\n- `RegExp.exec(String)` 返回详细信息（`[0]`匹配的字符串，`.index`，……）\n\n- 查找所有匹配的索引位置\n  ```js\n  const str = \"hello, hello, hello!\";\n  const regex = /hello/g;\n  let match;\n  const indexes = [];\n  while ((match = regex.exec(str)) !== null) {\n    indexes.push(match.index);\n  }\n  console.log(indexes); // 输出：[0, 7, 14]\n  ```\n  regex内部有一个lastIndex属性\n\n## 拷打问题\n\n- 用localstage\n- f12的应用可以查看cookie和localstage\n- -1 => 常量\n- 模板字符串\n  ```js\n  const message = `Hello, my name is ${name} and I am ${age} years old`;\n  const multiLineString = `\n    This is a\n    multi-line\n    string.\n  `;\n  ```\n\n- 序列化\n\n  内置的 `JSON.stringify()` 方法将对象序列化为 JSON 字符串，反之，如果要将 JSON 字符串反序列化为 JavaScript 对象，可以使用 `JSON.parse()` 方法\n\n- 用find而不用for\n\n- 控制台‘源代码’中的‘网页’可以拷到example的css源码\n\n# Week 5 [koa](https://www.liaoxuefeng.com/wiki/1022910821149312/1099752344192192)\n\n## 杂项\n\n- `<form>`标签是HTML中用于创建表单的元素。它用于包裹表单中的各种输入元素，例如文本框、复选框、单选按钮等。提交request，可以修改url和method。`action`属性指定了表单提交的目标URL，`method`属性指定了表单提交的HTTP方法（例如POST或GET）。浏览器会将每个表单字段的`name`属性与其对应的值一起发送到服务器\n\n- `const files = fs.readdirSync(_dirname)` 然后调用 readdirSync 方法并传入要读取的目录的路径作为参数。该方法会返回一个包含目录中所有文件和子目录的名字的数组\n\n- `Array.prototype.filter` : \n\n  过滤是指从数组中筛选出满足特定条件的元素，然后返回一个新的数组。`filter` 方法接受一个回调函数作为参数，该回调函数会对数组中的每个元素进行评估。如果回调函数返回 `true`，则该元素将被包含在新的数组中，否则将被排除。\n\n  ```\n  var js_files = files.filter((f) => {\n      return f.endsWith('.js');\n  });\n  ```\n\n- `in`运算符用于检查对象`obj`是否具有指定的键。如果对象具有该键，则返回`true`，否则返回`false`\n  \n- 计算属性名 `{[name]:value}` 把变量key的值作为key\n\n- `mime.lookup`是一个函数，用于根据文件扩展名获取对应的 MIME 类型。MIME 类型是一种标识文件类型的方式，它在 Web 开发中常用于指定服务器响应的 Content-Type 头部。\n\n## [JWT（JSON Web Token）](https://juejin.cn/post/7062173044214595597)\n\n由三部分组成：头部（Header）、载荷（Payload）和签名（Signature）。\n\nHeader，Payload是JSON对象，要使用 Base64URL 算法转成字符串。Signature 部分是对前两部分的签名，防止数据篡改。三部分字符串要用`.` 隔开。\n\n生成 Signature 需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256）。\n\n可以使用openssl来生成一对私钥和公钥。（我的电脑上要在 C:\\Users\\27427\\ 里使用）\n\n用Node.js中的 jsonwebtoken 库：\n\n- header自动生成\n\n- `token = jwt.sign(payload, secret)` 生成JWT\n\n- `const decoded = jwt.verify(token, secret);` 验证和解码JWT，返回一个payload\n\n## koa2 基本使用\n\n```js\n// 导入koa，和koa 1.x不同，在koa2中，我们导入的是一个class，因此用大写的Koa表示:\nconst Koa = require('koa');\n\n// 创建一个Koa对象表示web app本身:\nconst app = new Koa();\n\n// 对于任何请求，app将调用该异步函数处理请求：\napp.use(async (ctx, next) => {\n  // 参数ctx是由koa传入的封装了request和response的变量，我们可以通过它访问request和response，next是koa传入的将要处理的下一个异步函数\n  await next();\n  ctx.response.type = 'text/html';\n  ctx.response.body = '<h1>Hello, koa2!</h1>';\n});\n\n// 在端口3000监听:\napp.listen(3000);\nconsole.log('app started at port 3000...');\n```\n\n原因是koa把很多async函数组成一个处理链，每个async函数都可以做一些自己的事情，然后用`await next()`来调用下一个async函数。我们把每个async函数称为**middleware**，这些middleware可以组合起来，完成很多有用的功能。\n\n( request的目标URL告诉服务器请求的资源在哪里可以找到。)\n\n### koa-router\n\n为了处理URL，我们需要引入`koa-router`这个middleware，让它负责处理URL映射。我们使用`router.get('/path', async fn)`来处理一个GET请求。可以在请求路径中使用带变量的`/hello/:name`，变量可以通过`ctx.params.name`访问\n\n要写一个 `app.use(router.routes());` 一般在最后\n\n### koa-bodyparser\n\n另一个middleware来解析原始request请求，然后，把解析后的body对象，绑定到`ctx.request.body`中。\n\n要写一个 `app.use(bodyParser());` ，必须在`router`之前被注册到`app`对象上\n\n### 模块化router\n\n把每个url的router都打包成一个js文件，放在`controllers`目录下，用一些方法让它自动扫描`controllers`目录，找到所有模块文件，导入，然后注册每个URL。模块文件的出口是一个对象，每个key值是request的method和url。\t\n\n## Nunjucks 模板引擎\n\n### nunjucks.configure()  配置\n\n指定模板文件的位置，配置其他属性\n\n```\nnunjucks.configure('views', {\n  autoescape: true\n});\n```\n\n在上面的代码中，我们将模板文件（xxx.njk）存放在名为`views`的文件夹中。`autoescape`选项用于自动转义输出的内容，以防止XSS攻击。\n\n### 基本语法\n\n我们使用了`{{ a }}`来包裹变量（变量名为a），使用`{% %}`来包裹一些语句（如：if，endif，for，endfor，block aaa，endblock）\n\n### nunjucks.render()\n\n```js\nconst renderedHtml = nunjucks.render('template.njk', { title: 'My Page', items: ['Item 1', 'Item 2', 'Item 3'] });\nconsole.log(renderedHtml);\n```\n\n在上面的代码中，我们使用`render`方法来渲染名为`template.njk`的模板，并传递一个包含`title`和`items`的对象作为模板中的变量。\n\n### 重定义（继承）\n\nbase.html\n\n```\n<html><body>\n{% block header %} <h3>Unnamed</h3> {% endblock %}\n{% block body %} <div>No body</div> {% endblock %}\n{% block footer %} <div>copyright</div> {% endblock %}\n</body>\n```\n\na.html\n\n```\n{% extends 'base.html' %}\n{% block header %}<h1>{{ header }}</h1>{% endblock %}\n{% block body %}<p>{{ body }}</p>{% endblock %}\n```\n\nctx.render\n\n## MVC\n\nMVC：Model-View-Controller，中文名“模型-视图-控制器”\n\n## 拷打问题\n\n- cors()\n- 日志文件\n- .enb\n- 每个response都要有token\n- 前后端分离\n- 加密存储\n\n# Week 6 css\n\n学习的前置知识详见css.md\n\n[tailwindcss](https://tailwindcss.com/docs/installation)\n\n## `./src/**/*.{html,js}` \n\n是一个文件路径模式，用于匹配指定目录下的所有子目录中的 HTML 和 JavaScript 文件。\n\n解析该模式的方式如下：\n\n- `./src/`：表示从当前目录开始，进入 `src` 目录。\n- `**/`：表示匹配任意深度的子目录。\n- `*.{html,js}`：表示匹配任意文件名以 `.html` 或 `.js` 结尾的文件。\n\n### `:before` \n\n是一个 CSS 伪元素选择器，用于在选中元素的内容之前插入生成的内容。它可以用于在元素前面添加装饰性的内容或图标，而无需修改 HTML 结构。\n\n```\n.my-element:before {\n  content: \"→\";\n  color: red;\n}\n```\n\n## tailwindcss\n\n### 配置时注意\n\n在tailwind.config.js的content中写入所有需要使用tailwindcss的文件名\n\n### 基本样式\n\n1. **背景颜色**：`bg-gray-200`：设置背景颜色为灰色（可以根据需求使用不同的颜色代码）。\n\n颜色类名后面的数字从 100 到 900，表示不同的颜色强度。数字越小，颜色越浅，数字越大，颜色越深。\n\n2. **文本颜色**：text-red-200 text-sky-400/50（opacity）\n\n3. **字体大小**：\n\n- `text-xs`：设置字体大小为额外小号。\n- `text-lg`：设置字体大小为大号。\n\n4. 字体粗细：\n\n\t- font-bold\n\t- font-normal\n\t- font-thin\n\t- font-black 巨粗\n4. **内边距和外边距**：\n\n- `p-4`：设置元素的内边距为 4 个间距单位。\n- `m-2`：设置元素的外边距为 2 个间距单位。\n\n5. **宽度和高度**：\n\n- `w-full`：设置元素的宽度为父元素的 100%。\n- `h-1`：设置元素的高度为。\n\n\t当使用 Tailwind CSS 中的 `rem` 单位时，它是相对于根元素（`<html>`）的字体大小（`font-size`）的倍数。默认情况下，根元素的字体大小是 `16px`。\n\n6. **文本对齐**：\n\n- `text-left`：将文本左对齐。\n- `text-center`：将文本居中对齐。\n\n7. **弹性布局**：\n\n- `flex`：将元素设置为弹性容器。\n- `justify-center`：在弹性容器中水平居中对齐子元素。\n\n8. **边框**：\n\n- `border`：为元素添加默认的边框样式。\n- `border-gray-300`：为元素添加灰色边框（可以根据需求使用不同的颜色代码）。\n- `transition` 过渡， duration-150 过渡时间（ms）\n\n### 高级样式\n\n- \"hover:bg-violet-600 active:bg-violet-700\"\n\n- \"odd:bg-white\" 当此元素是第奇数个子元素是，使用白色背景\n\n- *当您需要根据 某些父元素的状态 设置元素的样式时，请使用类`group`标记父元素，并使用`group-*`修饰符`group-hover`来设置目标元素的样式\n\n- 使用和修饰符设置`::before`和`::after`伪元素的样式：`before``after`\n\n  `\"after:content-['*'] after:ml-0.5 after:text-red-500\"` (如果没有content，默认为空字符)\n  \n- 响应式 \n\tTailwind 提供五个默认的断点`sm` >=640px`md` 768px`lg` 1024px`xl` 1280px`2xl` 1536px\n\t\n\t`<img class=\"w-16 md:w-32 lg:w-48\" src=\"...\">`\n\n### 包装class时使用tailwindcss\n\n- `@apply` 语法\n\n  `.menu {  **@apply** p-2 text-gray-900 font-semibold; }` \n\n  尽管使用`@apply`语法可以解决样式复用的问题，但并不推荐在早期就进行抽象，**因为自定义class的做法会生成更多的样式代码，造成生成的css文件变得更大**。\n  \n- 还有一个理由可以证明不使用自定义class会更好：你完全可以通过循环的语法来解决此问题：\n\n    ```vue\n    <template>\n      <div\n        v-for=\"menu in ['首页', '学习TailwindCSS', 'TailwindCSS的设计哲学', '最佳实践']\"\n        :key=\"menu\"\n        class=\"p-2 text-gray-900 font-semibold\">{{{ menu }}}</div>\n    </template>\n    ```\n\n## 杂项\n\n- `object-fit`属性：可以控制图片在容器中的尺寸和位置。将object-fit属性设置为contain可以保持图片的原始比例，并在容器中适应最大尺寸。将object-fit属性设置为cover可以填充整个容器，但可能会裁剪部分图片 [aaa](https://www.bitdegree.org/learn/responsive-image)。\n- 要在 `<div>` 元素内实现文本内容的换行，你可以使用 CSS 的 `white-space` 属性。将 `white-space` 属性设置为 `pre-wrap` 可以保留文本中的换行符，并在需要时自动换行\n- 使用 `join()` 方法，它将数组的所有元素连接成一个字符串，并使用指定的分隔符分隔它们\n","source":"_posts/前端/新人任务学习笔记.md","raw":"---\ntitle: \" 新人任务学习笔记\"\ndate: 2024-02-23 00:00:00\ntags:\n  - 前端\nhidden: true\n---\n# 新人任务学习笔记\n\n# week 1 (keyword:加载/刷新/同步)\n\n更改css样式后需要html刷新一次才能更新\n\njs是同步执行的，邻近的命令会一起执行\n\n创造html子元素有函数\n\n```js\nlet div = document.createElement('div');\ndocument.body.appendChild(div);\n```\n\n# week 2 虚拟 DOM\n\n[vdom学习视频 b站](https://www.bilibili.com/video/BV12T411t796?p=4&vd_source=610d5016ada513f5a725f4e7b2c16173)\n\n[Virtual DOM 的设计与实现](https://nosaid.com/article/virtual-dom#%E7%94%9F%E6%88%90%20VNode)\n\n[手把手教你手写vdom](https://juejin.cn/post/6984784551503790116#heading-31)\n\n## 作用\n\n性能：对 `dom` 的操作是昂贵的，最后在一个合适的时机去一次性更新真实 `dom`\n\n跨平台\n\n## VNode\n\n对象\n\n## diff\n\n检查自从上一期patch后修改了哪些\n\n同一个位置（可能是移动后）若新旧节点key和type一样，则复用（用旧的element（real dom））\n\n否则 重新建一个element（real dom）暴力新建和删除\n\n## patch\n\n根据 diff 对比，把结果反馈到真实 dom 上\n\n## 一些方法\n\ninsertBefore\n\nappendChild（末尾）\n\n（如果有，只是移动）\n\ntagName（大写的标签名）\n\nremoveChild\n\ndocument.createElement\n\nstring.toLowerCase();\n\nNode.parentNode\n\nNode.nextSibling\n\n## vue3优化\n\n事件缓存\n\n静态节点标记\n\n比较方式\n\n- 头和头比\n- 尾和尾比\n- 基于最长递增子序列进行移动/添加/删除\n\n## react diff算法\n\n[111](https://www.jb51.net/article/277184.htm)\n\n直接用key比较，\n\nif (nowindex (这一个新节点对应的老index) < lastindex (上一个新节点对应的老index，已移动过的) ) 移动\n\n## emmet\n\nhttps://juejin.cn/post/7018567571876102151\n\n## 问题\n\n- 不用 for in 用 of\n- const t = [] 因为数组的地址不会改变\n- [Object.freeze()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n\n# week 3 [promise](https://space.bilibili.com/203376774/video)\n\n[参考代码（有些问题）](http://blog.coderyq.cn/index.php/2022/09/22/promise%e7%9a%84%e4%bd%bf%e7%94%a8%e5%92%8c%e6%89%8b%e5%86%99/)\n\n[手把手教你](https://juejin.cn/post/7043758954496655397)\n\n回调函数：把一个函数作为参数传到另一个函数中，这个作为参数的函数就是回调函数\n\n[JavaScript 异步编程指南](https://juejin.cn/column/6965423613981753380)\n\n## for in & for of  遍历对象键值 [JS](JS.md)\n\n- 使用`for...in`循环遍历对象的可枚举属性（包括原型链上的属性）。\n- 使用`for...of`循环遍历可迭代对象，如数组、字符串、Map、Set等。\n- 在处理数组时，尽量避免使用`for...in`循环，以防止意外的结果和性能问题。\n- 在JavaScript中，如果您想要遍历一个对象的键值对，您可以使用 `Object.entries()` 方法。这个方法会返回一个由键值对组成的数组，然后您可以使用 `for...of` 循环或数组的 `forEach()` 方法来遍历这些键值对。\n\n## 基本操作\n\n```js\nconst promise = new Promise((resolve, reject) => {  // 异步操作...  \n    if (/* 异步操作成功 */) {    \n        resolve(result); // 将结果传递给resolve函数  \n    } else {    \n        reject(error); // 将错误信息传递给reject函数  \n    } \n}); \npromise  \n    .then(result => {\n    \t// 处理异步操作成功的结果  \n\t})  \n    .catch(error => {\n    \t// 处理异步操作失败的结果  \n\t});\n```\nnew promise时自动执行promise内函数\n\n- then\n\n  then支持一个或两个函数参数：then(onFulfilled)，then(onFulfilled, onRejected)\n\n  then的返回值是promise，是它的回调函数的返回值\n\n  若不传第二个参数，此promise为rejected时自动返回此promise\n\n    ```js\n    promise\n        .then(result => {console.log(\"1\");return 111});\n    ```\n\n  如果返回的不是promise对象，转换为一个状态为fulfilled，result为返回值的promise对象\n\n  执行时报错变成rejected\n\n- catch\n\n  如果此promise时fulfilled，则直接返回此promise\n\n  否则执行回调函数\n\n- finally\n\n  无论此promise的状态时fulfilled或者rejected，都执行回调函数\n\n  若函数返回rejected状态的promise或有错误，返回此promise或错误\n  \n  否则返回原promise\n\n## 微任务\n\n```js\nconst p = new Promise((resolve, reject) => {\n  setTimeout(() => {console.log(\"promise\"); return resolve(); })\n});\n\nsetTimeout(() => {console.log(\"setTimeout\"); });\n\np.then(res => {console.log(\"then\")});\n\nconsole.log(\"common\");\n\n//console : common promise then setTimeout\n```\n\n创造微任务：queueMicrotask()\n\n## 高级操作\n\n### Promise.all\n\n`Promise.all`方法接收一个由 Promise 实例组成的iterable对象（如数组）作为参数，并返回一个新的 Promise 实例。\n\n若在数组中的所有 Promise 实例都变为`fulfilled`状态后，才会变为`fulfilled`状态，并将每个 Promise 实例的结果值组成一个数组作为自己的result。\n\n如果出现一个变为rejected，立即变为rejected状态，且把第一个rejected的promise的result作为自己的result\n\n## Promise.allSettled()\n\n和all大致一样，但是其返回值result为`[{state:...,result:...},{state:...,result:...},{state:...,result:...}...]`，装所有promise的状态和res\n\n## Promise.race\n\n只要有一个变成fulfilled或rejected状态，就变成那个状态，把这一个的result/error给回调函数\n\n## Promise.resolve()\n\n若参数为promise对象，直接返回promise对象\n\n否则 返回一个新的 Promise 对象，该实例的状态为`fulfilled`，并将传递的参数作为result。\n\n## Promise.reject\n\n返回的promise状态一定是rejected\n\n## async & await\n\nasync 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。\n\n## 杂项\n\nfunction.bind(a);在运行此函数时把函数内的this绑定为a\n\n**`instanceof`** **运算符**用于检测构造函数的 `prototype` 属性是否出现在某个实例对象的原型链上。\n\n三个点（...）真名叫扩展运算符，不管是大括号（[]）、花括号（{}），统统不在话下，全部脱掉脱掉。但是只能脱掉一层，所以\n\nA.call(B, a1, a2) 调用A方法，并且A中的this为B，a1，a2...为A的参数\n\n箭头函数：this固定，不能是构造函数\n\n# week 4 TodeList\n\n## [webpack](https://juejin.cn/post/7101643125117943839)\n\n把所有js和css文件压缩成一个js文件\n\n## 杂项\n\n- `onclick`是一种直接在HTML标签中定义事件处理程序的简便方法，而`click`是通过JavaScript代码动态添加事件监听器的更灵活的方式。\n\n- `indexOf()`：这个方法返回子串在字符串中第一次出现的索引位置。如果找不到子串，则返回-1\n\n- ```\n  // 获取复选框元素\n  const checkbox = document.getElementById(\"myCheckbox\");\n  \n  // 模拟点击复选框\n  checkbox.click();\n  ```\n  \n- `document.querySelector(selector);`\n\n  其中，`selector`是一个字符串，表示要选择的元素的CSS选择器。它可以是元素的标签名、类名、ID、属性等。\n\n  `querySelector`方法返回与选择器匹配的第一个元素，如果没有找到匹配的元素，则返回`null`。如`'div','#id','.class','[a=b]'`\n  \n- `splice` 方法可以用于在数组的指定位置插入元素。它还可以用于删除元素或同时删除和插入元素。\n\n  ```\n  const arr = [1, 2, 3, 4, 5];\n  arr.splice(2, 0, 6);\n  console.log(arr); // 输出: [1, 2, 6, 3, 4, 5]\n  ```\n\n## 响应式布局\n\n响应式布局是一种设计方法，可以使网站或应用程序在不同设备和屏幕尺寸上提供最佳的用户体验。它可以根据用户的设备大小和屏幕分辨率自动调整和适应布局。可以使用媒体查询，弹性布局（flex）等办法。\n\n## 媒体查询\n\n媒体查询是CSS中的一种技术，它允许你根据设备的特性（如屏幕宽度、高度、方向等）应用不同的样式。你可以在CSS中使用媒体查询来定义不同屏幕尺寸下的样式规则。\n\n```css\n/* 在小屏幕上应用不同的样式 */\n@media (max-width: 768px) {\n  /* 在屏幕宽度小于等于768px时应用的样式 */\n}\n\n/* 在大屏幕上应用不同的样式 */\n@media (min-width: 1200px) {\n  /* 在屏幕宽度大于等于1200px时应用的样式 */\n}\n```\n\n通过使用媒体查询，你可以根据不同的屏幕尺寸应用不同的样式，以适应不同的设备。\n\n- html\n\n  `<link rel=\"stylesheet\" href=\"small.css\" media=\"(min-width: 20em)\" />`\n\n- css\n\n  ```css\n  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {  \n  .card {    \n  \tbackground: #bada55;  \n  \t} \n  }\n  ```\n\n- js\n\n  `window.matchMedia()`\n  ```js\n  // Create a condition that targets viewports at least 768px wide\n  const mediaQuery = window.matchMedia('(min-width: 768px)')\n\t\n  function handleTabletChange(e) {\n    // Check if the media query is true\n    if (e.matches) {\n      // Then log the following message to the console\n      console.log('Media Query Matched!')\n    }\n  }\n\t\n  // Register event listener\n  mediaQuery.addListener(handleTabletChange)\n\t\n  // Initial check\n  handleTabletChange(mediaQuery)\n  ```\n\n![媒体查询结构](https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/media-query-anatomy.jpg?resize=2048%2C135&ssl=1)\n\n- media type：如all，print，screen（最常用），speech\n\n- madia feature：如width，min-width，height，min-height，aspect-ratio（宽高比），orientation（屏幕的方向）……其他见文档\n\n- operator：@media 约等于 if\n\n  > The `@media` rule is itself a logical operator that is basically stating that “if” the following types and features are matches, then do some stuff.\n\n  `and`，`,`（or的意思），not\n  \n## 客户端存储技术\n\n#### cookie（少量，不安全）\n\nhttps://cloud.tencent.com/developer/article/1861983\n\n通过document.cookie直接设置cookie\n\n**expires过期时间**：表示什么时间删除`cookie`，即不再发送到服务器。默认情况下浏览器**会话结束后**会删除所有cookie。不过，可以设置删除`cookie`的具体时间，这样即使关闭浏览器`cookie`也会保存在用户的本机上。把过期时间设置为过去的时间就可以实现删除`cookie`\n\ndocument.cookie = '' 添加一个cookie，注意不是覆盖而是添加\n\n### Web Storage (localStorage, sessionStorage)\n\n`localstorage`的存储方式是以==`key-value`==的形式进行存储的，首先我们先了解以下其中的操作方法\n\n1.  `localstorage.length`：获取当前存储中的键值对数量 \n2.  `localstorage.key(index)`：得到某个索引的键值 \n3.  `localstorage.getItem(key)`：读取对应键值的数据 \n4.  `localstorage.setItem(key,value)`：设置对应的键值对，保存数据 \n5.  `localstorage.remove(key)`：清除某个指定数据 \n6.  `localstorage.clear()`：清除存储的所有数据 \n\n### 区别\n\n1. cookie在每次请求时都会被发送到服务器，这样会浪费带宽\n2. cookie中的操作方法需要自己封装，web storage中有`setItem`，`getItem`等方法\n3. cookie能够与服务器端交互，web Storage只是将数据保存在本地\n4. 存储数据的大小限制不一样，`cookie`一般4k，`web Storage`一般5M\n5. 数据的生命周期不一致，cookie能设置时间，本地存储是永久性的，临时存储可以说是一次性的\n6. 作用域不同，`sessionStorage`不在不同的浏览器窗口中共享，`localstorage`和`cookie`在所有同源窗口中都是共享的\n\n## 正则表达式\n\n- 创建： `let a = /ab+c/;` `let a = new RegExp(\"ab+c\");`\n\n- `/ab+c/g ` 全局匹配\n\n- `String.prototype.match(regex);` 返回一个Array，装有所有匹配的字符串\n\n- `String.prototype.search(regex);` 返回第一个匹配的索引位置\n\n- `String.prototype.replace(regex);` `String.prototype.split(regex);`\n\n- `RegExp.exec(String)` 返回详细信息（`[0]`匹配的字符串，`.index`，……）\n\n- 查找所有匹配的索引位置\n  ```js\n  const str = \"hello, hello, hello!\";\n  const regex = /hello/g;\n  let match;\n  const indexes = [];\n  while ((match = regex.exec(str)) !== null) {\n    indexes.push(match.index);\n  }\n  console.log(indexes); // 输出：[0, 7, 14]\n  ```\n  regex内部有一个lastIndex属性\n\n## 拷打问题\n\n- 用localstage\n- f12的应用可以查看cookie和localstage\n- -1 => 常量\n- 模板字符串\n  ```js\n  const message = `Hello, my name is ${name} and I am ${age} years old`;\n  const multiLineString = `\n    This is a\n    multi-line\n    string.\n  `;\n  ```\n\n- 序列化\n\n  内置的 `JSON.stringify()` 方法将对象序列化为 JSON 字符串，反之，如果要将 JSON 字符串反序列化为 JavaScript 对象，可以使用 `JSON.parse()` 方法\n\n- 用find而不用for\n\n- 控制台‘源代码’中的‘网页’可以拷到example的css源码\n\n# Week 5 [koa](https://www.liaoxuefeng.com/wiki/1022910821149312/1099752344192192)\n\n## 杂项\n\n- `<form>`标签是HTML中用于创建表单的元素。它用于包裹表单中的各种输入元素，例如文本框、复选框、单选按钮等。提交request，可以修改url和method。`action`属性指定了表单提交的目标URL，`method`属性指定了表单提交的HTTP方法（例如POST或GET）。浏览器会将每个表单字段的`name`属性与其对应的值一起发送到服务器\n\n- `const files = fs.readdirSync(_dirname)` 然后调用 readdirSync 方法并传入要读取的目录的路径作为参数。该方法会返回一个包含目录中所有文件和子目录的名字的数组\n\n- `Array.prototype.filter` : \n\n  过滤是指从数组中筛选出满足特定条件的元素，然后返回一个新的数组。`filter` 方法接受一个回调函数作为参数，该回调函数会对数组中的每个元素进行评估。如果回调函数返回 `true`，则该元素将被包含在新的数组中，否则将被排除。\n\n  ```\n  var js_files = files.filter((f) => {\n      return f.endsWith('.js');\n  });\n  ```\n\n- `in`运算符用于检查对象`obj`是否具有指定的键。如果对象具有该键，则返回`true`，否则返回`false`\n  \n- 计算属性名 `{[name]:value}` 把变量key的值作为key\n\n- `mime.lookup`是一个函数，用于根据文件扩展名获取对应的 MIME 类型。MIME 类型是一种标识文件类型的方式，它在 Web 开发中常用于指定服务器响应的 Content-Type 头部。\n\n## [JWT（JSON Web Token）](https://juejin.cn/post/7062173044214595597)\n\n由三部分组成：头部（Header）、载荷（Payload）和签名（Signature）。\n\nHeader，Payload是JSON对象，要使用 Base64URL 算法转成字符串。Signature 部分是对前两部分的签名，防止数据篡改。三部分字符串要用`.` 隔开。\n\n生成 Signature 需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256）。\n\n可以使用openssl来生成一对私钥和公钥。（我的电脑上要在 C:\\Users\\27427\\ 里使用）\n\n用Node.js中的 jsonwebtoken 库：\n\n- header自动生成\n\n- `token = jwt.sign(payload, secret)` 生成JWT\n\n- `const decoded = jwt.verify(token, secret);` 验证和解码JWT，返回一个payload\n\n## koa2 基本使用\n\n```js\n// 导入koa，和koa 1.x不同，在koa2中，我们导入的是一个class，因此用大写的Koa表示:\nconst Koa = require('koa');\n\n// 创建一个Koa对象表示web app本身:\nconst app = new Koa();\n\n// 对于任何请求，app将调用该异步函数处理请求：\napp.use(async (ctx, next) => {\n  // 参数ctx是由koa传入的封装了request和response的变量，我们可以通过它访问request和response，next是koa传入的将要处理的下一个异步函数\n  await next();\n  ctx.response.type = 'text/html';\n  ctx.response.body = '<h1>Hello, koa2!</h1>';\n});\n\n// 在端口3000监听:\napp.listen(3000);\nconsole.log('app started at port 3000...');\n```\n\n原因是koa把很多async函数组成一个处理链，每个async函数都可以做一些自己的事情，然后用`await next()`来调用下一个async函数。我们把每个async函数称为**middleware**，这些middleware可以组合起来，完成很多有用的功能。\n\n( request的目标URL告诉服务器请求的资源在哪里可以找到。)\n\n### koa-router\n\n为了处理URL，我们需要引入`koa-router`这个middleware，让它负责处理URL映射。我们使用`router.get('/path', async fn)`来处理一个GET请求。可以在请求路径中使用带变量的`/hello/:name`，变量可以通过`ctx.params.name`访问\n\n要写一个 `app.use(router.routes());` 一般在最后\n\n### koa-bodyparser\n\n另一个middleware来解析原始request请求，然后，把解析后的body对象，绑定到`ctx.request.body`中。\n\n要写一个 `app.use(bodyParser());` ，必须在`router`之前被注册到`app`对象上\n\n### 模块化router\n\n把每个url的router都打包成一个js文件，放在`controllers`目录下，用一些方法让它自动扫描`controllers`目录，找到所有模块文件，导入，然后注册每个URL。模块文件的出口是一个对象，每个key值是request的method和url。\t\n\n## Nunjucks 模板引擎\n\n### nunjucks.configure()  配置\n\n指定模板文件的位置，配置其他属性\n\n```\nnunjucks.configure('views', {\n  autoescape: true\n});\n```\n\n在上面的代码中，我们将模板文件（xxx.njk）存放在名为`views`的文件夹中。`autoescape`选项用于自动转义输出的内容，以防止XSS攻击。\n\n### 基本语法\n\n我们使用了`{{ a }}`来包裹变量（变量名为a），使用`{% %}`来包裹一些语句（如：if，endif，for，endfor，block aaa，endblock）\n\n### nunjucks.render()\n\n```js\nconst renderedHtml = nunjucks.render('template.njk', { title: 'My Page', items: ['Item 1', 'Item 2', 'Item 3'] });\nconsole.log(renderedHtml);\n```\n\n在上面的代码中，我们使用`render`方法来渲染名为`template.njk`的模板，并传递一个包含`title`和`items`的对象作为模板中的变量。\n\n### 重定义（继承）\n\nbase.html\n\n```\n<html><body>\n{% block header %} <h3>Unnamed</h3> {% endblock %}\n{% block body %} <div>No body</div> {% endblock %}\n{% block footer %} <div>copyright</div> {% endblock %}\n</body>\n```\n\na.html\n\n```\n{% extends 'base.html' %}\n{% block header %}<h1>{{ header }}</h1>{% endblock %}\n{% block body %}<p>{{ body }}</p>{% endblock %}\n```\n\nctx.render\n\n## MVC\n\nMVC：Model-View-Controller，中文名“模型-视图-控制器”\n\n## 拷打问题\n\n- cors()\n- 日志文件\n- .enb\n- 每个response都要有token\n- 前后端分离\n- 加密存储\n\n# Week 6 css\n\n学习的前置知识详见css.md\n\n[tailwindcss](https://tailwindcss.com/docs/installation)\n\n## `./src/**/*.{html,js}` \n\n是一个文件路径模式，用于匹配指定目录下的所有子目录中的 HTML 和 JavaScript 文件。\n\n解析该模式的方式如下：\n\n- `./src/`：表示从当前目录开始，进入 `src` 目录。\n- `**/`：表示匹配任意深度的子目录。\n- `*.{html,js}`：表示匹配任意文件名以 `.html` 或 `.js` 结尾的文件。\n\n### `:before` \n\n是一个 CSS 伪元素选择器，用于在选中元素的内容之前插入生成的内容。它可以用于在元素前面添加装饰性的内容或图标，而无需修改 HTML 结构。\n\n```\n.my-element:before {\n  content: \"→\";\n  color: red;\n}\n```\n\n## tailwindcss\n\n### 配置时注意\n\n在tailwind.config.js的content中写入所有需要使用tailwindcss的文件名\n\n### 基本样式\n\n1. **背景颜色**：`bg-gray-200`：设置背景颜色为灰色（可以根据需求使用不同的颜色代码）。\n\n颜色类名后面的数字从 100 到 900，表示不同的颜色强度。数字越小，颜色越浅，数字越大，颜色越深。\n\n2. **文本颜色**：text-red-200 text-sky-400/50（opacity）\n\n3. **字体大小**：\n\n- `text-xs`：设置字体大小为额外小号。\n- `text-lg`：设置字体大小为大号。\n\n4. 字体粗细：\n\n\t- font-bold\n\t- font-normal\n\t- font-thin\n\t- font-black 巨粗\n4. **内边距和外边距**：\n\n- `p-4`：设置元素的内边距为 4 个间距单位。\n- `m-2`：设置元素的外边距为 2 个间距单位。\n\n5. **宽度和高度**：\n\n- `w-full`：设置元素的宽度为父元素的 100%。\n- `h-1`：设置元素的高度为。\n\n\t当使用 Tailwind CSS 中的 `rem` 单位时，它是相对于根元素（`<html>`）的字体大小（`font-size`）的倍数。默认情况下，根元素的字体大小是 `16px`。\n\n6. **文本对齐**：\n\n- `text-left`：将文本左对齐。\n- `text-center`：将文本居中对齐。\n\n7. **弹性布局**：\n\n- `flex`：将元素设置为弹性容器。\n- `justify-center`：在弹性容器中水平居中对齐子元素。\n\n8. **边框**：\n\n- `border`：为元素添加默认的边框样式。\n- `border-gray-300`：为元素添加灰色边框（可以根据需求使用不同的颜色代码）。\n- `transition` 过渡， duration-150 过渡时间（ms）\n\n### 高级样式\n\n- \"hover:bg-violet-600 active:bg-violet-700\"\n\n- \"odd:bg-white\" 当此元素是第奇数个子元素是，使用白色背景\n\n- *当您需要根据 某些父元素的状态 设置元素的样式时，请使用类`group`标记父元素，并使用`group-*`修饰符`group-hover`来设置目标元素的样式\n\n- 使用和修饰符设置`::before`和`::after`伪元素的样式：`before``after`\n\n  `\"after:content-['*'] after:ml-0.5 after:text-red-500\"` (如果没有content，默认为空字符)\n  \n- 响应式 \n\tTailwind 提供五个默认的断点`sm` >=640px`md` 768px`lg` 1024px`xl` 1280px`2xl` 1536px\n\t\n\t`<img class=\"w-16 md:w-32 lg:w-48\" src=\"...\">`\n\n### 包装class时使用tailwindcss\n\n- `@apply` 语法\n\n  `.menu {  **@apply** p-2 text-gray-900 font-semibold; }` \n\n  尽管使用`@apply`语法可以解决样式复用的问题，但并不推荐在早期就进行抽象，**因为自定义class的做法会生成更多的样式代码，造成生成的css文件变得更大**。\n  \n- 还有一个理由可以证明不使用自定义class会更好：你完全可以通过循环的语法来解决此问题：\n\n    ```vue\n    <template>\n      <div\n        v-for=\"menu in ['首页', '学习TailwindCSS', 'TailwindCSS的设计哲学', '最佳实践']\"\n        :key=\"menu\"\n        class=\"p-2 text-gray-900 font-semibold\">{{{ menu }}}</div>\n    </template>\n    ```\n\n## 杂项\n\n- `object-fit`属性：可以控制图片在容器中的尺寸和位置。将object-fit属性设置为contain可以保持图片的原始比例，并在容器中适应最大尺寸。将object-fit属性设置为cover可以填充整个容器，但可能会裁剪部分图片 [aaa](https://www.bitdegree.org/learn/responsive-image)。\n- 要在 `<div>` 元素内实现文本内容的换行，你可以使用 CSS 的 `white-space` 属性。将 `white-space` 属性设置为 `pre-wrap` 可以保留文本中的换行符，并在需要时自动换行\n- 使用 `join()` 方法，它将数组的所有元素连接成一个字符串，并使用指定的分隔符分隔它们\n","slug":"前端/新人任务学习笔记","published":1,"updated":"2024-09-23T03:40:30.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vf0008p4wvbrxy4u0c","content":"<h1 id=\"新人任务学习笔记\"><a href=\"#新人任务学习笔记\" class=\"headerlink\" title=\"新人任务学习笔记\"></a>新人任务学习笔记</h1>\r\n<h1 id=\"week-1-keyword加载刷新同步\"><a href=\"#week-1-keyword加载刷新同步\" class=\"headerlink\" title=\"week-1-keyword加载刷新同步\"></a>week 1 (keyword:加载/刷新/同步)</h1>\r\n<p>更改css样式后需要html刷新一次才能更新</p>\r\n<p>js是同步执行的，邻近的命令会一起执行</p>\r\n<p>创造html子元素有函数</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>);<br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(div);<br></code></pre></td></tr></table></figure>\r\n<h1 id=\"week-2-虚拟-dom\"><a href=\"#week-2-虚拟-dom\" class=\"headerlink\" title=\"week-2-虚拟-dom\"></a>week 2 虚拟 DOM</h1>\r\n<p><a\r\nhref=\"https://www.bilibili.com/video/BV12T411t796?p=4&amp;vd_source=610d5016ada513f5a725f4e7b2c16173\">vdom学习视频\r\nb站</a></p>\r\n<p><a\r\nhref=\"https://nosaid.com/article/virtual-dom#%E7%94%9F%E6%88%90%20VNode\">Virtual\r\nDOM 的设计与实现</a></p>\r\n<p><a\r\nhref=\"https://juejin.cn/post/6984784551503790116#heading-31\">手把手教你手写vdom</a></p>\r\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2>\r\n<p>性能：对 <code>dom</code>\r\n的操作是昂贵的，最后在一个合适的时机去一次性更新真实\r\n<code>dom</code></p>\r\n<p>跨平台</p>\r\n<h2 id=\"vnode\"><a href=\"#vnode\" class=\"headerlink\" title=\"vnode\"></a>VNode</h2>\r\n<p>对象</p>\r\n<h2 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h2>\r\n<p>检查自从上一期patch后修改了哪些</p>\r\n<p>同一个位置（可能是移动后）若新旧节点key和type一样，则复用（用旧的element（real\r\ndom））</p>\r\n<p>否则 重新建一个element（real dom）暴力新建和删除</p>\r\n<h2 id=\"patch\"><a href=\"#patch\" class=\"headerlink\" title=\"patch\"></a>patch</h2>\r\n<p>根据 diff 对比，把结果反馈到真实 dom 上</p>\r\n<h2 id=\"一些方法\"><a href=\"#一些方法\" class=\"headerlink\" title=\"一些方法\"></a>一些方法</h2>\r\n<p>insertBefore</p>\r\n<p>appendChild（末尾）</p>\r\n<p>（如果有，只是移动）</p>\r\n<p>tagName（大写的标签名）</p>\r\n<p>removeChild</p>\r\n<p>document.createElement</p>\r\n<p>string.toLowerCase();</p>\r\n<p>Node.parentNode</p>\r\n<p>Node.nextSibling</p>\r\n<h2 id=\"vue3优化\"><a href=\"#vue3优化\" class=\"headerlink\" title=\"vue3优化\"></a>vue3优化</h2>\r\n<p>事件缓存</p>\r\n<p>静态节点标记</p>\r\n<p>比较方式</p>\r\n<ul>\r\n<li>头和头比</li>\r\n<li>尾和尾比</li>\r\n<li>基于最长递增子序列进行移动/添加/删除</li>\r\n</ul>\r\n<h2 id=\"react-diff算法\"><a href=\"#react-diff算法\" class=\"headerlink\" title=\"react-diff算法\"></a>react diff算法</h2>\r\n<p><a href=\"https://www.jb51.net/article/277184.htm\">111</a></p>\r\n<p>直接用key比较，</p>\r\n<p>if (nowindex (这一个新节点对应的老index) &lt; lastindex\r\n(上一个新节点对应的老index，已移动过的) ) 移动</p>\r\n<h2 id=\"emmet\"><a href=\"#emmet\" class=\"headerlink\" title=\"emmet\"></a>emmet</h2>\r\n<p>https://juejin.cn/post/7018567571876102151</p>\r\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2>\r\n<ul>\r\n<li>不用 for in 用 of</li>\r\n<li>const t = [] 因为数组的地址不会改变</li>\r\n<li><a\r\nhref=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze()</a></li>\r\n</ul>\r\n<h1 id=\"week-3-promise\">week 3 <a\r\nhref=\"https://space.bilibili.com/203376774/video\">promise</a></h1>\r\n<p><a\r\nhref=\"http://blog.coderyq.cn/index.php/2022/09/22/promise%e7%9a%84%e4%bd%bf%e7%94%a8%e5%92%8c%e6%89%8b%e5%86%99/\">参考代码（有些问题）</a></p>\r\n<p><a\r\nhref=\"https://juejin.cn/post/7043758954496655397\">手把手教你</a></p>\r\n<p>回调函数：把一个函数作为参数传到另一个函数中，这个作为参数的函数就是回调函数</p>\r\n<p><a href=\"https://juejin.cn/column/6965423613981753380\">JavaScript\r\n异步编程指南</a></p>\r\n<h2 id=\"for-in-for-of-遍历对象键值-js\">for in &amp; for of 遍历对象键值\r\n<a href=\"JS.md\">JS</a></h2>\r\n<ul>\r\n<li>使用<code>for...in</code>循环遍历对象的可枚举属性（包括原型链上的属性）。</li>\r\n<li>使用<code>for...of</code>循环遍历可迭代对象，如数组、字符串、Map、Set等。</li>\r\n<li>在处理数组时，尽量避免使用<code>for...in</code>循环，以防止意外的结果和性能问题。</li>\r\n<li>在JavaScript中，如果您想要遍历一个对象的键值对，您可以使用 <code>Object.entries()</code> 方法。这个方法会返回一个由键值对组成的数组，然后您可以使用 <code>for...of</code> 循环或数组的 <code>forEach()</code> 方法来遍历这些键值对。</li>\r\n</ul>\r\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;  <span class=\"hljs-comment\">// 异步操作...  </span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-comment\">/* 异步操作成功 */</span>) &#123;    <br>        <span class=\"hljs-title function_\">resolve</span>(result); <span class=\"hljs-comment\">// 将结果传递给resolve函数  </span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;    <br>        <span class=\"hljs-title function_\">reject</span>(error); <span class=\"hljs-comment\">// 将错误信息传递给reject函数  </span><br>    &#125; <br>&#125;); <br>promise  <br>    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> &#123;<br>    \t<span class=\"hljs-comment\">// 处理异步操作成功的结果  </span><br>\t&#125;)  <br>    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;<br>    \t<span class=\"hljs-comment\">// 处理异步操作失败的结果  </span><br>\t&#125;);<br></code></pre></td></tr></table></figure>\r\n<p>new promise时自动执行promise内函数</p>\r\n<ul>\r\n<li><p>then</p>\r\n<p>then支持一个或两个函数参数：then(onFulfilled)，then(onFulfilled,\r\nonRejected)</p>\r\n<p>then的返回值是promise，是它的回调函数的返回值</p>\r\n<p>若不传第二个参数，此promise为rejected时自动返回此promise</p>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">promise<br>    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;1&quot;</span>);<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">111</span>&#125;);<br></code></pre></td></tr></table></figure></p>\r\n<p>如果返回的不是promise对象，转换为一个状态为fulfilled，result为返回值的promise对象</p>\r\n<p>执行时报错变成rejected</p></li>\r\n<li><p>catch</p>\r\n<p>如果此promise时fulfilled，则直接返回此promise</p>\r\n<p>否则执行回调函数</p></li>\r\n<li><p>finally</p>\r\n<p>无论此promise的状态时fulfilled或者rejected，都执行回调函数</p>\r\n<p>若函数返回rejected状态的promise或有错误，返回此promise或错误</p>\r\n<p>否则返回原promise</p></li>\r\n</ul>\r\n<h2 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h2>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;promise&quot;</span>); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">resolve</span>(); &#125;)<br>&#125;);<br><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;setTimeout&quot;</span>); &#125;);<br><br>p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;then&quot;</span>)&#125;);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;common&quot;</span>);<br><br><span class=\"hljs-comment\">//console : common promise then setTimeout</span><br></code></pre></td></tr></table></figure>\r\n<p>创造微任务：queueMicrotask()</p>\r\n<h2 id=\"高级操作\"><a href=\"#高级操作\" class=\"headerlink\" title=\"高级操作\"></a>高级操作</h2>\r\n<h3 id=\"promise.all\"><a href=\"#promise.all\" class=\"headerlink\" title=\"promise.all\"></a>Promise.all</h3>\r\n<p><code>Promise.all</code>方法接收一个由 Promise\r\n实例组成的iterable对象（如数组）作为参数，并返回一个新的 Promise\r\n实例。</p>\r\n<p>若在数组中的所有 Promise\r\n实例都变为<code>fulfilled</code>状态后，才会变为<code>fulfilled</code>状态，并将每个\r\nPromise 实例的结果值组成一个数组作为自己的result。</p>\r\n<p>如果出现一个变为rejected，立即变为rejected状态，且把第一个rejected的promise的result作为自己的result</p>\r\n<h2 id=\"promise.allsettled\"><a href=\"#promise.allsettled\" class=\"headerlink\" title=\"promise.allsettled\"></a>Promise.allSettled()</h2>\r\n<p>和all大致一样，但是其返回值result为<code>[&#123;state:...,result:...&#125;,&#123;state:...,result:...&#125;,&#123;state:...,result:...&#125;...]</code>，装所有promise的状态和res</p>\r\n<h2 id=\"promise.race\"><a href=\"#promise.race\" class=\"headerlink\" title=\"promise.race\"></a>Promise.race</h2>\r\n<p>只要有一个变成fulfilled或rejected状态，就变成那个状态，把这一个的result/error给回调函数</p>\r\n<h2 id=\"promise.resolve\"><a href=\"#promise.resolve\" class=\"headerlink\" title=\"promise.resolve\"></a>Promise.resolve()</h2>\r\n<p>若参数为promise对象，直接返回promise对象</p>\r\n<p>否则 返回一个新的 Promise\r\n对象，该实例的状态为<code>fulfilled</code>，并将传递的参数作为result。</p>\r\n<h2 id=\"promise.reject\"><a href=\"#promise.reject\" class=\"headerlink\" title=\"promise.reject\"></a>Promise.reject</h2>\r\n<p>返回的promise状态一定是rejected</p>\r\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async-await\"></a>async &amp; await</h2>\r\n<p>async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await\r\n就会先暂停执行 ，等到触发的异步操作完成后，恢复 async\r\n函数的执行并返回解析值。</p>\r\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2>\r\n<p>function.bind(a);在运行此函数时把函数内的this绑定为a</p>\r\n<p><strong><code>instanceof</code></strong>\r\n<strong>运算符</strong>用于检测构造函数的 <code>prototype</code>\r\n属性是否出现在某个实例对象的原型链上。</p>\r\n<p>三个点（...）真名叫扩展运算符，不管是大括号（[]）、花括号（{}），统统不在话下，全部脱掉脱掉。但是只能脱掉一层，所以</p>\r\n<p>A.call(B, a1, a2) 调用A方法，并且A中的this为B，a1，a2...为A的参数</p>\r\n<p>箭头函数：this固定，不能是构造函数</p>\r\n<h1 id=\"week-4-todelist\"><a href=\"#week-4-todelist\" class=\"headerlink\" title=\"week-4-todelist\"></a>week 4 TodeList</h1>\r\n<h2 id=\"webpack\"><a\r\nhref=\"https://juejin.cn/post/7101643125117943839\">webpack</a></h2>\r\n<p>把所有js和css文件压缩成一个js文件</p>\r\n<h2 id=\"杂项-1\"><a href=\"#杂项-1\" class=\"headerlink\" title=\"杂项-1\"></a>杂项</h2>\r\n<ul>\r\n<li><p><code>onclick</code>是一种直接在HTML标签中定义事件处理程序的简便方法，而<code>click</code>是通过JavaScript代码动态添加事件监听器的更灵活的方式。</p></li>\r\n<li><p><code>indexOf()</code>：这个方法返回子串在字符串中第一次出现的索引位置。如果找不到子串，则返回-1</p></li>\r\n<li><p>``` // 获取复选框元素 const checkbox =\r\ndocument.getElementById(\"myCheckbox\");</p>\r\n<p>// 模拟点击复选框 checkbox.click(); <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">  <br>- `document.querySelector(selector);`<br><br>  其中，`selector`是一个字符串，表示要选择的元素的CSS选择器。它可以是元素的标签名、类名、ID、属性等。<br><br>  `querySelector`方法返回与选择器匹配的第一个元素，如果没有找到匹配的元素，则返回`null`。如`&#x27;div&#x27;,&#x27;#id&#x27;,&#x27;.class&#x27;,&#x27;[a=b]&#x27;`<br>  <br>- `splice` 方法可以用于在数组的指定位置插入元素。它还可以用于删除元素或同时删除和插入元素。<br><br></code></pre></td></tr></table></figure> const arr = [1, 2,\r\n3, 4, 5]; arr.splice(2, 0, 6); console.log(arr); // 输出: [1, 2, 6, 3,\r\n4, 5] <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"><br>## 响应式布局<br><br>响应式布局是一种设计方法，可以使网站或应用程序在不同设备和屏幕尺寸上提供最佳的用户体验。它可以根据用户的设备大小和屏幕分辨率自动调整和适应布局。可以使用媒体查询，弹性布局（flex）等办法。<br><br>## 媒体查询<br><br>媒体查询是CSS中的一种技术，它允许你根据设备的特性（如屏幕宽度、高度、方向等）应用不同的样式。你可以在CSS中使用媒体查询来定义不同屏幕尺寸下的样式规则。<br><br>```css<br>/* 在小屏幕上应用不同的样式 */<br>@media (max-width: 768px) &#123;<br>  /* 在屏幕宽度小于等于768px时应用的样式 */<br>&#125;<br><br>/* 在大屏幕上应用不同的样式 */<br>@media (min-width: 1200px) &#123;<br>  /* 在屏幕宽度大于等于1200px时应用的样式 */<br>&#125;<br></code></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n<p>通过使用媒体查询，你可以根据不同的屏幕尺寸应用不同的样式，以适应不同的设备。</p>\r\n<ul>\r\n<li><p>html</p>\r\n<p><code>&lt;link rel=\"stylesheet\" href=\"small.css\" media=\"(min-width: 20em)\" /&gt;</code></p></li>\r\n<li><p>css</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">only</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-device-width</span>: <span class=\"hljs-number\">320px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-device-width</span>: <span class=\"hljs-number\">480px</span>) &#123;  <br><span class=\"hljs-selector-class\">.card</span> &#123;    <br>\t<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#bada55</span>;  <br>\t&#125; <br>&#125;<br></code></pre></td></tr></table></figure></li>\r\n<li><p>js</p>\r\n<p><code>window.matchMedia()</code> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Create a condition that targets viewports at least 768px wide</span><br><span class=\"hljs-keyword\">const</span> mediaQuery = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&#x27;(min-width: 768px)&#x27;</span>)<br>\t<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleTabletChange</span>(<span class=\"hljs-params\">e</span>) &#123;<br>  <span class=\"hljs-comment\">// Check if the media query is true</span><br>  <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">matches</span>) &#123;<br>    <span class=\"hljs-comment\">// Then log the following message to the console</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Media Query Matched!&#x27;</span>)<br>  &#125;<br>&#125;<br>\t<br><span class=\"hljs-comment\">// Register event listener</span><br>mediaQuery.<span class=\"hljs-title function_\">addListener</span>(handleTabletChange)<br>\t<br><span class=\"hljs-comment\">// Initial check</span><br><span class=\"hljs-title function_\">handleTabletChange</span>(mediaQuery)<br></code></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n<figure>\r\n<img\r\nsrc=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/media-query-anatomy.jpg?resize=2048%2C135&amp;ssl=1\"\r\nalt=\"媒体查询结构\" />\r\n<figcaption aria-hidden=\"true\">媒体查询结构</figcaption>\r\n</figure>\r\n<ul>\r\n<li><p>media type：如all，print，screen（最常用），speech</p></li>\r\n<li><p>madia\r\nfeature：如width，min-width，height，min-height，aspect-ratio（宽高比），orientation（屏幕的方向）……其他见文档</p></li>\r\n<li><p>operator：<span class=\"citation\" data-cites=\"media\">@media</span>\r\n约等于 if</p>\r\n<blockquote>\r\n<p>The <code>@media</code> rule is itself a logical operator that is\r\nbasically stating that “if” the following types and features are\r\nmatches, then do some stuff.</p>\r\n</blockquote>\r\n<p><code>and</code>，<code>,</code>（or的意思），not</p></li>\r\n</ul>\r\n<h2 id=\"客户端存储技术\"><a href=\"#客户端存储技术\" class=\"headerlink\" title=\"客户端存储技术\"></a>客户端存储技术</h2>\r\n<h4 id=\"cookie少量不安全\"><a href=\"#cookie少量不安全\" class=\"headerlink\" title=\"cookie少量不安全\"></a>cookie（少量，不安全）</h4>\r\n<p>https://cloud.tencent.com/developer/article/1861983</p>\r\n<p>通过document.cookie直接设置cookie</p>\r\n<p><strong>expires过期时间</strong>：表示什么时间删除<code>cookie</code>，即不再发送到服务器。默认情况下浏览器<strong>会话结束后</strong>会删除所有cookie。不过，可以设置删除<code>cookie</code>的具体时间，这样即使关闭浏览器<code>cookie</code>也会保存在用户的本机上。把过期时间设置为过去的时间就可以实现删除<code>cookie</code></p>\r\n<p>document.cookie = '' 添加一个cookie，注意不是覆盖而是添加</p>\r\n<h3 id=\"web-storage-localstorage-sessionstorage\">Web Storage\r\n(localStorage, sessionStorage)</h3>\r\n<p><code>localstorage</code>的存储方式是以==<code>key-value</code>==的形式进行存储的，首先我们先了解以下其中的操作方法</p>\r\n<ol type=\"1\">\r\n<li><code>localstorage.length</code>：获取当前存储中的键值对数量</li>\r\n<li><code>localstorage.key(index)</code>：得到某个索引的键值</li>\r\n<li><code>localstorage.getItem(key)</code>：读取对应键值的数据</li>\r\n<li><code>localstorage.setItem(key,value)</code>：设置对应的键值对，保存数据</li>\r\n<li><code>localstorage.remove(key)</code>：清除某个指定数据</li>\r\n<li><code>localstorage.clear()</code>：清除存储的所有数据</li>\r\n</ol>\r\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3>\r\n<ol type=\"1\">\r\n<li>cookie在每次请求时都会被发送到服务器，这样会浪费带宽</li>\r\n<li>cookie中的操作方法需要自己封装，web\r\nstorage中有<code>setItem</code>，<code>getItem</code>等方法</li>\r\n<li>cookie能够与服务器端交互，web Storage只是将数据保存在本地</li>\r\n<li>存储数据的大小限制不一样，<code>cookie</code>一般4k，<code>web Storage</code>一般5M</li>\r\n<li>数据的生命周期不一致，cookie能设置时间，本地存储是永久性的，临时存储可以说是一次性的</li>\r\n<li>作用域不同，<code>sessionStorage</code>不在不同的浏览器窗口中共享，<code>localstorage</code>和<code>cookie</code>在所有同源窗口中都是共享的</li>\r\n</ol>\r\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2>\r\n<ul>\r\n<li><p>创建： <code>let a = /ab+c/;</code>\r\n<code>let a = new RegExp(\"ab+c\");</code></p></li>\r\n<li><p><code>/ab+c/g</code> 全局匹配</p></li>\r\n<li><p><code>String.prototype.match(regex);</code>\r\n返回一个Array，装有所有匹配的字符串</p></li>\r\n<li><p><code>String.prototype.search(regex);</code>\r\n返回第一个匹配的索引位置</p></li>\r\n<li><p><code>String.prototype.replace(regex);</code>\r\n<code>String.prototype.split(regex);</code></p></li>\r\n<li><p><code>RegExp.exec(String)</code>\r\n返回详细信息（<code>[0]</code>匹配的字符串，<code>.index</code>，……）</p></li>\r\n<li><p>查找所有匹配的索引位置 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&quot;hello, hello, hello!&quot;</span>;<br><span class=\"hljs-keyword\">const</span> regex = <span class=\"hljs-regexp\">/hello/g</span>;<br><span class=\"hljs-keyword\">let</span> match;<br><span class=\"hljs-keyword\">const</span> indexes = [];<br><span class=\"hljs-keyword\">while</span> ((match = regex.<span class=\"hljs-title function_\">exec</span>(str)) !== <span class=\"hljs-literal\">null</span>) &#123;<br>  indexes.<span class=\"hljs-title function_\">push</span>(match.<span class=\"hljs-property\">index</span>);<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(indexes); <span class=\"hljs-comment\">// 输出：[0, 7, 14]</span><br></code></pre></td></tr></table></figure>\r\nregex内部有一个lastIndex属性</p></li>\r\n</ul>\r\n<h2 id=\"拷打问题\"><a href=\"#拷打问题\" class=\"headerlink\" title=\"拷打问题\"></a>拷打问题</h2>\r\n<ul>\r\n<li><p>用localstage</p></li>\r\n<li><p>f12的应用可以查看cookie和localstage</p></li>\r\n<li><p>-1 =&gt; 常量</p></li>\r\n<li><p>模板字符串 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">$&#123;name&#125;</span> and I am <span class=\"hljs-subst\">$&#123;age&#125;</span> years old`</span>;<br><span class=\"hljs-keyword\">const</span> multiLineString = <span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">  This is a</span><br><span class=\"hljs-string\">  multi-line</span><br><span class=\"hljs-string\">  string.</span><br><span class=\"hljs-string\">`</span>;<br></code></pre></td></tr></table></figure></p></li>\r\n<li><p>序列化</p>\r\n<p>内置的 <code>JSON.stringify()</code> 方法将对象序列化为 JSON\r\n字符串，反之，如果要将 JSON 字符串反序列化为 JavaScript 对象，可以使用\r\n<code>JSON.parse()</code> 方法</p></li>\r\n<li><p>用find而不用for</p></li>\r\n<li><p>控制台‘源代码’中的‘网页’可以拷到example的css源码</p></li>\r\n</ul>\r\n<h1 id=\"week-5-koa\">Week 5 <a\r\nhref=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1099752344192192\">koa</a></h1>\r\n<h2 id=\"杂项-2\"><a href=\"#杂项-2\" class=\"headerlink\" title=\"杂项-2\"></a>杂项</h2>\r\n<ul>\r\n<li><p><code>&lt;form&gt;</code>标签是HTML中用于创建表单的元素。它用于包裹表单中的各种输入元素，例如文本框、复选框、单选按钮等。提交request，可以修改url和method。<code>action</code>属性指定了表单提交的目标URL，<code>method</code>属性指定了表单提交的HTTP方法（例如POST或GET）。浏览器会将每个表单字段的<code>name</code>属性与其对应的值一起发送到服务器</p></li>\r\n<li><p><code>const files = fs.readdirSync(_dirname)</code> 然后调用\r\nreaddirSync\r\n方法并传入要读取的目录的路径作为参数。该方法会返回一个包含目录中所有文件和子目录的名字的数组</p></li>\r\n<li><p><code>Array.prototype.filter</code> :</p>\r\n<p>过滤是指从数组中筛选出满足特定条件的元素，然后返回一个新的数组。<code>filter</code>\r\n方法接受一个回调函数作为参数，该回调函数会对数组中的每个元素进行评估。如果回调函数返回\r\n<code>true</code>，则该元素将被包含在新的数组中，否则将被排除。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">var js_files = files.filter((f) =&gt; &#123;<br>    return f.endsWith(&#x27;.js&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure></li>\r\n<li><p><code>in</code>运算符用于检查对象<code>obj</code>是否具有指定的键。如果对象具有该键，则返回<code>true</code>，否则返回<code>false</code></p></li>\r\n<li><p>计算属性名 <code>&#123;[name]:value&#125;</code>\r\n把变量key的值作为key</p></li>\r\n<li><p><code>mime.lookup</code>是一个函数，用于根据文件扩展名获取对应的\r\nMIME 类型。MIME 类型是一种标识文件类型的方式，它在 Web\r\n开发中常用于指定服务器响应的 Content-Type 头部。</p></li>\r\n</ul>\r\n<h2 id=\"jwtjson-web-token\"><a\r\nhref=\"https://juejin.cn/post/7062173044214595597\">JWT（JSON Web\r\nToken）</a></h2>\r\n<p>由三部分组成：头部（Header）、载荷（Payload）和签名（Signature）。</p>\r\n<p>Header，Payload是JSON对象，要使用 Base64URL 算法转成字符串。Signature\r\n部分是对前两部分的签名，防止数据篡改。三部分字符串要用<code>.</code>\r\n隔开。</p>\r\n<p>生成 Signature\r\n需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用\r\nHeader 里面指定的签名算法（默认是 HMAC SHA256）。</p>\r\n<p>可以使用openssl来生成一对私钥和公钥。（我的电脑上要在\r\nC:\\27427 里使用）</p>\r\n<p>用Node.js中的 jsonwebtoken 库：</p>\r\n<ul>\r\n<li><p>header自动生成</p></li>\r\n<li><p><code>token = jwt.sign(payload, secret)</code> 生成JWT</p></li>\r\n<li><p><code>const decoded = jwt.verify(token, secret);</code>\r\n验证和解码JWT，返回一个payload</p></li>\r\n</ul>\r\n<h2 id=\"koa2-基本使用\"><a href=\"#koa2-基本使用\" class=\"headerlink\" title=\"koa2-基本使用\"></a>koa2 基本使用</h2>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 导入koa，和koa 1.x不同，在koa2中，我们导入的是一个class，因此用大写的Koa表示:</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Koa</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa&#x27;</span>);<br><br><span class=\"hljs-comment\">// 创建一个Koa对象表示web app本身:</span><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Koa</span>();<br><br><span class=\"hljs-comment\">// 对于任何请求，app将调用该异步函数处理请求：</span><br>app.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">async</span> (ctx, next) =&gt; &#123;<br>  <span class=\"hljs-comment\">// 参数ctx是由koa传入的封装了request和response的变量，我们可以通过它访问request和response，next是koa传入的将要处理的下一个异步函数</span><br>  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">next</span>();<br>  ctx.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">type</span> = <span class=\"hljs-string\">&#x27;text/html&#x27;</span>;<br>  ctx.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">body</span> = <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello, koa2!&lt;/h1&gt;&#x27;</span>;<br>&#125;);<br><br><span class=\"hljs-comment\">// 在端口3000监听:</span><br>app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;app started at port 3000...&#x27;</span>);<br></code></pre></td></tr></table></figure>\r\n<p>原因是koa把很多async函数组成一个处理链，每个async函数都可以做一些自己的事情，然后用<code>await next()</code>来调用下一个async函数。我们把每个async函数称为<strong>middleware</strong>，这些middleware可以组合起来，完成很多有用的功能。</p>\r\n<p>( request的目标URL告诉服务器请求的资源在哪里可以找到。)</p>\r\n<h3 id=\"koa-router\"><a href=\"#koa-router\" class=\"headerlink\" title=\"koa-router\"></a>koa-router</h3>\r\n<p>为了处理URL，我们需要引入<code>koa-router</code>这个middleware，让它负责处理URL映射。我们使用<code>router.get('/path', async fn)</code>来处理一个GET请求。可以在请求路径中使用带变量的<code>/hello/:name</code>，变量可以通过<code>ctx.params.name</code>访问</p>\r\n<p>要写一个 <code>app.use(router.routes());</code> 一般在最后</p>\r\n<h3 id=\"koa-bodyparser\"><a href=\"#koa-bodyparser\" class=\"headerlink\" title=\"koa-bodyparser\"></a>koa-bodyparser</h3>\r\n<p>另一个middleware来解析原始request请求，然后，把解析后的body对象，绑定到<code>ctx.request.body</code>中。</p>\r\n<p>要写一个 <code>app.use(bodyParser());</code>\r\n，必须在<code>router</code>之前被注册到<code>app</code>对象上</p>\r\n<h3 id=\"模块化router\"><a href=\"#模块化router\" class=\"headerlink\" title=\"模块化router\"></a>模块化router</h3>\r\n<p>把每个url的router都打包成一个js文件，放在<code>controllers</code>目录下，用一些方法让它自动扫描<code>controllers</code>目录，找到所有模块文件，导入，然后注册每个URL。模块文件的出口是一个对象，每个key值是request的method和url。</p>\r\n<h2 id=\"nunjucks-模板引擎\"><a href=\"#nunjucks-模板引擎\" class=\"headerlink\" title=\"nunjucks-模板引擎\"></a>Nunjucks 模板引擎</h2>\r\n<h3 id=\"nunjucks.configure-配置\"><a href=\"#nunjucks.configure-配置\" class=\"headerlink\" title=\"nunjucks.configure-配置\"></a>nunjucks.configure() 配置</h3>\r\n<p>指定模板文件的位置，配置其他属性</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">nunjucks.configure(&#x27;views&#x27;, &#123;<br>  autoescape: true<br>&#125;);<br></code></pre></td></tr></table></figure>\r\n<p>在上面的代码中，我们将模板文件（xxx.njk）存放在名为<code>views</code>的文件夹中。<code>autoescape</code>选项用于自动转义输出的内容，以防止XSS攻击。</p>\r\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3>\r\n<p>我们使用了<code>&#123;&#123; a &#125;&#125;</code>来包裹变量（变量名为a），使用<code>&#123;% %&#125;</code>来包裹一些语句（如：if，endif，for，endfor，block\r\naaa，endblock）</p>\r\n<h3 id=\"nunjucks.render\"><a href=\"#nunjucks.render\" class=\"headerlink\" title=\"nunjucks.render\"></a>nunjucks.render()</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> renderedHtml = nunjucks.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;template.njk&#x27;</span>, &#123; <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;My Page&#x27;</span>, <span class=\"hljs-attr\">items</span>: [<span class=\"hljs-string\">&#x27;Item 1&#x27;</span>, <span class=\"hljs-string\">&#x27;Item 2&#x27;</span>, <span class=\"hljs-string\">&#x27;Item 3&#x27;</span>] &#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(renderedHtml);<br></code></pre></td></tr></table></figure>\r\n<p>在上面的代码中，我们使用<code>render</code>方法来渲染名为<code>template.njk</code>的模板，并传递一个包含<code>title</code>和<code>items</code>的对象作为模板中的变量。</p>\r\n<h3 id=\"重定义继承\"><a href=\"#重定义继承\" class=\"headerlink\" title=\"重定义继承\"></a>重定义（继承）</h3>\r\n<p>base.html</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;html&gt;&lt;body&gt;<br>&#123;% block header %&#125; &lt;h3&gt;Unnamed&lt;/h3&gt; &#123;% endblock %&#125;<br>&#123;% block body %&#125; &lt;div&gt;No body&lt;/div&gt; &#123;% endblock %&#125;<br>&#123;% block footer %&#125; &lt;div&gt;copyright&lt;/div&gt; &#123;% endblock %&#125;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>\r\n<p>a.html</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">&#123;% extends &#x27;base.html&#x27; %&#125;<br>&#123;% block header %&#125;&lt;h1&gt;&#123;&#123; header &#125;&#125;&lt;/h1&gt;&#123;% endblock %&#125;<br>&#123;% block body %&#125;&lt;p&gt;&#123;&#123; body &#125;&#125;&lt;/p&gt;&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\r\n<p>ctx.render</p>\r\n<h2 id=\"mvc\"><a href=\"#mvc\" class=\"headerlink\" title=\"mvc\"></a>MVC</h2>\r\n<p>MVC：Model-View-Controller，中文名“模型-视图-控制器”</p>\r\n<h2 id=\"拷打问题-1\"><a href=\"#拷打问题-1\" class=\"headerlink\" title=\"拷打问题-1\"></a>拷打问题</h2>\r\n<ul>\r\n<li>cors()</li>\r\n<li>日志文件</li>\r\n<li>.enb</li>\r\n<li>每个response都要有token</li>\r\n<li>前后端分离</li>\r\n<li>加密存储</li>\r\n</ul>\r\n<h1 id=\"week-6-css\"><a href=\"#week-6-css\" class=\"headerlink\" title=\"week-6-css\"></a>Week 6 css</h1>\r\n<p>学习的前置知识详见css.md</p>\r\n<p><a\r\nhref=\"https://tailwindcss.com/docs/installation\">tailwindcss</a></p>\r\n<h2 id=\"src.htmljs\"><a href=\"#src.htmljs\" class=\"headerlink\" title=\"src.htmljs\"></a><code>./src/**/*.&#123;html,js&#125;</code></h2>\r\n<p>是一个文件路径模式，用于匹配指定目录下的所有子目录中的 HTML 和\r\nJavaScript 文件。</p>\r\n<p>解析该模式的方式如下：</p>\r\n<ul>\r\n<li><code>./src/</code>：表示从当前目录开始，进入 <code>src</code>\r\n目录。</li>\r\n<li><code>**/</code>：表示匹配任意深度的子目录。</li>\r\n<li><code>*.&#123;html,js&#125;</code>：表示匹配任意文件名以 <code>.html</code> 或\r\n<code>.js</code> 结尾的文件。</li>\r\n</ul>\r\n<h3 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a><code>:before</code></h3>\r\n<p>是一个 CSS\r\n伪元素选择器，用于在选中元素的内容之前插入生成的内容。它可以用于在元素前面添加装饰性的内容或图标，而无需修改\r\nHTML 结构。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">.my-element:before &#123;<br>  content: &quot;→&quot;;<br>  color: red;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"tailwindcss\"><a href=\"#tailwindcss\" class=\"headerlink\" title=\"tailwindcss\"></a>tailwindcss</h2>\r\n<h3 id=\"配置时注意\"><a href=\"#配置时注意\" class=\"headerlink\" title=\"配置时注意\"></a>配置时注意</h3>\r\n<p>在tailwind.config.js的content中写入所有需要使用tailwindcss的文件名</p>\r\n<h3 id=\"基本样式\"><a href=\"#基本样式\" class=\"headerlink\" title=\"基本样式\"></a>基本样式</h3>\r\n<ol type=\"1\">\r\n<li><strong>背景颜色</strong>：<code>bg-gray-200</code>：设置背景颜色为灰色（可以根据需求使用不同的颜色代码）。</li>\r\n</ol>\r\n<p>颜色类名后面的数字从 100 到\r\n900，表示不同的颜色强度。数字越小，颜色越浅，数字越大，颜色越深。</p>\r\n<ol start=\"2\" type=\"1\">\r\n<li><p><strong>文本颜色</strong>：text-red-200\r\ntext-sky-400/50（opacity）</p></li>\r\n<li><p><strong>字体大小</strong>：</p></li>\r\n</ol>\r\n<ul>\r\n<li><code>text-xs</code>：设置字体大小为额外小号。</li>\r\n<li><code>text-lg</code>：设置字体大小为大号。</li>\r\n</ul>\r\n<ol start=\"4\" type=\"1\">\r\n<li><p>字体粗细：</p>\r\n<ul>\r\n<li>font-bold</li>\r\n<li>font-normal</li>\r\n<li>font-thin</li>\r\n<li>font-black 巨粗</li>\r\n</ul></li>\r\n<li><p><strong>内边距和外边距</strong>：</p></li>\r\n</ol>\r\n<ul>\r\n<li><code>p-4</code>：设置元素的内边距为 4 个间距单位。</li>\r\n<li><code>m-2</code>：设置元素的外边距为 2 个间距单位。</li>\r\n</ul>\r\n<ol start=\"5\" type=\"1\">\r\n<li><strong>宽度和高度</strong>：</li>\r\n</ol>\r\n<ul>\r\n<li><p><code>w-full</code>：设置元素的宽度为父元素的 100%。</p></li>\r\n<li><p><code>h-1</code>：设置元素的高度为。</p>\r\n<p>当使用 Tailwind CSS 中的 <code>rem</code>\r\n单位时，它是相对于根元素（<code>&lt;html&gt;</code>）的字体大小（<code>font-size</code>）的倍数。默认情况下，根元素的字体大小是\r\n<code>16px</code>。</p></li>\r\n</ul>\r\n<ol start=\"6\" type=\"1\">\r\n<li><strong>文本对齐</strong>：</li>\r\n</ol>\r\n<ul>\r\n<li><code>text-left</code>：将文本左对齐。</li>\r\n<li><code>text-center</code>：将文本居中对齐。</li>\r\n</ul>\r\n<ol start=\"7\" type=\"1\">\r\n<li><strong>弹性布局</strong>：</li>\r\n</ol>\r\n<ul>\r\n<li><code>flex</code>：将元素设置为弹性容器。</li>\r\n<li><code>justify-center</code>：在弹性容器中水平居中对齐子元素。</li>\r\n</ul>\r\n<ol start=\"8\" type=\"1\">\r\n<li><strong>边框</strong>：</li>\r\n</ol>\r\n<ul>\r\n<li><code>border</code>：为元素添加默认的边框样式。</li>\r\n<li><code>border-gray-300</code>：为元素添加灰色边框（可以根据需求使用不同的颜色代码）。</li>\r\n<li><code>transition</code> 过渡， duration-150 过渡时间（ms）</li>\r\n</ul>\r\n<h3 id=\"高级样式\"><a href=\"#高级样式\" class=\"headerlink\" title=\"高级样式\"></a>高级样式</h3>\r\n<ul>\r\n<li><p>\"hover:bg-violet-600 active:bg-violet-700\"</p></li>\r\n<li><p>\"odd:bg-white\" 当此元素是第奇数个子元素是，使用白色背景</p></li>\r\n<li><p>*当您需要根据 某些父元素的状态\r\n设置元素的样式时，请使用类<code>group</code>标记父元素，并使用<code>group-*</code>修饰符<code>group-hover</code>来设置目标元素的样式</p></li>\r\n<li><p>使用和修饰符设置<code>::before</code>和<code>::after</code>伪元素的样式：<code>before``after</code></p>\r\n<p><code>\"after:content-['*'] after:ml-0.5 after:text-red-500\"</code>\r\n(如果没有content，默认为空字符)</p></li>\r\n<li><p>响应式 Tailwind 提供五个默认的断点<code>sm</code>\r\n&gt;=640px<code>md</code> 768px<code>lg</code> 1024px<code>xl</code>\r\n1280px<code>2xl</code> 1536px</p>\r\n<p><code>&lt;img class=\"w-16 md:w-32 lg:w-48\" src=\"...\"&gt;</code></p></li>\r\n</ul>\r\n<h3 id=\"包装class时使用tailwindcss\"><a href=\"#包装class时使用tailwindcss\" class=\"headerlink\" title=\"包装class时使用tailwindcss\"></a>包装class时使用tailwindcss</h3>\r\n<ul>\r\n<li><p><code>@apply</code> 语法</p>\r\n<p><code>.menu &#123;  **@apply** p-2 text-gray-900 font-semibold; &#125;</code></p>\r\n<p>尽管使用<code>@apply</code>语法可以解决样式复用的问题，但并不推荐在早期就进行抽象，<strong>因为自定义class的做法会生成更多的样式代码，造成生成的css文件变得更大</strong>。</p></li>\r\n<li><p>还有一个理由可以证明不使用自定义class会更好：你完全可以通过循环的语法来解决此问题：</p>\r\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div<br>    v-for=&quot;menu in [&#x27;首页&#x27;, &#x27;学习TailwindCSS&#x27;, &#x27;TailwindCSS的设计哲学&#x27;, &#x27;最佳实践&#x27;]&quot;<br>    :key=&quot;menu&quot;<br>    class=&quot;p-2 text-gray-900 font-semibold&quot;&gt;&#123;&#123;&#123; menu &#125;&#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n<h2 id=\"杂项-3\"><a href=\"#杂项-3\" class=\"headerlink\" title=\"杂项-3\"></a>杂项</h2>\r\n<ul>\r\n<li><code>object-fit</code>属性：可以控制图片在容器中的尺寸和位置。将object-fit属性设置为contain可以保持图片的原始比例，并在容器中适应最大尺寸。将object-fit属性设置为cover可以填充整个容器，但可能会裁剪部分图片\r\n<a\r\nhref=\"https://www.bitdegree.org/learn/responsive-image\">aaa</a>。</li>\r\n<li>要在 <code>&lt;div&gt;</code> 元素内实现文本内容的换行，你可以使用\r\nCSS 的 <code>white-space</code> 属性。将 <code>white-space</code>\r\n属性设置为 <code>pre-wrap</code>\r\n可以保留文本中的换行符，并在需要时自动换行</li>\r\n<li>使用 <code>join()</code>\r\n方法，它将数组的所有元素连接成一个字符串，并使用指定的分隔符分隔它们</li>\r\n</ul>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<h1 id=\"新人任务学习笔记\"><a href=\"#新人任务学习笔记\" class=\"headerlink\" title=\"新人任务学习笔记\"></a>新人任务学习笔记</h1>\r\n<h1 id=\"week-1-keyword加载刷新同步\"><a href=\"#week-1-keyword加载刷新同步\" class=\"headerlink\" title=\"week-1-keyword加载刷新同步\"></a>week 1 (keyword:加载/刷新/同步)</h1>\r\n<p>更改css样式后需要html刷新一次才能更新</p>\r\n<p>js是同步执行的，邻近的命令会一起执行</p>\r\n<p>创造html子元素有函数</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>);<br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(div);<br></code></pre></td></tr></table></figure>\r\n<h1 id=\"week-2-虚拟-dom\"><a href=\"#week-2-虚拟-dom\" class=\"headerlink\" title=\"week-2-虚拟-dom\"></a>week 2 虚拟 DOM</h1>\r\n<p><a\r\nhref=\"https://www.bilibili.com/video/BV12T411t796?p=4&amp;vd_source=610d5016ada513f5a725f4e7b2c16173\">vdom学习视频\r\nb站</a></p>\r\n<p><a\r\nhref=\"https://nosaid.com/article/virtual-dom#%E7%94%9F%E6%88%90%20VNode\">Virtual\r\nDOM 的设计与实现</a></p>\r\n<p><a\r\nhref=\"https://juejin.cn/post/6984784551503790116#heading-31\">手把手教你手写vdom</a></p>\r\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2>\r\n<p>性能：对 <code>dom</code>\r\n的操作是昂贵的，最后在一个合适的时机去一次性更新真实\r\n<code>dom</code></p>\r\n<p>跨平台</p>\r\n<h2 id=\"vnode\"><a href=\"#vnode\" class=\"headerlink\" title=\"vnode\"></a>VNode</h2>\r\n<p>对象</p>\r\n<h2 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h2>\r\n<p>检查自从上一期patch后修改了哪些</p>\r\n<p>同一个位置（可能是移动后）若新旧节点key和type一样，则复用（用旧的element（real\r\ndom））</p>\r\n<p>否则 重新建一个element（real dom）暴力新建和删除</p>\r\n<h2 id=\"patch\"><a href=\"#patch\" class=\"headerlink\" title=\"patch\"></a>patch</h2>\r\n<p>根据 diff 对比，把结果反馈到真实 dom 上</p>\r\n<h2 id=\"一些方法\"><a href=\"#一些方法\" class=\"headerlink\" title=\"一些方法\"></a>一些方法</h2>\r\n<p>insertBefore</p>\r\n<p>appendChild（末尾）</p>\r\n<p>（如果有，只是移动）</p>\r\n<p>tagName（大写的标签名）</p>\r\n<p>removeChild</p>\r\n<p>document.createElement</p>\r\n<p>string.toLowerCase();</p>\r\n<p>Node.parentNode</p>\r\n<p>Node.nextSibling</p>\r\n<h2 id=\"vue3优化\"><a href=\"#vue3优化\" class=\"headerlink\" title=\"vue3优化\"></a>vue3优化</h2>\r\n<p>事件缓存</p>\r\n<p>静态节点标记</p>\r\n<p>比较方式</p>\r\n<ul>\r\n<li>头和头比</li>\r\n<li>尾和尾比</li>\r\n<li>基于最长递增子序列进行移动/添加/删除</li>\r\n</ul>\r\n<h2 id=\"react-diff算法\"><a href=\"#react-diff算法\" class=\"headerlink\" title=\"react-diff算法\"></a>react diff算法</h2>\r\n<p><a href=\"https://www.jb51.net/article/277184.htm\">111</a></p>\r\n<p>直接用key比较，</p>\r\n<p>if (nowindex (这一个新节点对应的老index) &lt; lastindex\r\n(上一个新节点对应的老index，已移动过的) ) 移动</p>\r\n<h2 id=\"emmet\"><a href=\"#emmet\" class=\"headerlink\" title=\"emmet\"></a>emmet</h2>\r\n<p>https://juejin.cn/post/7018567571876102151</p>\r\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2>\r\n<ul>\r\n<li>不用 for in 用 of</li>\r\n<li>const t = [] 因为数组的地址不会改变</li>\r\n<li><a\r\nhref=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze()</a></li>\r\n</ul>\r\n<h1 id=\"week-3-promise\">week 3 <a\r\nhref=\"https://space.bilibili.com/203376774/video\">promise</a></h1>\r\n<p><a\r\nhref=\"http://blog.coderyq.cn/index.php/2022/09/22/promise%e7%9a%84%e4%bd%bf%e7%94%a8%e5%92%8c%e6%89%8b%e5%86%99/\">参考代码（有些问题）</a></p>\r\n<p><a\r\nhref=\"https://juejin.cn/post/7043758954496655397\">手把手教你</a></p>\r\n<p>回调函数：把一个函数作为参数传到另一个函数中，这个作为参数的函数就是回调函数</p>\r\n<p><a href=\"https://juejin.cn/column/6965423613981753380\">JavaScript\r\n异步编程指南</a></p>\r\n<h2 id=\"for-in-for-of-遍历对象键值-js\">for in &amp; for of 遍历对象键值\r\n<a href=\"JS.md\">JS</a></h2>\r\n<ul>\r\n<li>使用<code>for...in</code>循环遍历对象的可枚举属性（包括原型链上的属性）。</li>\r\n<li>使用<code>for...of</code>循环遍历可迭代对象，如数组、字符串、Map、Set等。</li>\r\n<li>在处理数组时，尽量避免使用<code>for...in</code>循环，以防止意外的结果和性能问题。</li>\r\n<li>在JavaScript中，如果您想要遍历一个对象的键值对，您可以使用 <code>Object.entries()</code> 方法。这个方法会返回一个由键值对组成的数组，然后您可以使用 <code>for...of</code> 循环或数组的 <code>forEach()</code> 方法来遍历这些键值对。</li>\r\n</ul>\r\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;  <span class=\"hljs-comment\">// 异步操作...  </span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-comment\">/* 异步操作成功 */</span>) &#123;    <br>        <span class=\"hljs-title function_\">resolve</span>(result); <span class=\"hljs-comment\">// 将结果传递给resolve函数  </span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;    <br>        <span class=\"hljs-title function_\">reject</span>(error); <span class=\"hljs-comment\">// 将错误信息传递给reject函数  </span><br>    &#125; <br>&#125;); <br>promise  <br>    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> &#123;<br>    \t<span class=\"hljs-comment\">// 处理异步操作成功的结果  </span><br>\t&#125;)  <br>    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;<br>    \t<span class=\"hljs-comment\">// 处理异步操作失败的结果  </span><br>\t&#125;);<br></code></pre></td></tr></table></figure>\r\n<p>new promise时自动执行promise内函数</p>\r\n<ul>\r\n<li><p>then</p>\r\n<p>then支持一个或两个函数参数：then(onFulfilled)，then(onFulfilled,\r\nonRejected)</p>\r\n<p>then的返回值是promise，是它的回调函数的返回值</p>\r\n<p>若不传第二个参数，此promise为rejected时自动返回此promise</p>\r\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">promise<br>    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;1&quot;</span>);<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">111</span>&#125;);<br></code></pre></td></tr></table></figure></p>\r\n<p>如果返回的不是promise对象，转换为一个状态为fulfilled，result为返回值的promise对象</p>\r\n<p>执行时报错变成rejected</p></li>\r\n<li><p>catch</p>\r\n<p>如果此promise时fulfilled，则直接返回此promise</p>\r\n<p>否则执行回调函数</p></li>\r\n<li><p>finally</p>\r\n<p>无论此promise的状态时fulfilled或者rejected，都执行回调函数</p>\r\n<p>若函数返回rejected状态的promise或有错误，返回此promise或错误</p>\r\n<p>否则返回原promise</p></li>\r\n</ul>\r\n<h2 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h2>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;promise&quot;</span>); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">resolve</span>(); &#125;)<br>&#125;);<br><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;setTimeout&quot;</span>); &#125;);<br><br>p.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;then&quot;</span>)&#125;);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;common&quot;</span>);<br><br><span class=\"hljs-comment\">//console : common promise then setTimeout</span><br></code></pre></td></tr></table></figure>\r\n<p>创造微任务：queueMicrotask()</p>\r\n<h2 id=\"高级操作\"><a href=\"#高级操作\" class=\"headerlink\" title=\"高级操作\"></a>高级操作</h2>\r\n<h3 id=\"promise.all\"><a href=\"#promise.all\" class=\"headerlink\" title=\"promise.all\"></a>Promise.all</h3>\r\n<p><code>Promise.all</code>方法接收一个由 Promise\r\n实例组成的iterable对象（如数组）作为参数，并返回一个新的 Promise\r\n实例。</p>\r\n<p>若在数组中的所有 Promise\r\n实例都变为<code>fulfilled</code>状态后，才会变为<code>fulfilled</code>状态，并将每个\r\nPromise 实例的结果值组成一个数组作为自己的result。</p>\r\n<p>如果出现一个变为rejected，立即变为rejected状态，且把第一个rejected的promise的result作为自己的result</p>\r\n<h2 id=\"promise.allsettled\"><a href=\"#promise.allsettled\" class=\"headerlink\" title=\"promise.allsettled\"></a>Promise.allSettled()</h2>\r\n<p>和all大致一样，但是其返回值result为<code>[&#123;state:...,result:...&#125;,&#123;state:...,result:...&#125;,&#123;state:...,result:...&#125;...]</code>，装所有promise的状态和res</p>\r\n<h2 id=\"promise.race\"><a href=\"#promise.race\" class=\"headerlink\" title=\"promise.race\"></a>Promise.race</h2>\r\n<p>只要有一个变成fulfilled或rejected状态，就变成那个状态，把这一个的result/error给回调函数</p>\r\n<h2 id=\"promise.resolve\"><a href=\"#promise.resolve\" class=\"headerlink\" title=\"promise.resolve\"></a>Promise.resolve()</h2>\r\n<p>若参数为promise对象，直接返回promise对象</p>\r\n<p>否则 返回一个新的 Promise\r\n对象，该实例的状态为<code>fulfilled</code>，并将传递的参数作为result。</p>\r\n<h2 id=\"promise.reject\"><a href=\"#promise.reject\" class=\"headerlink\" title=\"promise.reject\"></a>Promise.reject</h2>\r\n<p>返回的promise状态一定是rejected</p>\r\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async-await\"></a>async &amp; await</h2>\r\n<p>async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await\r\n就会先暂停执行 ，等到触发的异步操作完成后，恢复 async\r\n函数的执行并返回解析值。</p>\r\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2>\r\n<p>function.bind(a);在运行此函数时把函数内的this绑定为a</p>\r\n<p><strong><code>instanceof</code></strong>\r\n<strong>运算符</strong>用于检测构造函数的 <code>prototype</code>\r\n属性是否出现在某个实例对象的原型链上。</p>\r\n<p>三个点（...）真名叫扩展运算符，不管是大括号（[]）、花括号（{}），统统不在话下，全部脱掉脱掉。但是只能脱掉一层，所以</p>\r\n<p>A.call(B, a1, a2) 调用A方法，并且A中的this为B，a1，a2...为A的参数</p>\r\n<p>箭头函数：this固定，不能是构造函数</p>\r\n<h1 id=\"week-4-todelist\"><a href=\"#week-4-todelist\" class=\"headerlink\" title=\"week-4-todelist\"></a>week 4 TodeList</h1>\r\n<h2 id=\"webpack\"><a\r\nhref=\"https://juejin.cn/post/7101643125117943839\">webpack</a></h2>\r\n<p>把所有js和css文件压缩成一个js文件</p>\r\n<h2 id=\"杂项-1\"><a href=\"#杂项-1\" class=\"headerlink\" title=\"杂项-1\"></a>杂项</h2>\r\n<ul>\r\n<li><p><code>onclick</code>是一种直接在HTML标签中定义事件处理程序的简便方法，而<code>click</code>是通过JavaScript代码动态添加事件监听器的更灵活的方式。</p></li>\r\n<li><p><code>indexOf()</code>：这个方法返回子串在字符串中第一次出现的索引位置。如果找不到子串，则返回-1</p></li>\r\n<li><p>``` // 获取复选框元素 const checkbox =\r\ndocument.getElementById(\"myCheckbox\");</p>\r\n<p>// 模拟点击复选框 checkbox.click(); <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">  <br>- `document.querySelector(selector);`<br><br>  其中，`selector`是一个字符串，表示要选择的元素的CSS选择器。它可以是元素的标签名、类名、ID、属性等。<br><br>  `querySelector`方法返回与选择器匹配的第一个元素，如果没有找到匹配的元素，则返回`null`。如`&#x27;div&#x27;,&#x27;#id&#x27;,&#x27;.class&#x27;,&#x27;[a=b]&#x27;`<br>  <br>- `splice` 方法可以用于在数组的指定位置插入元素。它还可以用于删除元素或同时删除和插入元素。<br><br></code></pre></td></tr></table></figure> const arr = [1, 2,\r\n3, 4, 5]; arr.splice(2, 0, 6); console.log(arr); // 输出: [1, 2, 6, 3,\r\n4, 5] <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"><br>## 响应式布局<br><br>响应式布局是一种设计方法，可以使网站或应用程序在不同设备和屏幕尺寸上提供最佳的用户体验。它可以根据用户的设备大小和屏幕分辨率自动调整和适应布局。可以使用媒体查询，弹性布局（flex）等办法。<br><br>## 媒体查询<br><br>媒体查询是CSS中的一种技术，它允许你根据设备的特性（如屏幕宽度、高度、方向等）应用不同的样式。你可以在CSS中使用媒体查询来定义不同屏幕尺寸下的样式规则。<br><br>```css<br>/* 在小屏幕上应用不同的样式 */<br>@media (max-width: 768px) &#123;<br>  /* 在屏幕宽度小于等于768px时应用的样式 */<br>&#125;<br><br>/* 在大屏幕上应用不同的样式 */<br>@media (min-width: 1200px) &#123;<br>  /* 在屏幕宽度大于等于1200px时应用的样式 */<br>&#125;<br></code></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n<p>通过使用媒体查询，你可以根据不同的屏幕尺寸应用不同的样式，以适应不同的设备。</p>\r\n<ul>\r\n<li><p>html</p>\r\n<p><code>&lt;link rel=\"stylesheet\" href=\"small.css\" media=\"(min-width: 20em)\" /&gt;</code></p></li>\r\n<li><p>css</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> <span class=\"hljs-keyword\">only</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-device-width</span>: <span class=\"hljs-number\">320px</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-device-width</span>: <span class=\"hljs-number\">480px</span>) &#123;  <br><span class=\"hljs-selector-class\">.card</span> &#123;    <br>\t<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#bada55</span>;  <br>\t&#125; <br>&#125;<br></code></pre></td></tr></table></figure></li>\r\n<li><p>js</p>\r\n<p><code>window.matchMedia()</code> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Create a condition that targets viewports at least 768px wide</span><br><span class=\"hljs-keyword\">const</span> mediaQuery = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&#x27;(min-width: 768px)&#x27;</span>)<br>\t<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleTabletChange</span>(<span class=\"hljs-params\">e</span>) &#123;<br>  <span class=\"hljs-comment\">// Check if the media query is true</span><br>  <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">matches</span>) &#123;<br>    <span class=\"hljs-comment\">// Then log the following message to the console</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Media Query Matched!&#x27;</span>)<br>  &#125;<br>&#125;<br>\t<br><span class=\"hljs-comment\">// Register event listener</span><br>mediaQuery.<span class=\"hljs-title function_\">addListener</span>(handleTabletChange)<br>\t<br><span class=\"hljs-comment\">// Initial check</span><br><span class=\"hljs-title function_\">handleTabletChange</span>(mediaQuery)<br></code></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n<figure>\r\n<img\r\nsrc=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/media-query-anatomy.jpg?resize=2048%2C135&amp;ssl=1\"\r\nalt=\"媒体查询结构\" />\r\n<figcaption aria-hidden=\"true\">媒体查询结构</figcaption>\r\n</figure>\r\n<ul>\r\n<li><p>media type：如all，print，screen（最常用），speech</p></li>\r\n<li><p>madia\r\nfeature：如width，min-width，height，min-height，aspect-ratio（宽高比），orientation（屏幕的方向）……其他见文档</p></li>\r\n<li><p>operator：<span class=\"citation\" data-cites=\"media\">@media</span>\r\n约等于 if</p>\r\n<blockquote>\r\n<p>The <code>@media</code> rule is itself a logical operator that is\r\nbasically stating that “if” the following types and features are\r\nmatches, then do some stuff.</p>\r\n</blockquote>\r\n<p><code>and</code>，<code>,</code>（or的意思），not</p></li>\r\n</ul>\r\n<h2 id=\"客户端存储技术\"><a href=\"#客户端存储技术\" class=\"headerlink\" title=\"客户端存储技术\"></a>客户端存储技术</h2>\r\n<h4 id=\"cookie少量不安全\"><a href=\"#cookie少量不安全\" class=\"headerlink\" title=\"cookie少量不安全\"></a>cookie（少量，不安全）</h4>\r\n<p>https://cloud.tencent.com/developer/article/1861983</p>\r\n<p>通过document.cookie直接设置cookie</p>\r\n<p><strong>expires过期时间</strong>：表示什么时间删除<code>cookie</code>，即不再发送到服务器。默认情况下浏览器<strong>会话结束后</strong>会删除所有cookie。不过，可以设置删除<code>cookie</code>的具体时间，这样即使关闭浏览器<code>cookie</code>也会保存在用户的本机上。把过期时间设置为过去的时间就可以实现删除<code>cookie</code></p>\r\n<p>document.cookie = '' 添加一个cookie，注意不是覆盖而是添加</p>\r\n<h3 id=\"web-storage-localstorage-sessionstorage\">Web Storage\r\n(localStorage, sessionStorage)</h3>\r\n<p><code>localstorage</code>的存储方式是以==<code>key-value</code>==的形式进行存储的，首先我们先了解以下其中的操作方法</p>\r\n<ol type=\"1\">\r\n<li><code>localstorage.length</code>：获取当前存储中的键值对数量</li>\r\n<li><code>localstorage.key(index)</code>：得到某个索引的键值</li>\r\n<li><code>localstorage.getItem(key)</code>：读取对应键值的数据</li>\r\n<li><code>localstorage.setItem(key,value)</code>：设置对应的键值对，保存数据</li>\r\n<li><code>localstorage.remove(key)</code>：清除某个指定数据</li>\r\n<li><code>localstorage.clear()</code>：清除存储的所有数据</li>\r\n</ol>\r\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3>\r\n<ol type=\"1\">\r\n<li>cookie在每次请求时都会被发送到服务器，这样会浪费带宽</li>\r\n<li>cookie中的操作方法需要自己封装，web\r\nstorage中有<code>setItem</code>，<code>getItem</code>等方法</li>\r\n<li>cookie能够与服务器端交互，web Storage只是将数据保存在本地</li>\r\n<li>存储数据的大小限制不一样，<code>cookie</code>一般4k，<code>web Storage</code>一般5M</li>\r\n<li>数据的生命周期不一致，cookie能设置时间，本地存储是永久性的，临时存储可以说是一次性的</li>\r\n<li>作用域不同，<code>sessionStorage</code>不在不同的浏览器窗口中共享，<code>localstorage</code>和<code>cookie</code>在所有同源窗口中都是共享的</li>\r\n</ol>\r\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2>\r\n<ul>\r\n<li><p>创建： <code>let a = /ab+c/;</code>\r\n<code>let a = new RegExp(\"ab+c\");</code></p></li>\r\n<li><p><code>/ab+c/g</code> 全局匹配</p></li>\r\n<li><p><code>String.prototype.match(regex);</code>\r\n返回一个Array，装有所有匹配的字符串</p></li>\r\n<li><p><code>String.prototype.search(regex);</code>\r\n返回第一个匹配的索引位置</p></li>\r\n<li><p><code>String.prototype.replace(regex);</code>\r\n<code>String.prototype.split(regex);</code></p></li>\r\n<li><p><code>RegExp.exec(String)</code>\r\n返回详细信息（<code>[0]</code>匹配的字符串，<code>.index</code>，……）</p></li>\r\n<li><p>查找所有匹配的索引位置 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&quot;hello, hello, hello!&quot;</span>;<br><span class=\"hljs-keyword\">const</span> regex = <span class=\"hljs-regexp\">/hello/g</span>;<br><span class=\"hljs-keyword\">let</span> match;<br><span class=\"hljs-keyword\">const</span> indexes = [];<br><span class=\"hljs-keyword\">while</span> ((match = regex.<span class=\"hljs-title function_\">exec</span>(str)) !== <span class=\"hljs-literal\">null</span>) &#123;<br>  indexes.<span class=\"hljs-title function_\">push</span>(match.<span class=\"hljs-property\">index</span>);<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(indexes); <span class=\"hljs-comment\">// 输出：[0, 7, 14]</span><br></code></pre></td></tr></table></figure>\r\nregex内部有一个lastIndex属性</p></li>\r\n</ul>\r\n<h2 id=\"拷打问题\"><a href=\"#拷打问题\" class=\"headerlink\" title=\"拷打问题\"></a>拷打问题</h2>\r\n<ul>\r\n<li><p>用localstage</p></li>\r\n<li><p>f12的应用可以查看cookie和localstage</p></li>\r\n<li><p>-1 =&gt; 常量</p></li>\r\n<li><p>模板字符串 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">$&#123;name&#125;</span> and I am <span class=\"hljs-subst\">$&#123;age&#125;</span> years old`</span>;<br><span class=\"hljs-keyword\">const</span> multiLineString = <span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">  This is a</span><br><span class=\"hljs-string\">  multi-line</span><br><span class=\"hljs-string\">  string.</span><br><span class=\"hljs-string\">`</span>;<br></code></pre></td></tr></table></figure></p></li>\r\n<li><p>序列化</p>\r\n<p>内置的 <code>JSON.stringify()</code> 方法将对象序列化为 JSON\r\n字符串，反之，如果要将 JSON 字符串反序列化为 JavaScript 对象，可以使用\r\n<code>JSON.parse()</code> 方法</p></li>\r\n<li><p>用find而不用for</p></li>\r\n<li><p>控制台‘源代码’中的‘网页’可以拷到example的css源码</p></li>\r\n</ul>\r\n<h1 id=\"week-5-koa\">Week 5 <a\r\nhref=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1099752344192192\">koa</a></h1>\r\n<h2 id=\"杂项-2\"><a href=\"#杂项-2\" class=\"headerlink\" title=\"杂项-2\"></a>杂项</h2>\r\n<ul>\r\n<li><p><code>&lt;form&gt;</code>标签是HTML中用于创建表单的元素。它用于包裹表单中的各种输入元素，例如文本框、复选框、单选按钮等。提交request，可以修改url和method。<code>action</code>属性指定了表单提交的目标URL，<code>method</code>属性指定了表单提交的HTTP方法（例如POST或GET）。浏览器会将每个表单字段的<code>name</code>属性与其对应的值一起发送到服务器</p></li>\r\n<li><p><code>const files = fs.readdirSync(_dirname)</code> 然后调用\r\nreaddirSync\r\n方法并传入要读取的目录的路径作为参数。该方法会返回一个包含目录中所有文件和子目录的名字的数组</p></li>\r\n<li><p><code>Array.prototype.filter</code> :</p>\r\n<p>过滤是指从数组中筛选出满足特定条件的元素，然后返回一个新的数组。<code>filter</code>\r\n方法接受一个回调函数作为参数，该回调函数会对数组中的每个元素进行评估。如果回调函数返回\r\n<code>true</code>，则该元素将被包含在新的数组中，否则将被排除。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">var js_files = files.filter((f) =&gt; &#123;<br>    return f.endsWith(&#x27;.js&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure></li>\r\n<li><p><code>in</code>运算符用于检查对象<code>obj</code>是否具有指定的键。如果对象具有该键，则返回<code>true</code>，否则返回<code>false</code></p></li>\r\n<li><p>计算属性名 <code>&#123;[name]:value&#125;</code>\r\n把变量key的值作为key</p></li>\r\n<li><p><code>mime.lookup</code>是一个函数，用于根据文件扩展名获取对应的\r\nMIME 类型。MIME 类型是一种标识文件类型的方式，它在 Web\r\n开发中常用于指定服务器响应的 Content-Type 头部。</p></li>\r\n</ul>\r\n<h2 id=\"jwtjson-web-token\"><a\r\nhref=\"https://juejin.cn/post/7062173044214595597\">JWT（JSON Web\r\nToken）</a></h2>\r\n<p>由三部分组成：头部（Header）、载荷（Payload）和签名（Signature）。</p>\r\n<p>Header，Payload是JSON对象，要使用 Base64URL 算法转成字符串。Signature\r\n部分是对前两部分的签名，防止数据篡改。三部分字符串要用<code>.</code>\r\n隔开。</p>\r\n<p>生成 Signature\r\n需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用\r\nHeader 里面指定的签名算法（默认是 HMAC SHA256）。</p>\r\n<p>可以使用openssl来生成一对私钥和公钥。（我的电脑上要在\r\nC:\\27427 里使用）</p>\r\n<p>用Node.js中的 jsonwebtoken 库：</p>\r\n<ul>\r\n<li><p>header自动生成</p></li>\r\n<li><p><code>token = jwt.sign(payload, secret)</code> 生成JWT</p></li>\r\n<li><p><code>const decoded = jwt.verify(token, secret);</code>\r\n验证和解码JWT，返回一个payload</p></li>\r\n</ul>\r\n<h2 id=\"koa2-基本使用\"><a href=\"#koa2-基本使用\" class=\"headerlink\" title=\"koa2-基本使用\"></a>koa2 基本使用</h2>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 导入koa，和koa 1.x不同，在koa2中，我们导入的是一个class，因此用大写的Koa表示:</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Koa</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa&#x27;</span>);<br><br><span class=\"hljs-comment\">// 创建一个Koa对象表示web app本身:</span><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Koa</span>();<br><br><span class=\"hljs-comment\">// 对于任何请求，app将调用该异步函数处理请求：</span><br>app.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title function_\">async</span> (ctx, next) =&gt; &#123;<br>  <span class=\"hljs-comment\">// 参数ctx是由koa传入的封装了request和response的变量，我们可以通过它访问request和response，next是koa传入的将要处理的下一个异步函数</span><br>  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">next</span>();<br>  ctx.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">type</span> = <span class=\"hljs-string\">&#x27;text/html&#x27;</span>;<br>  ctx.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">body</span> = <span class=\"hljs-string\">&#x27;&lt;h1&gt;Hello, koa2!&lt;/h1&gt;&#x27;</span>;<br>&#125;);<br><br><span class=\"hljs-comment\">// 在端口3000监听:</span><br>app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;app started at port 3000...&#x27;</span>);<br></code></pre></td></tr></table></figure>\r\n<p>原因是koa把很多async函数组成一个处理链，每个async函数都可以做一些自己的事情，然后用<code>await next()</code>来调用下一个async函数。我们把每个async函数称为<strong>middleware</strong>，这些middleware可以组合起来，完成很多有用的功能。</p>\r\n<p>( request的目标URL告诉服务器请求的资源在哪里可以找到。)</p>\r\n<h3 id=\"koa-router\"><a href=\"#koa-router\" class=\"headerlink\" title=\"koa-router\"></a>koa-router</h3>\r\n<p>为了处理URL，我们需要引入<code>koa-router</code>这个middleware，让它负责处理URL映射。我们使用<code>router.get('/path', async fn)</code>来处理一个GET请求。可以在请求路径中使用带变量的<code>/hello/:name</code>，变量可以通过<code>ctx.params.name</code>访问</p>\r\n<p>要写一个 <code>app.use(router.routes());</code> 一般在最后</p>\r\n<h3 id=\"koa-bodyparser\"><a href=\"#koa-bodyparser\" class=\"headerlink\" title=\"koa-bodyparser\"></a>koa-bodyparser</h3>\r\n<p>另一个middleware来解析原始request请求，然后，把解析后的body对象，绑定到<code>ctx.request.body</code>中。</p>\r\n<p>要写一个 <code>app.use(bodyParser());</code>\r\n，必须在<code>router</code>之前被注册到<code>app</code>对象上</p>\r\n<h3 id=\"模块化router\"><a href=\"#模块化router\" class=\"headerlink\" title=\"模块化router\"></a>模块化router</h3>\r\n<p>把每个url的router都打包成一个js文件，放在<code>controllers</code>目录下，用一些方法让它自动扫描<code>controllers</code>目录，找到所有模块文件，导入，然后注册每个URL。模块文件的出口是一个对象，每个key值是request的method和url。</p>\r\n<h2 id=\"nunjucks-模板引擎\"><a href=\"#nunjucks-模板引擎\" class=\"headerlink\" title=\"nunjucks-模板引擎\"></a>Nunjucks 模板引擎</h2>\r\n<h3 id=\"nunjucks.configure-配置\"><a href=\"#nunjucks.configure-配置\" class=\"headerlink\" title=\"nunjucks.configure-配置\"></a>nunjucks.configure() 配置</h3>\r\n<p>指定模板文件的位置，配置其他属性</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">nunjucks.configure(&#x27;views&#x27;, &#123;<br>  autoescape: true<br>&#125;);<br></code></pre></td></tr></table></figure>\r\n<p>在上面的代码中，我们将模板文件（xxx.njk）存放在名为<code>views</code>的文件夹中。<code>autoescape</code>选项用于自动转义输出的内容，以防止XSS攻击。</p>\r\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3>\r\n<p>我们使用了<code>&#123;&#123; a &#125;&#125;</code>来包裹变量（变量名为a），使用<code>&#123;% %&#125;</code>来包裹一些语句（如：if，endif，for，endfor，block\r\naaa，endblock）</p>\r\n<h3 id=\"nunjucks.render\"><a href=\"#nunjucks.render\" class=\"headerlink\" title=\"nunjucks.render\"></a>nunjucks.render()</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> renderedHtml = nunjucks.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;template.njk&#x27;</span>, &#123; <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;My Page&#x27;</span>, <span class=\"hljs-attr\">items</span>: [<span class=\"hljs-string\">&#x27;Item 1&#x27;</span>, <span class=\"hljs-string\">&#x27;Item 2&#x27;</span>, <span class=\"hljs-string\">&#x27;Item 3&#x27;</span>] &#125;);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(renderedHtml);<br></code></pre></td></tr></table></figure>\r\n<p>在上面的代码中，我们使用<code>render</code>方法来渲染名为<code>template.njk</code>的模板，并传递一个包含<code>title</code>和<code>items</code>的对象作为模板中的变量。</p>\r\n<h3 id=\"重定义继承\"><a href=\"#重定义继承\" class=\"headerlink\" title=\"重定义继承\"></a>重定义（继承）</h3>\r\n<p>base.html</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;html&gt;&lt;body&gt;<br>&#123;% block header %&#125; &lt;h3&gt;Unnamed&lt;/h3&gt; &#123;% endblock %&#125;<br>&#123;% block body %&#125; &lt;div&gt;No body&lt;/div&gt; &#123;% endblock %&#125;<br>&#123;% block footer %&#125; &lt;div&gt;copyright&lt;/div&gt; &#123;% endblock %&#125;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>\r\n<p>a.html</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">&#123;% extends &#x27;base.html&#x27; %&#125;<br>&#123;% block header %&#125;&lt;h1&gt;&#123;&#123; header &#125;&#125;&lt;/h1&gt;&#123;% endblock %&#125;<br>&#123;% block body %&#125;&lt;p&gt;&#123;&#123; body &#125;&#125;&lt;/p&gt;&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\r\n<p>ctx.render</p>\r\n<h2 id=\"mvc\"><a href=\"#mvc\" class=\"headerlink\" title=\"mvc\"></a>MVC</h2>\r\n<p>MVC：Model-View-Controller，中文名“模型-视图-控制器”</p>\r\n<h2 id=\"拷打问题-1\"><a href=\"#拷打问题-1\" class=\"headerlink\" title=\"拷打问题-1\"></a>拷打问题</h2>\r\n<ul>\r\n<li>cors()</li>\r\n<li>日志文件</li>\r\n<li>.enb</li>\r\n<li>每个response都要有token</li>\r\n<li>前后端分离</li>\r\n<li>加密存储</li>\r\n</ul>\r\n<h1 id=\"week-6-css\"><a href=\"#week-6-css\" class=\"headerlink\" title=\"week-6-css\"></a>Week 6 css</h1>\r\n<p>学习的前置知识详见css.md</p>\r\n<p><a\r\nhref=\"https://tailwindcss.com/docs/installation\">tailwindcss</a></p>\r\n<h2 id=\"src.htmljs\"><a href=\"#src.htmljs\" class=\"headerlink\" title=\"src.htmljs\"></a><code>./src/**/*.&#123;html,js&#125;</code></h2>\r\n<p>是一个文件路径模式，用于匹配指定目录下的所有子目录中的 HTML 和\r\nJavaScript 文件。</p>\r\n<p>解析该模式的方式如下：</p>\r\n<ul>\r\n<li><code>./src/</code>：表示从当前目录开始，进入 <code>src</code>\r\n目录。</li>\r\n<li><code>**/</code>：表示匹配任意深度的子目录。</li>\r\n<li><code>*.&#123;html,js&#125;</code>：表示匹配任意文件名以 <code>.html</code> 或\r\n<code>.js</code> 结尾的文件。</li>\r\n</ul>\r\n<h3 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a><code>:before</code></h3>\r\n<p>是一个 CSS\r\n伪元素选择器，用于在选中元素的内容之前插入生成的内容。它可以用于在元素前面添加装饰性的内容或图标，而无需修改\r\nHTML 结构。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">.my-element:before &#123;<br>  content: &quot;→&quot;;<br>  color: red;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"tailwindcss\"><a href=\"#tailwindcss\" class=\"headerlink\" title=\"tailwindcss\"></a>tailwindcss</h2>\r\n<h3 id=\"配置时注意\"><a href=\"#配置时注意\" class=\"headerlink\" title=\"配置时注意\"></a>配置时注意</h3>\r\n<p>在tailwind.config.js的content中写入所有需要使用tailwindcss的文件名</p>\r\n<h3 id=\"基本样式\"><a href=\"#基本样式\" class=\"headerlink\" title=\"基本样式\"></a>基本样式</h3>\r\n<ol type=\"1\">\r\n<li><strong>背景颜色</strong>：<code>bg-gray-200</code>：设置背景颜色为灰色（可以根据需求使用不同的颜色代码）。</li>\r\n</ol>\r\n<p>颜色类名后面的数字从 100 到\r\n900，表示不同的颜色强度。数字越小，颜色越浅，数字越大，颜色越深。</p>\r\n<ol start=\"2\" type=\"1\">\r\n<li><p><strong>文本颜色</strong>：text-red-200\r\ntext-sky-400/50（opacity）</p></li>\r\n<li><p><strong>字体大小</strong>：</p></li>\r\n</ol>\r\n<ul>\r\n<li><code>text-xs</code>：设置字体大小为额外小号。</li>\r\n<li><code>text-lg</code>：设置字体大小为大号。</li>\r\n</ul>\r\n<ol start=\"4\" type=\"1\">\r\n<li><p>字体粗细：</p>\r\n<ul>\r\n<li>font-bold</li>\r\n<li>font-normal</li>\r\n<li>font-thin</li>\r\n<li>font-black 巨粗</li>\r\n</ul></li>\r\n<li><p><strong>内边距和外边距</strong>：</p></li>\r\n</ol>\r\n<ul>\r\n<li><code>p-4</code>：设置元素的内边距为 4 个间距单位。</li>\r\n<li><code>m-2</code>：设置元素的外边距为 2 个间距单位。</li>\r\n</ul>\r\n<ol start=\"5\" type=\"1\">\r\n<li><strong>宽度和高度</strong>：</li>\r\n</ol>\r\n<ul>\r\n<li><p><code>w-full</code>：设置元素的宽度为父元素的 100%。</p></li>\r\n<li><p><code>h-1</code>：设置元素的高度为。</p>\r\n<p>当使用 Tailwind CSS 中的 <code>rem</code>\r\n单位时，它是相对于根元素（<code>&lt;html&gt;</code>）的字体大小（<code>font-size</code>）的倍数。默认情况下，根元素的字体大小是\r\n<code>16px</code>。</p></li>\r\n</ul>\r\n<ol start=\"6\" type=\"1\">\r\n<li><strong>文本对齐</strong>：</li>\r\n</ol>\r\n<ul>\r\n<li><code>text-left</code>：将文本左对齐。</li>\r\n<li><code>text-center</code>：将文本居中对齐。</li>\r\n</ul>\r\n<ol start=\"7\" type=\"1\">\r\n<li><strong>弹性布局</strong>：</li>\r\n</ol>\r\n<ul>\r\n<li><code>flex</code>：将元素设置为弹性容器。</li>\r\n<li><code>justify-center</code>：在弹性容器中水平居中对齐子元素。</li>\r\n</ul>\r\n<ol start=\"8\" type=\"1\">\r\n<li><strong>边框</strong>：</li>\r\n</ol>\r\n<ul>\r\n<li><code>border</code>：为元素添加默认的边框样式。</li>\r\n<li><code>border-gray-300</code>：为元素添加灰色边框（可以根据需求使用不同的颜色代码）。</li>\r\n<li><code>transition</code> 过渡， duration-150 过渡时间（ms）</li>\r\n</ul>\r\n<h3 id=\"高级样式\"><a href=\"#高级样式\" class=\"headerlink\" title=\"高级样式\"></a>高级样式</h3>\r\n<ul>\r\n<li><p>\"hover:bg-violet-600 active:bg-violet-700\"</p></li>\r\n<li><p>\"odd:bg-white\" 当此元素是第奇数个子元素是，使用白色背景</p></li>\r\n<li><p>*当您需要根据 某些父元素的状态\r\n设置元素的样式时，请使用类<code>group</code>标记父元素，并使用<code>group-*</code>修饰符<code>group-hover</code>来设置目标元素的样式</p></li>\r\n<li><p>使用和修饰符设置<code>::before</code>和<code>::after</code>伪元素的样式：<code>before``after</code></p>\r\n<p><code>\"after:content-['*'] after:ml-0.5 after:text-red-500\"</code>\r\n(如果没有content，默认为空字符)</p></li>\r\n<li><p>响应式 Tailwind 提供五个默认的断点<code>sm</code>\r\n&gt;=640px<code>md</code> 768px<code>lg</code> 1024px<code>xl</code>\r\n1280px<code>2xl</code> 1536px</p>\r\n<p><code>&lt;img class=\"w-16 md:w-32 lg:w-48\" src=\"...\"&gt;</code></p></li>\r\n</ul>\r\n<h3 id=\"包装class时使用tailwindcss\"><a href=\"#包装class时使用tailwindcss\" class=\"headerlink\" title=\"包装class时使用tailwindcss\"></a>包装class时使用tailwindcss</h3>\r\n<ul>\r\n<li><p><code>@apply</code> 语法</p>\r\n<p><code>.menu &#123;  **@apply** p-2 text-gray-900 font-semibold; &#125;</code></p>\r\n<p>尽管使用<code>@apply</code>语法可以解决样式复用的问题，但并不推荐在早期就进行抽象，<strong>因为自定义class的做法会生成更多的样式代码，造成生成的css文件变得更大</strong>。</p></li>\r\n<li><p>还有一个理由可以证明不使用自定义class会更好：你完全可以通过循环的语法来解决此问题：</p>\r\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div<br>    v-for=&quot;menu in [&#x27;首页&#x27;, &#x27;学习TailwindCSS&#x27;, &#x27;TailwindCSS的设计哲学&#x27;, &#x27;最佳实践&#x27;]&quot;<br>    :key=&quot;menu&quot;<br>    class=&quot;p-2 text-gray-900 font-semibold&quot;&gt;&#123;&#123;&#123; menu &#125;&#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n<h2 id=\"杂项-3\"><a href=\"#杂项-3\" class=\"headerlink\" title=\"杂项-3\"></a>杂项</h2>\r\n<ul>\r\n<li><code>object-fit</code>属性：可以控制图片在容器中的尺寸和位置。将object-fit属性设置为contain可以保持图片的原始比例，并在容器中适应最大尺寸。将object-fit属性设置为cover可以填充整个容器，但可能会裁剪部分图片\r\n<a\r\nhref=\"https://www.bitdegree.org/learn/responsive-image\">aaa</a>。</li>\r\n<li>要在 <code>&lt;div&gt;</code> 元素内实现文本内容的换行，你可以使用\r\nCSS 的 <code>white-space</code> 属性。将 <code>white-space</code>\r\n属性设置为 <code>pre-wrap</code>\r\n可以保留文本中的换行符，并在需要时自动换行</li>\r\n<li>使用 <code>join()</code>\r\n方法，它将数组的所有元素连接成一个字符串，并使用指定的分隔符分隔它们</li>\r\n</ul>\r\n"},{"title":"联创分享——Hexo原理浅析","data":"2024-03-25T16:00:00.000Z","_content":"## 什么是Hexo\n快速、简洁且高效的博客框架\n- Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n- Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n- 只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。\n- 强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成\n\n## 总体文件夹结构\n.  \n├── \\_config.yml  \n├── db.json  \n├── node_modules  \n├── package.json  \n├── public  \n├── scaffolds  \n├── source 所有文章文件放在这里  \n└── themes 主题文件夹\n\n**_config.yml**  站点的配置文件。  \n**db.json**   缓存文件   \n**public**  最终所见网页的所有内容  \n**scaffolds**   模板文件夹。当新建一个文章时，会默认包含对应模板的内容。  \n**source**  资源文件夹是存放用户资源的地方。所有的源文件都会被保存在_post文件夹中。除 _posts 文件夹之外，开头命名为_ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。  \n**themes**  存放主题文件，hexo会根据主题来生成静态页面。\n## hexo的模板引擎\n模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。\n\nhexo默认的是使用ejs，同类型的东西还有很多，比如jade，swig。\n### EJS\nEJS是一种模板引擎，是用于生成包含动态数据的Web页面的工具，可以通过客户端JavaScript在客户端上生成HTML，但更常见的是由后端使用它来根据某个URL请求生成Web页面。\n```\n <h1><%= title %></h1> // 输出变量title的值\n\n <% if (isAdmin) { %> // 条件判断\n  <p>Welcome, admin!</p>\n <% } else { %>\n  <p>Welcome, guest!</p>\n <% } %>\n\n<ul>\n <% for (let i = 0; i < items.length; i++) { %> // 循环\n  <li><%= items[i] %></li>\n <% } %>\n</ul>\n```\n\n### Jade\njade采用缩进语法格式。\n```\n- var users = [{name: 'foo', role: 'admin'}, {name: 'bar', role: 'manager'}, {name: 'baz', role: 'technician'}]\n\nh2 Users\n\n// Neat! There's another construct called `each`\n// Also there is `unless` which is equivalent to if (!expr)\n// Let's use that and swap a bit of code\n\neach user, index in users\n    unless user.role === 'admin'\n        p #{user.name} is not an \"admin\"\n    else\n        p #{user.name} is an \"admin\"\n\n// Let's take a look at `case` statements now\n\nh3 case\n\ncase users[2].name\n    when 'admin'\n        p User is an admin\n    when 'manager'\n        p User is a manager\n    when 'technician'\n        p User is a technician\n    default\n        p User is a customer!\n```\n\n## 基本命令\n```\n$ hexo init <folder>\n$ hexo new [layout] <title>\n$ hexo generate #生成静态文件\n$ hexo server\n$ hexo deploy\n$ hexo clean\n```\n`hexo-cli` 启动 hexo 命令进程和参数解析机制。每次我们输入 `hexo init` 命令后，都会通过 node 调用 hexo-cli 中的 entry 函数 (比如，可以把 `hexo init` 视为 `node hexo-cli/entry.js init)`，\n## 部署流程\n\n1. 每次执行hexo g命令时，hexo都会遍历主题文件中的source目录，这里的source主要包括css，fonts，js等文件，建立索引。\n2. 根据索引会把主题文件生成到public文件中，此时public文件是一个由html，js，css等内容制作的博客，也就是网页的根目录。\n3. 通过部署，hexo d 将 public 文件夹的内容以 git 方式 push 到 github 的指定项目的指定分支，由 github 进行显示。当然，也可以部署到自己的域名上。将 `public` 目录中的文件和目录推送至指定目录，并**完全覆盖**该分支下的已有内容。\n\n## 局部缓存优化\n如果主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，可以考虑局部缓存（Fragment Caching） 功能。它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。\n\n它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：\n```html\n<%- fragment_cache('header', function(){  \n  return '<header></header>';  \n}); -%>\n```\n## hexo-server\n`hexo-server` 是 Hexo 的一个插件，它的作用是启动一个本地服务器，可以实时预览博客的修改效果。它主要是通过监听文件变化和重新渲染静态页面来实现实时预览博客的修改效果。\n\n其监听文件变化的实现方式如下：\n\n在 `Hexo-server` 启动时，它会创建一个 `chokidar` 的实例，监听 Hexo 博客目录下的文件变化。当文件发生变化时，`chokidar` 会触发相应的事件，例如 add、change 和 unlink 等。`Hexo-server` 在接收到这些事件后，会重新渲染对应的页面，并将结果发送给客户端。\n\n下面是 `Hexo-server` 使用 `chokidar` 监听文件的代码片段：\n\n```js\nconst chokidar = require('chokidar');  \n  \n// Watch files  \nconst watcher = chokidar.watch(sourceDir, {  \n  ignored: config.ignore,  \n  persistent: true,  \n});  \n  \n// Listen for file events  \nwatcher  \n  .on('add', file => { /* handle add event */ })  \n  .on('change', file => { /* handle change event */ })  \n  .on('unlink', file => { /* handle unlink event */ });\n```\n\n上述代码中，`chokidar.watch()` 方法用于创建一个 `chokidar` 的实例，该实例会监听 `sourceDir` 目录下的文件变化。配置项 `ignored` 用于指定忽略的文件，`persistent` 为 `true` 表示持续监听文件变化。\n\n接下来，使用 `on()` 方法监听 `add`、`change` 和 `unlink` 事件，并在相应的回调函数中处理文件变化事件。例如，在 add 事件中，可以调用 `Hexo` 的 `generate()` 方法重新生成对应的页面。\n\n总的来说，`Hexo-server` 通过 `chokidar` 实现了监听文件变化并重新渲染页面的功能，提供了实时预览和自动刷新等便利特性。\n\n---\n\n以下是凑时间的。\n# [Educational Codeforces Round 163 (Rated for Div. 2)](https://codeforces.com/contest/1948)D. Tandem Repeats? [[优化处理]]\n## 题意\n有一行由小写字母和？组成的字符串，？可以代表任何小写字母。求重复子串的最大长度，重复子串指满足 $s[l,l+len-1]=s[l+len,l+len*2-1]$ 的连续子串。\n$n<=5e3$\n## 题解\n就是要找到处理的相同量，这里是判断 $s[i]==s[i+len]$ ，当len固定时左端点l和l+1只有端点需要处理。在每次记一个cnt，记录满足相等的个数。因为len固定时判断的永远时s[i]和s[i+len]，所以 $？$ 可以直接贪心处理。","source":"_posts/前端/联创分享——Hexo原理浅析.md","raw":"---\ntitle: 联创分享——Hexo原理浅析\ndata: 2024-03-26\ntags:\n  - 前端\n---\n## 什么是Hexo\n快速、简洁且高效的博客框架\n- Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n- Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n- 只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。\n- 强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成\n\n## 总体文件夹结构\n.  \n├── \\_config.yml  \n├── db.json  \n├── node_modules  \n├── package.json  \n├── public  \n├── scaffolds  \n├── source 所有文章文件放在这里  \n└── themes 主题文件夹\n\n**_config.yml**  站点的配置文件。  \n**db.json**   缓存文件   \n**public**  最终所见网页的所有内容  \n**scaffolds**   模板文件夹。当新建一个文章时，会默认包含对应模板的内容。  \n**source**  资源文件夹是存放用户资源的地方。所有的源文件都会被保存在_post文件夹中。除 _posts 文件夹之外，开头命名为_ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。  \n**themes**  存放主题文件，hexo会根据主题来生成静态页面。\n## hexo的模板引擎\n模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。\n\nhexo默认的是使用ejs，同类型的东西还有很多，比如jade，swig。\n### EJS\nEJS是一种模板引擎，是用于生成包含动态数据的Web页面的工具，可以通过客户端JavaScript在客户端上生成HTML，但更常见的是由后端使用它来根据某个URL请求生成Web页面。\n```\n <h1><%= title %></h1> // 输出变量title的值\n\n <% if (isAdmin) { %> // 条件判断\n  <p>Welcome, admin!</p>\n <% } else { %>\n  <p>Welcome, guest!</p>\n <% } %>\n\n<ul>\n <% for (let i = 0; i < items.length; i++) { %> // 循环\n  <li><%= items[i] %></li>\n <% } %>\n</ul>\n```\n\n### Jade\njade采用缩进语法格式。\n```\n- var users = [{name: 'foo', role: 'admin'}, {name: 'bar', role: 'manager'}, {name: 'baz', role: 'technician'}]\n\nh2 Users\n\n// Neat! There's another construct called `each`\n// Also there is `unless` which is equivalent to if (!expr)\n// Let's use that and swap a bit of code\n\neach user, index in users\n    unless user.role === 'admin'\n        p #{user.name} is not an \"admin\"\n    else\n        p #{user.name} is an \"admin\"\n\n// Let's take a look at `case` statements now\n\nh3 case\n\ncase users[2].name\n    when 'admin'\n        p User is an admin\n    when 'manager'\n        p User is a manager\n    when 'technician'\n        p User is a technician\n    default\n        p User is a customer!\n```\n\n## 基本命令\n```\n$ hexo init <folder>\n$ hexo new [layout] <title>\n$ hexo generate #生成静态文件\n$ hexo server\n$ hexo deploy\n$ hexo clean\n```\n`hexo-cli` 启动 hexo 命令进程和参数解析机制。每次我们输入 `hexo init` 命令后，都会通过 node 调用 hexo-cli 中的 entry 函数 (比如，可以把 `hexo init` 视为 `node hexo-cli/entry.js init)`，\n## 部署流程\n\n1. 每次执行hexo g命令时，hexo都会遍历主题文件中的source目录，这里的source主要包括css，fonts，js等文件，建立索引。\n2. 根据索引会把主题文件生成到public文件中，此时public文件是一个由html，js，css等内容制作的博客，也就是网页的根目录。\n3. 通过部署，hexo d 将 public 文件夹的内容以 git 方式 push 到 github 的指定项目的指定分支，由 github 进行显示。当然，也可以部署到自己的域名上。将 `public` 目录中的文件和目录推送至指定目录，并**完全覆盖**该分支下的已有内容。\n\n## 局部缓存优化\n如果主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，可以考虑局部缓存（Fragment Caching） 功能。它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。\n\n它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：\n```html\n<%- fragment_cache('header', function(){  \n  return '<header></header>';  \n}); -%>\n```\n## hexo-server\n`hexo-server` 是 Hexo 的一个插件，它的作用是启动一个本地服务器，可以实时预览博客的修改效果。它主要是通过监听文件变化和重新渲染静态页面来实现实时预览博客的修改效果。\n\n其监听文件变化的实现方式如下：\n\n在 `Hexo-server` 启动时，它会创建一个 `chokidar` 的实例，监听 Hexo 博客目录下的文件变化。当文件发生变化时，`chokidar` 会触发相应的事件，例如 add、change 和 unlink 等。`Hexo-server` 在接收到这些事件后，会重新渲染对应的页面，并将结果发送给客户端。\n\n下面是 `Hexo-server` 使用 `chokidar` 监听文件的代码片段：\n\n```js\nconst chokidar = require('chokidar');  \n  \n// Watch files  \nconst watcher = chokidar.watch(sourceDir, {  \n  ignored: config.ignore,  \n  persistent: true,  \n});  \n  \n// Listen for file events  \nwatcher  \n  .on('add', file => { /* handle add event */ })  \n  .on('change', file => { /* handle change event */ })  \n  .on('unlink', file => { /* handle unlink event */ });\n```\n\n上述代码中，`chokidar.watch()` 方法用于创建一个 `chokidar` 的实例，该实例会监听 `sourceDir` 目录下的文件变化。配置项 `ignored` 用于指定忽略的文件，`persistent` 为 `true` 表示持续监听文件变化。\n\n接下来，使用 `on()` 方法监听 `add`、`change` 和 `unlink` 事件，并在相应的回调函数中处理文件变化事件。例如，在 add 事件中，可以调用 `Hexo` 的 `generate()` 方法重新生成对应的页面。\n\n总的来说，`Hexo-server` 通过 `chokidar` 实现了监听文件变化并重新渲染页面的功能，提供了实时预览和自动刷新等便利特性。\n\n---\n\n以下是凑时间的。\n# [Educational Codeforces Round 163 (Rated for Div. 2)](https://codeforces.com/contest/1948)D. Tandem Repeats? [[优化处理]]\n## 题意\n有一行由小写字母和？组成的字符串，？可以代表任何小写字母。求重复子串的最大长度，重复子串指满足 $s[l,l+len-1]=s[l+len,l+len*2-1]$ 的连续子串。\n$n<=5e3$\n## 题解\n就是要找到处理的相同量，这里是判断 $s[i]==s[i+len]$ ，当len固定时左端点l和l+1只有端点需要处理。在每次记一个cnt，记录满足相等的个数。因为len固定时判断的永远时s[i]和s[i+len]，所以 $？$ 可以直接贪心处理。","slug":"前端/联创分享——Hexo原理浅析","published":1,"date":"2024-03-26T08:07:00.016Z","updated":"2024-03-26T12:20:58.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vg000ap4wv5z2b3yy7","content":"<h2 id=\"什么是hexo\"><a href=\"#什么是hexo\" class=\"headerlink\" title=\"什么是hexo\"></a>什么是Hexo</h2>\r\n<p>快速、简洁且高效的博客框架 - Node.js\r\n所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 - Hexo 支持\r\nGitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress\r\n的大多数插件。 - 只需一条指令即可部署到 GitHub Pages, Heroku\r\n或其他平台。 - 强大的 API\r\n带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成</p>\r\n<h2 id=\"总体文件夹结构\"><a href=\"#总体文件夹结构\" class=\"headerlink\" title=\"总体文件夹结构\"></a>总体文件夹结构</h2>\r\n<p>.<br />\r\n├── _config.yml<br />\r\n├── db.json<br />\r\n├── node_modules<br />\r\n├── package.json<br />\r\n├── public<br />\r\n├── scaffolds<br />\r\n├── source 所有文章文件放在这里<br />\r\n└── themes 主题文件夹</p>\r\n<p>**_config.yml<strong>  站点的配置文件。<br />\r\n</strong>db.json<strong>   缓存文件<br />\r\n</strong>public<strong>  最终所见网页的所有内容<br />\r\n</strong>scaffolds<strong>  \r\n模板文件夹。当新建一个文章时，会默认包含对应模板的内容。<br />\r\n</strong>source<strong> \r\n资源文件夹是存放用户资源的地方。所有的源文件都会被保存在_post文件夹中。除 <em>posts\r\n文件夹之外，开头命名为</em> (下划线)的文件 /\r\n文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public\r\n文件夹，而其他文件会被拷贝过去。<br />\r\n</strong>themes**  存放主题文件，hexo会根据主题来生成静态页面。 ##\r\nhexo的模板引擎\r\n模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。</p>\r\n<p>hexo默认的是使用ejs，同类型的东西还有很多，比如jade，swig。 ### EJS\r\nEJS是一种模板引擎，是用于生成包含动态数据的Web页面的工具，可以通过客户端JavaScript在客户端上生成HTML，但更常见的是由后端使用它来根据某个URL请求生成Web页面。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"> &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt; // 输出变量title的值<br><br> &lt;% if (isAdmin) &#123; %&gt; // 条件判断<br>  &lt;p&gt;Welcome, admin!&lt;/p&gt;<br> &lt;% &#125; else &#123; %&gt;<br>  &lt;p&gt;Welcome, guest!&lt;/p&gt;<br> &lt;% &#125; %&gt;<br><br>&lt;ul&gt;<br> &lt;% for (let i = 0; i &lt; items.length; i++) &#123; %&gt; // 循环<br>  &lt;li&gt;&lt;%= items[i] %&gt;&lt;/li&gt;<br> &lt;% &#125; %&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure></p>\r\n<h3 id=\"jade\"><a href=\"#jade\" class=\"headerlink\" title=\"jade\"></a>Jade</h3>\r\n<p>jade采用缩进语法格式。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">- var users = [&#123;name: &#x27;foo&#x27;, role: &#x27;admin&#x27;&#125;, &#123;name: &#x27;bar&#x27;, role: &#x27;manager&#x27;&#125;, &#123;name: &#x27;baz&#x27;, role: &#x27;technician&#x27;&#125;]<br><br>h2 Users<br><br>// Neat! There&#x27;s another construct called `each`<br>// Also there is `unless` which is equivalent to if (!expr)<br>// Let&#x27;s use that and swap a bit of code<br><br>each user, index in users<br>    unless user.role === &#x27;admin&#x27;<br>        p #&#123;user.name&#125; is not an &quot;admin&quot;<br>    else<br>        p #&#123;user.name&#125; is an &quot;admin&quot;<br><br>// Let&#x27;s take a look at `case` statements now<br><br>h3 case<br><br>case users[2].name<br>    when &#x27;admin&#x27;<br>        p User is an admin<br>    when &#x27;manager&#x27;<br>        p User is a manager<br>    when &#x27;technician&#x27;<br>        p User is a technician<br>    default<br>        p User is a customer!<br></code></pre></td></tr></table></figure></p>\r\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ hexo init &lt;folder&gt;<br>$ hexo new [layout] &lt;title&gt;<br>$ hexo generate #生成静态文件<br>$ hexo server<br>$ hexo deploy<br>$ hexo clean<br></code></pre></td></tr></table></figure>\r\n<p><code>hexo-cli</code> 启动 hexo 命令进程和参数解析机制。每次我们输入\r\n<code>hexo init</code> 命令后，都会通过 node 调用 hexo-cli 中的 entry\r\n函数 (比如，可以把 <code>hexo init</code> 视为\r\n<code>node hexo-cli/entry.js init)</code>， ## 部署流程</p>\r\n<ol type=\"1\">\r\n<li>每次执行hexo\r\ng命令时，hexo都会遍历主题文件中的source目录，这里的source主要包括css，fonts，js等文件，建立索引。</li>\r\n<li>根据索引会把主题文件生成到public文件中，此时public文件是一个由html，js，css等内容制作的博客，也就是网页的根目录。</li>\r\n<li>通过部署，hexo d 将 public 文件夹的内容以 git 方式 push 到 github\r\n的指定项目的指定分支，由 github\r\n进行显示。当然，也可以部署到自己的域名上。将 <code>public</code> 目录中的文件和目录推送至指定目录，并<strong>完全覆盖</strong>该分支下的已有内容。</li>\r\n</ol>\r\n<h2 id=\"局部缓存优化\"><a href=\"#局部缓存优化\" class=\"headerlink\" title=\"局部缓存优化\"></a>局部缓存优化</h2>\r\n<p>如果主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，可以考虑局部缓存（Fragment\r\nCaching）\r\n功能。它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。</p>\r\n<p>它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&lt;%- fragment_cache(&#x27;header&#x27;, function()&#123;  <br>  return &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>&#x27;;  <br>&#125;); -%&gt;<br></code></pre></td></tr></table></figure> ## hexo-server <code>hexo-server</code> 是 Hexo\r\n的一个插件，它的作用是启动一个本地服务器，可以实时预览博客的修改效果。它主要是通过监听文件变化和重新渲染静态页面来实现实时预览博客的修改效果。</p>\r\n<p>其监听文件变化的实现方式如下：</p>\r\n<p>在 <code>Hexo-server</code> 启动时，它会创建一个 <code>chokidar</code> 的实例，监听\r\nHexo\r\n博客目录下的文件变化。当文件发生变化时，<code>chokidar</code> 会触发相应的事件，例如\r\nadd、change 和 unlink\r\n等。<code>Hexo-server</code> 在接收到这些事件后，会重新渲染对应的页面，并将结果发送给客户端。</p>\r\n<p>下面是 <code>Hexo-server</code> 使用 <code>chokidar</code> 监听文件的代码片段：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> chokidar = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;chokidar&#x27;</span>);  <br>  <br><span class=\"hljs-comment\">// Watch files  </span><br><span class=\"hljs-keyword\">const</span> watcher = chokidar.<span class=\"hljs-title function_\">watch</span>(sourceDir, &#123;  <br>  <span class=\"hljs-attr\">ignored</span>: config.<span class=\"hljs-property\">ignore</span>,  <br>  <span class=\"hljs-attr\">persistent</span>: <span class=\"hljs-literal\">true</span>,  <br>&#125;);  <br>  <br><span class=\"hljs-comment\">// Listen for file events  </span><br>watcher  <br>  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;add&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> &#123; <span class=\"hljs-comment\">/* handle add event */</span> &#125;)  <br>  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> &#123; <span class=\"hljs-comment\">/* handle change event */</span> &#125;)  <br>  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;unlink&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> &#123; <span class=\"hljs-comment\">/* handle unlink event */</span> &#125;);<br></code></pre></td></tr></table></figure>\r\n<p>上述代码中，<code>chokidar.watch()</code> 方法用于创建一个 <code>chokidar</code> 的实例，该实例会监听 <code>sourceDir</code> 目录下的文件变化。配置项 <code>ignored</code> 用于指定忽略的文件，<code>persistent</code> 为 <code>true</code> 表示持续监听文件变化。</p>\r\n<p>接下来，使用 <code>on()</code> 方法监听 <code>add</code>、<code>change</code> 和 <code>unlink</code> 事件，并在相应的回调函数中处理文件变化事件。例如，在\r\nadd\r\n事件中，可以调用 <code>Hexo</code> 的 <code>generate()</code> 方法重新生成对应的页面。</p>\r\n<p>总的来说，<code>Hexo-server</code> 通过 <code>chokidar</code> 实现了监听文件变化并重新渲染页面的功能，提供了实时预览和自动刷新等便利特性。</p>\r\n<hr />\r\n<p>以下是凑时间的。 # <a\r\nhref=\"https://codeforces.com/contest/1948\">Educational Codeforces Round\r\n163 (Rated for Div. 2)</a>D. Tandem Repeats? [[优化处理]] ## 题意\r\n有一行由小写字母和？组成的字符串，？可以代表任何小写字母。求重复子串的最大长度，重复子串指满足\r\n<span class=\"math inline\">\\(s[l,l+len-1]=s[l+len,l+len*2-1]\\)</span>\r\n的连续子串。 <span class=\"math inline\">\\(n&lt;=5e3\\)</span> ## 题解\r\n就是要找到处理的相同量，这里是判断 <span\r\nclass=\"math inline\">\\(s[i]==s[i+len]\\)</span>\r\n，当len固定时左端点l和l+1只有端点需要处理。在每次记一个cnt，记录满足相等的个数。因为len固定时判断的永远时s[i]和s[i+len]，所以\r\n<span class=\"math inline\">\\(？\\)</span> 可以直接贪心处理。</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是hexo\"><a href=\"#什么是hexo\" class=\"headerlink\" title=\"什么是hexo\"></a>什么是Hexo</h2>\r\n<p>快速、简洁且高效的博客框架 - Node.js\r\n所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 - Hexo 支持\r\nGitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress\r\n的大多数插件。 - 只需一条指令即可部署到 GitHub Pages, Heroku\r\n或其他平台。 - 强大的 API\r\n带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成</p>\r\n<h2 id=\"总体文件夹结构\"><a href=\"#总体文件夹结构\" class=\"headerlink\" title=\"总体文件夹结构\"></a>总体文件夹结构</h2>\r\n<p>.<br />\r\n├── _config.yml<br />\r\n├── db.json<br />\r\n├── node_modules<br />\r\n├── package.json<br />\r\n├── public<br />\r\n├── scaffolds<br />\r\n├── source 所有文章文件放在这里<br />\r\n└── themes 主题文件夹</p>\r\n<p>**_config.yml<strong>  站点的配置文件。<br />\r\n</strong>db.json<strong>   缓存文件<br />\r\n</strong>public<strong>  最终所见网页的所有内容<br />\r\n</strong>scaffolds<strong>  \r\n模板文件夹。当新建一个文章时，会默认包含对应模板的内容。<br />\r\n</strong>source<strong> \r\n资源文件夹是存放用户资源的地方。所有的源文件都会被保存在_post文件夹中。除 <em>posts\r\n文件夹之外，开头命名为</em> (下划线)的文件 /\r\n文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public\r\n文件夹，而其他文件会被拷贝过去。<br />\r\n</strong>themes**  存放主题文件，hexo会根据主题来生成静态页面。 ##\r\nhexo的模板引擎\r\n模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。</p>\r\n<p>hexo默认的是使用ejs，同类型的东西还有很多，比如jade，swig。 ### EJS\r\nEJS是一种模板引擎，是用于生成包含动态数据的Web页面的工具，可以通过客户端JavaScript在客户端上生成HTML，但更常见的是由后端使用它来根据某个URL请求生成Web页面。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"> &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt; // 输出变量title的值<br><br> &lt;% if (isAdmin) &#123; %&gt; // 条件判断<br>  &lt;p&gt;Welcome, admin!&lt;/p&gt;<br> &lt;% &#125; else &#123; %&gt;<br>  &lt;p&gt;Welcome, guest!&lt;/p&gt;<br> &lt;% &#125; %&gt;<br><br>&lt;ul&gt;<br> &lt;% for (let i = 0; i &lt; items.length; i++) &#123; %&gt; // 循环<br>  &lt;li&gt;&lt;%= items[i] %&gt;&lt;/li&gt;<br> &lt;% &#125; %&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure></p>\r\n<h3 id=\"jade\"><a href=\"#jade\" class=\"headerlink\" title=\"jade\"></a>Jade</h3>\r\n<p>jade采用缩进语法格式。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">- var users = [&#123;name: &#x27;foo&#x27;, role: &#x27;admin&#x27;&#125;, &#123;name: &#x27;bar&#x27;, role: &#x27;manager&#x27;&#125;, &#123;name: &#x27;baz&#x27;, role: &#x27;technician&#x27;&#125;]<br><br>h2 Users<br><br>// Neat! There&#x27;s another construct called `each`<br>// Also there is `unless` which is equivalent to if (!expr)<br>// Let&#x27;s use that and swap a bit of code<br><br>each user, index in users<br>    unless user.role === &#x27;admin&#x27;<br>        p #&#123;user.name&#125; is not an &quot;admin&quot;<br>    else<br>        p #&#123;user.name&#125; is an &quot;admin&quot;<br><br>// Let&#x27;s take a look at `case` statements now<br><br>h3 case<br><br>case users[2].name<br>    when &#x27;admin&#x27;<br>        p User is an admin<br>    when &#x27;manager&#x27;<br>        p User is a manager<br>    when &#x27;technician&#x27;<br>        p User is a technician<br>    default<br>        p User is a customer!<br></code></pre></td></tr></table></figure></p>\r\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ hexo init &lt;folder&gt;<br>$ hexo new [layout] &lt;title&gt;<br>$ hexo generate #生成静态文件<br>$ hexo server<br>$ hexo deploy<br>$ hexo clean<br></code></pre></td></tr></table></figure>\r\n<p><code>hexo-cli</code> 启动 hexo 命令进程和参数解析机制。每次我们输入\r\n<code>hexo init</code> 命令后，都会通过 node 调用 hexo-cli 中的 entry\r\n函数 (比如，可以把 <code>hexo init</code> 视为\r\n<code>node hexo-cli/entry.js init)</code>， ## 部署流程</p>\r\n<ol type=\"1\">\r\n<li>每次执行hexo\r\ng命令时，hexo都会遍历主题文件中的source目录，这里的source主要包括css，fonts，js等文件，建立索引。</li>\r\n<li>根据索引会把主题文件生成到public文件中，此时public文件是一个由html，js，css等内容制作的博客，也就是网页的根目录。</li>\r\n<li>通过部署，hexo d 将 public 文件夹的内容以 git 方式 push 到 github\r\n的指定项目的指定分支，由 github\r\n进行显示。当然，也可以部署到自己的域名上。将 <code>public</code> 目录中的文件和目录推送至指定目录，并<strong>完全覆盖</strong>该分支下的已有内容。</li>\r\n</ol>\r\n<h2 id=\"局部缓存优化\"><a href=\"#局部缓存优化\" class=\"headerlink\" title=\"局部缓存优化\"></a>局部缓存优化</h2>\r\n<p>如果主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，可以考虑局部缓存（Fragment\r\nCaching）\r\n功能。它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。</p>\r\n<p>它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&lt;%- fragment_cache(&#x27;header&#x27;, function()&#123;  <br>  return &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>&#x27;;  <br>&#125;); -%&gt;<br></code></pre></td></tr></table></figure> ## hexo-server <code>hexo-server</code> 是 Hexo\r\n的一个插件，它的作用是启动一个本地服务器，可以实时预览博客的修改效果。它主要是通过监听文件变化和重新渲染静态页面来实现实时预览博客的修改效果。</p>\r\n<p>其监听文件变化的实现方式如下：</p>\r\n<p>在 <code>Hexo-server</code> 启动时，它会创建一个 <code>chokidar</code> 的实例，监听\r\nHexo\r\n博客目录下的文件变化。当文件发生变化时，<code>chokidar</code> 会触发相应的事件，例如\r\nadd、change 和 unlink\r\n等。<code>Hexo-server</code> 在接收到这些事件后，会重新渲染对应的页面，并将结果发送给客户端。</p>\r\n<p>下面是 <code>Hexo-server</code> 使用 <code>chokidar</code> 监听文件的代码片段：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> chokidar = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;chokidar&#x27;</span>);  <br>  <br><span class=\"hljs-comment\">// Watch files  </span><br><span class=\"hljs-keyword\">const</span> watcher = chokidar.<span class=\"hljs-title function_\">watch</span>(sourceDir, &#123;  <br>  <span class=\"hljs-attr\">ignored</span>: config.<span class=\"hljs-property\">ignore</span>,  <br>  <span class=\"hljs-attr\">persistent</span>: <span class=\"hljs-literal\">true</span>,  <br>&#125;);  <br>  <br><span class=\"hljs-comment\">// Listen for file events  </span><br>watcher  <br>  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;add&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> &#123; <span class=\"hljs-comment\">/* handle add event */</span> &#125;)  <br>  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> &#123; <span class=\"hljs-comment\">/* handle change event */</span> &#125;)  <br>  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;unlink&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> &#123; <span class=\"hljs-comment\">/* handle unlink event */</span> &#125;);<br></code></pre></td></tr></table></figure>\r\n<p>上述代码中，<code>chokidar.watch()</code> 方法用于创建一个 <code>chokidar</code> 的实例，该实例会监听 <code>sourceDir</code> 目录下的文件变化。配置项 <code>ignored</code> 用于指定忽略的文件，<code>persistent</code> 为 <code>true</code> 表示持续监听文件变化。</p>\r\n<p>接下来，使用 <code>on()</code> 方法监听 <code>add</code>、<code>change</code> 和 <code>unlink</code> 事件，并在相应的回调函数中处理文件变化事件。例如，在\r\nadd\r\n事件中，可以调用 <code>Hexo</code> 的 <code>generate()</code> 方法重新生成对应的页面。</p>\r\n<p>总的来说，<code>Hexo-server</code> 通过 <code>chokidar</code> 实现了监听文件变化并重新渲染页面的功能，提供了实时预览和自动刷新等便利特性。</p>\r\n<hr />\r\n<p>以下是凑时间的。 # <a\r\nhref=\"https://codeforces.com/contest/1948\">Educational Codeforces Round\r\n163 (Rated for Div. 2)</a>D. Tandem Repeats? [[优化处理]] ## 题意\r\n有一行由小写字母和？组成的字符串，？可以代表任何小写字母。求重复子串的最大长度，重复子串指满足\r\n<span class=\"math inline\">\\(s[l,l+len-1]=s[l+len,l+len*2-1]\\)</span>\r\n的连续子串。 <span class=\"math inline\">\\(n&lt;=5e3\\)</span> ## 题解\r\n就是要找到处理的相同量，这里是判断 <span\r\nclass=\"math inline\">\\(s[i]==s[i+len]\\)</span>\r\n，当len固定时左端点l和l+1只有端点需要处理。在每次记一个cnt，记录满足相等的个数。因为len固定时判断的永远时s[i]和s[i+len]，所以\r\n<span class=\"math inline\">\\(？\\)</span> 可以直接贪心处理。</p>\r\n"},{"title":"熬测出题——一架飞机","data":"2024-09-13T16:00:00.000Z","hidden":true,"_content":"`一架飞机有了一架飞机`，但她不会飞，你能帮帮她吗。此题 JS 会占大部分，但是不会很难哦。\n\n效果图\n![](aoce2.gif)\n## 基础要求\n小飞机没有自动飞行功能，所以需要一点“人工智能”。请你：\n1. 完成静态物体（障碍物和目标点的绘制）。因为飞机会在任意一个地方飞，所以请你自行选择障碍物和目标点的位置，但是出发点和目标点的直线上必须有障碍物哦。\n2. 能够使用键盘绘制路线图。\n3. 能够使用鼠标绘制路线图。\n\n## 小进阶\n小飞机嫌弃你的”人工智能“太人工了，把你扔下了飞机。所以现在你必须写出自动生成路线的程序。请你：\n1. 使用 bfs 算法或更加高级的算法自动规划路线，绕开障碍。（学过算法的选手请选择更高级的算法（））\n2. 路线尽量最优。\n\n## 进阶\n小飞机学会飞行了，现在要开始自由飞行。小飞机是百度的私生饭，想沿着网线找到百度的服务器。请你：\n1. 找到你的计算机和 www.baidu.com 的服务器之间的所有路由器（可以用命令行工具）\n2. **使用 js 代码**通过 ip 获取经纬度信息\n3. 将这些位置信息（适当压缩）放到上述图中 作为你的起始点，途径点和目标点。适当添加障碍点，因为小飞机的旅途不一定是一帆风顺的。（如果某个路由器在障碍点里面，可以直接去下一个路由器）\n\n","source":"_posts/前端/熬测出题——一架飞机.md","raw":"---\ntitle: 熬测出题——一架飞机\ndata: 2024-09-14\ntags:\n  - 前端\nhidden: true\n---\n`一架飞机有了一架飞机`，但她不会飞，你能帮帮她吗。此题 JS 会占大部分，但是不会很难哦。\n\n效果图\n![](aoce2.gif)\n## 基础要求\n小飞机没有自动飞行功能，所以需要一点“人工智能”。请你：\n1. 完成静态物体（障碍物和目标点的绘制）。因为飞机会在任意一个地方飞，所以请你自行选择障碍物和目标点的位置，但是出发点和目标点的直线上必须有障碍物哦。\n2. 能够使用键盘绘制路线图。\n3. 能够使用鼠标绘制路线图。\n\n## 小进阶\n小飞机嫌弃你的”人工智能“太人工了，把你扔下了飞机。所以现在你必须写出自动生成路线的程序。请你：\n1. 使用 bfs 算法或更加高级的算法自动规划路线，绕开障碍。（学过算法的选手请选择更高级的算法（））\n2. 路线尽量最优。\n\n## 进阶\n小飞机学会飞行了，现在要开始自由飞行。小飞机是百度的私生饭，想沿着网线找到百度的服务器。请你：\n1. 找到你的计算机和 www.baidu.com 的服务器之间的所有路由器（可以用命令行工具）\n2. **使用 js 代码**通过 ip 获取经纬度信息\n3. 将这些位置信息（适当压缩）放到上述图中 作为你的起始点，途径点和目标点。适当添加障碍点，因为小飞机的旅途不一定是一帆风顺的。（如果某个路由器在障碍点里面，可以直接去下一个路由器）\n\n","slug":"前端/熬测出题——一架飞机","published":1,"date":"2024-09-14T08:46:18.779Z","updated":"2024-09-23T03:17:13.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vk000dp4wv5uk09ecw","content":"<p><code>一架飞机有了一架飞机</code>，但她不会飞，你能帮帮她吗。此题 JS\r\n会占大部分，但是不会很难哦。</p>\r\n<p>效果图 <img src=\"aoce2.gif\" /> ## 基础要求\r\n小飞机没有自动飞行功能，所以需要一点“人工智能”。请你： 1.\r\n完成静态物体（障碍物和目标点的绘制）。因为飞机会在任意一个地方飞，所以请你自行选择障碍物和目标点的位置，但是出发点和目标点的直线上必须有障碍物哦。\r\n2. 能够使用键盘绘制路线图。 3. 能够使用鼠标绘制路线图。</p>\r\n<h2 id=\"小进阶\"><a href=\"#小进阶\" class=\"headerlink\" title=\"小进阶\"></a>小进阶</h2>\r\n<p>小飞机嫌弃你的”人工智能“太人工了，把你扔下了飞机。所以现在你必须写出自动生成路线的程序。请你：\r\n1. 使用 bfs\r\n算法或更加高级的算法自动规划路线，绕开障碍。（学过算法的选手请选择更高级的算法（））\r\n2. 路线尽量最优。</p>\r\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2>\r\n<p>小飞机学会飞行了，现在要开始自由飞行。小飞机是百度的私生饭，想沿着网线找到百度的服务器。请你：\r\n1. 找到你的计算机和 www.baidu.com\r\n的服务器之间的所有路由器（可以用命令行工具） 2. <strong>使用 js\r\n代码</strong>通过 ip 获取经纬度信息 3.\r\n将这些位置信息（适当压缩）放到上述图中\r\n作为你的起始点，途径点和目标点。适当添加障碍点，因为小飞机的旅途不一定是一帆风顺的。（如果某个路由器在障碍点里面，可以直接去下一个路由器）</p>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<p><code>一架飞机有了一架飞机</code>，但她不会飞，你能帮帮她吗。此题 JS\r\n会占大部分，但是不会很难哦。</p>\r\n<p>效果图 <img src=\"aoce2.gif\" /> ## 基础要求\r\n小飞机没有自动飞行功能，所以需要一点“人工智能”。请你： 1.\r\n完成静态物体（障碍物和目标点的绘制）。因为飞机会在任意一个地方飞，所以请你自行选择障碍物和目标点的位置，但是出发点和目标点的直线上必须有障碍物哦。\r\n2. 能够使用键盘绘制路线图。 3. 能够使用鼠标绘制路线图。</p>\r\n<h2 id=\"小进阶\"><a href=\"#小进阶\" class=\"headerlink\" title=\"小进阶\"></a>小进阶</h2>\r\n<p>小飞机嫌弃你的”人工智能“太人工了，把你扔下了飞机。所以现在你必须写出自动生成路线的程序。请你：\r\n1. 使用 bfs\r\n算法或更加高级的算法自动规划路线，绕开障碍。（学过算法的选手请选择更高级的算法（））\r\n2. 路线尽量最优。</p>\r\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2>\r\n<p>小飞机学会飞行了，现在要开始自由飞行。小飞机是百度的私生饭，想沿着网线找到百度的服务器。请你：\r\n1. 找到你的计算机和 www.baidu.com\r\n的服务器之间的所有路由器（可以用命令行工具） 2. <strong>使用 js\r\n代码</strong>通过 ip 获取经纬度信息 3.\r\n将这些位置信息（适当压缩）放到上述图中\r\n作为你的起始点，途径点和目标点。适当添加障碍点，因为小飞机的旅途不一定是一帆风顺的。（如果某个路由器在障碍点里面，可以直接去下一个路由器）</p>\r\n"},{"title":"杂记","date":"2024-02-22T16:00:00.000Z","hidden":true,"_content":"\n\n## 绝对路径和相对路径\n\n以`/`开头的，表示从网站的根目录开始查找资源。在这种情况下，无论当前页面的 URL 是什么，都可以正确地找到资源。所以有的时候在本地是正常的，但挂到githubPages上就不正常了，因为其根目录是 `https://lyx1213812138.github.io/` \n\nhtml中所有资源引用都是相对于浏览器解析的当前html文件的相对路径或者相对于服务器根目录的绝对路径，css文件中的资源路径是相对于当前浏览器解析的css文件的路径来寻找，JavaScript中的资源文件路径，会被浏览器放在引用js的原html文件中解析，是当前运行的html文件的相对路径或者绝对路径\n\n## [fetch](https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html)\n\n`fetch()`发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，`fetch()`才会报错，其他情况都不会报错，而是认为请求成功。\n\n这就是说，即使服务器返回的状态码是 4xx 或 5xx，`fetch()`也不会报错（即 Promise 不会变为 `rejected`状态）。\n\n只有通过`Response.status`属性，得到 HTTP 回应的真实状态码，才能判断请求是否成功。请看下面的例子。\n\n判断`response.ok`是否为`true`。\n\n(但是为啥在Arrangement项目里fetch到了index.html？)\n\nresponse.json() response.text() 是异步操作\n\n```js\nfetch('https://api.github.com/users/ruanyf')\n  .then(response => response.json())\n  .then(json => console.log(json))\n  .catch(err => console.log('Request Failed', err));\n```\n\n## [Hexo](https://zhuanlan.zhihu.com/p/26625249)\n\n不知道为啥，4000接口不能用，要用`hexo server -p 3000`\n\n## git ssh\n\ngit push不知道为啥突然不能用了\n\ngit config --local -e\n\n用443接口 把 git@github.com:lyx1213812138/myweb.git 改为 ssh://git@ssh.github.com:443/lyx1213812138/myweb.git\n\n## ESLint\n可恶的ESLint\nhttps://stackoverflow.com/questions/43961531/eslint-warning-es6-consistent-return-rule","source":"_posts/前端/杂记.md","raw":"---\ntitle: 杂记\ndate: 2024-02-23 00:00:00\ntags:\n  - 前端\nhidden: true\n---\n\n\n## 绝对路径和相对路径\n\n以`/`开头的，表示从网站的根目录开始查找资源。在这种情况下，无论当前页面的 URL 是什么，都可以正确地找到资源。所以有的时候在本地是正常的，但挂到githubPages上就不正常了，因为其根目录是 `https://lyx1213812138.github.io/` \n\nhtml中所有资源引用都是相对于浏览器解析的当前html文件的相对路径或者相对于服务器根目录的绝对路径，css文件中的资源路径是相对于当前浏览器解析的css文件的路径来寻找，JavaScript中的资源文件路径，会被浏览器放在引用js的原html文件中解析，是当前运行的html文件的相对路径或者绝对路径\n\n## [fetch](https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html)\n\n`fetch()`发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，`fetch()`才会报错，其他情况都不会报错，而是认为请求成功。\n\n这就是说，即使服务器返回的状态码是 4xx 或 5xx，`fetch()`也不会报错（即 Promise 不会变为 `rejected`状态）。\n\n只有通过`Response.status`属性，得到 HTTP 回应的真实状态码，才能判断请求是否成功。请看下面的例子。\n\n判断`response.ok`是否为`true`。\n\n(但是为啥在Arrangement项目里fetch到了index.html？)\n\nresponse.json() response.text() 是异步操作\n\n```js\nfetch('https://api.github.com/users/ruanyf')\n  .then(response => response.json())\n  .then(json => console.log(json))\n  .catch(err => console.log('Request Failed', err));\n```\n\n## [Hexo](https://zhuanlan.zhihu.com/p/26625249)\n\n不知道为啥，4000接口不能用，要用`hexo server -p 3000`\n\n## git ssh\n\ngit push不知道为啥突然不能用了\n\ngit config --local -e\n\n用443接口 把 git@github.com:lyx1213812138/myweb.git 改为 ssh://git@ssh.github.com:443/lyx1213812138/myweb.git\n\n## ESLint\n可恶的ESLint\nhttps://stackoverflow.com/questions/43961531/eslint-warning-es6-consistent-return-rule","slug":"前端/杂记","published":1,"updated":"2024-11-30T14:07:25.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vm000fp4wvf0x0b2k3","content":"<h2 id=\"绝对路径和相对路径\"><a href=\"#绝对路径和相对路径\" class=\"headerlink\" title=\"绝对路径和相对路径\"></a>绝对路径和相对路径</h2>\r\n<p>以<code>/</code>开头的，表示从网站的根目录开始查找资源。在这种情况下，无论当前页面的\r\nURL\r\n是什么，都可以正确地找到资源。所以有的时候在本地是正常的，但挂到githubPages上就不正常了，因为其根目录是\r\n<code>https://lyx1213812138.github.io/</code></p>\r\n<p>html中所有资源引用都是相对于浏览器解析的当前html文件的相对路径或者相对于服务器根目录的绝对路径，css文件中的资源路径是相对于当前浏览器解析的css文件的路径来寻找，JavaScript中的资源文件路径，会被浏览器放在引用js的原html文件中解析，是当前运行的html文件的相对路径或者绝对路径</p>\r\n<h2 id=\"fetch\"><a\r\nhref=\"https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html\">fetch</a></h2>\r\n<p><code>fetch()</code>发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，<code>fetch()</code>才会报错，其他情况都不会报错，而是认为请求成功。</p>\r\n<p>这就是说，即使服务器返回的状态码是 4xx 或\r\n5xx，<code>fetch()</code>也不会报错（即 Promise 不会变为\r\n<code>rejected</code>状态）。</p>\r\n<p>只有通过<code>Response.status</code>属性，得到 HTTP\r\n回应的真实状态码，才能判断请求是否成功。请看下面的例子。</p>\r\n<p>判断<code>response.ok</code>是否为<code>true</code>。</p>\r\n<p>(但是为啥在Arrangement项目里fetch到了index.html？)</p>\r\n<p>response.json() response.text() 是异步操作</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://api.github.com/users/ruanyf&#x27;</span>)<br>  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())<br>  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">json</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(json))<br>  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Request Failed&#x27;</span>, err));<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"hexo\"><a\r\nhref=\"https://zhuanlan.zhihu.com/p/26625249\">Hexo</a></h2>\r\n<p>不知道为啥，4000接口不能用，要用<code>hexo server -p 3000</code></p>\r\n<h2 id=\"git-ssh\"><a href=\"#git-ssh\" class=\"headerlink\" title=\"git-ssh\"></a>git ssh</h2>\r\n<p>git push不知道为啥突然不能用了</p>\r\n<p>git config --local -e</p>\r\n<p>用443接口 把 git@github.com:lyx1213812138/myweb.git 改为\r\nssh://git@ssh.github.com:443/lyx1213812138/myweb.git</p>\r\n<h2 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>ESLint</h2>\r\n<p>可恶的ESLint\r\nhttps://stackoverflow.com/questions/43961531/eslint-warning-es6-consistent-return-rule</p>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<h2 id=\"绝对路径和相对路径\"><a href=\"#绝对路径和相对路径\" class=\"headerlink\" title=\"绝对路径和相对路径\"></a>绝对路径和相对路径</h2>\r\n<p>以<code>/</code>开头的，表示从网站的根目录开始查找资源。在这种情况下，无论当前页面的\r\nURL\r\n是什么，都可以正确地找到资源。所以有的时候在本地是正常的，但挂到githubPages上就不正常了，因为其根目录是\r\n<code>https://lyx1213812138.github.io/</code></p>\r\n<p>html中所有资源引用都是相对于浏览器解析的当前html文件的相对路径或者相对于服务器根目录的绝对路径，css文件中的资源路径是相对于当前浏览器解析的css文件的路径来寻找，JavaScript中的资源文件路径，会被浏览器放在引用js的原html文件中解析，是当前运行的html文件的相对路径或者绝对路径</p>\r\n<h2 id=\"fetch\"><a\r\nhref=\"https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html\">fetch</a></h2>\r\n<p><code>fetch()</code>发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，<code>fetch()</code>才会报错，其他情况都不会报错，而是认为请求成功。</p>\r\n<p>这就是说，即使服务器返回的状态码是 4xx 或\r\n5xx，<code>fetch()</code>也不会报错（即 Promise 不会变为\r\n<code>rejected</code>状态）。</p>\r\n<p>只有通过<code>Response.status</code>属性，得到 HTTP\r\n回应的真实状态码，才能判断请求是否成功。请看下面的例子。</p>\r\n<p>判断<code>response.ok</code>是否为<code>true</code>。</p>\r\n<p>(但是为啥在Arrangement项目里fetch到了index.html？)</p>\r\n<p>response.json() response.text() 是异步操作</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;https://api.github.com/users/ruanyf&#x27;</span>)<br>  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())<br>  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">json</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(json))<br>  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Request Failed&#x27;</span>, err));<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"hexo\"><a\r\nhref=\"https://zhuanlan.zhihu.com/p/26625249\">Hexo</a></h2>\r\n<p>不知道为啥，4000接口不能用，要用<code>hexo server -p 3000</code></p>\r\n<h2 id=\"git-ssh\"><a href=\"#git-ssh\" class=\"headerlink\" title=\"git-ssh\"></a>git ssh</h2>\r\n<p>git push不知道为啥突然不能用了</p>\r\n<p>git config --local -e</p>\r\n<p>用443接口 把 git@github.com:lyx1213812138/myweb.git 改为\r\nssh://git@ssh.github.com:443/lyx1213812138/myweb.git</p>\r\n<h2 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>ESLint</h2>\r\n<p>可恶的ESLint\r\nhttps://stackoverflow.com/questions/43961531/eslint-warning-es6-consistent-return-rule</p>\r\n"},{"title":"分布式——MapReduce，GFS","data":"2024-09-09T16:00:00.000Z","_content":"## MapReduce\n\n### 概念\n专门为并行处理大规模数据量而设计的简单模型。\n自定义 Map 和 Reduce 函数，进行分布式运算和基于 key 的检索\n![](aaaa.png)\n\n- `map(key: string, value: string): (key: string, value:string)` \n- `reduce(key: string, values: []string): any`\n### 执行流程\n![](aaa.png)\n- master 分配 map 任务到 worker。（master 负责分配任务和传输数据地址）\n- worker 挨个执行 map 函数，将中间数据分为 nReduce 组存储。分的方式是按照 hash(key) mod R 的方式。nReduce 即为 reduce 任务的数量。执行完后再在 master 处领取新的 map 任务。\n- 所有 map 任务完成后，master 开始分配 reduce 任务。\n- worker 收集中间数据，按 key 进行排序，对每个 key 找到所有对应的 value，然后挨个执行 reduce 函数。存储输出数据。\n\n### 用处\n词频统计\n倒排索引。每个文档里有什么词语 -> 每个词语在哪些文档里\n分布式排序。\n\n## GFS\n### 前提\n- 需要能够运行在经常故障的物理机环境上。使得能采用相对便宜的服务器硬件。\n- 大文件居多。几个GB这样的级别\n- 大多数写是append写，即在文件末尾追加。（应该没有顺序要求）\n\n### 概念\nGFS由一个Master节点、ChunkServer和提供给用户的client组成。\n所有的数据，被切分成固定大小的”chunk”，写入ChunkServer所在的物理机的磁盘上。\nmaster节点管理好所有的元信息，包括表示文件系统目录结构的namespace、文件所属的chunk所在位置等\n用户需要读写文件的时候，通过GFS的client，首先从master查到文件所在的chunk相关信息，而后直接与对应的chunkserver通讯。\n\n- master通过检查点+重放（replay）操作日志来恢复其文件系统的状态。\n- master在启动时从chunkserver获取chunk信息，存在内存中。随后master控制着所有chunk的分配并通过周期性的心跳消息监控chunkserver状态。\n\n### 一致性\n弱一致性：从不同chunk副本（一个文件大概有3份，保证不会被损坏）中获得的数据可能会有一点差距。chunkserver 在返回数据之前检查 校验和 ，如果校验和不匹配，让client请求其他副本，并会新建一个副本并删除损坏的。\n非确定：并发写（不是 append）导致结果不确定。\n![](bbb.png)\n\n\n### Primary 和租约\n- master 找到 Primary 或 选择 Primary 并给定租约\n- client 把变更传给所有副本的chunkserver，server缓存变更（变更：write，append……）\n- 所有副本server都确认收到了数据后，primary为变更选取顺序，所有副本应用变更。\n\n租约 -> 防止部分网络问题导致的脑裂\n\n\n\n","source":"_posts/后端/分布式——MapReduce，GFS.md","raw":"---\ntitle: 分布式——MapReduce，GFS\ndata: 2024-09-10\ntags:\n  - 后端\n---\n## MapReduce\n\n### 概念\n专门为并行处理大规模数据量而设计的简单模型。\n自定义 Map 和 Reduce 函数，进行分布式运算和基于 key 的检索\n![](aaaa.png)\n\n- `map(key: string, value: string): (key: string, value:string)` \n- `reduce(key: string, values: []string): any`\n### 执行流程\n![](aaa.png)\n- master 分配 map 任务到 worker。（master 负责分配任务和传输数据地址）\n- worker 挨个执行 map 函数，将中间数据分为 nReduce 组存储。分的方式是按照 hash(key) mod R 的方式。nReduce 即为 reduce 任务的数量。执行完后再在 master 处领取新的 map 任务。\n- 所有 map 任务完成后，master 开始分配 reduce 任务。\n- worker 收集中间数据，按 key 进行排序，对每个 key 找到所有对应的 value，然后挨个执行 reduce 函数。存储输出数据。\n\n### 用处\n词频统计\n倒排索引。每个文档里有什么词语 -> 每个词语在哪些文档里\n分布式排序。\n\n## GFS\n### 前提\n- 需要能够运行在经常故障的物理机环境上。使得能采用相对便宜的服务器硬件。\n- 大文件居多。几个GB这样的级别\n- 大多数写是append写，即在文件末尾追加。（应该没有顺序要求）\n\n### 概念\nGFS由一个Master节点、ChunkServer和提供给用户的client组成。\n所有的数据，被切分成固定大小的”chunk”，写入ChunkServer所在的物理机的磁盘上。\nmaster节点管理好所有的元信息，包括表示文件系统目录结构的namespace、文件所属的chunk所在位置等\n用户需要读写文件的时候，通过GFS的client，首先从master查到文件所在的chunk相关信息，而后直接与对应的chunkserver通讯。\n\n- master通过检查点+重放（replay）操作日志来恢复其文件系统的状态。\n- master在启动时从chunkserver获取chunk信息，存在内存中。随后master控制着所有chunk的分配并通过周期性的心跳消息监控chunkserver状态。\n\n### 一致性\n弱一致性：从不同chunk副本（一个文件大概有3份，保证不会被损坏）中获得的数据可能会有一点差距。chunkserver 在返回数据之前检查 校验和 ，如果校验和不匹配，让client请求其他副本，并会新建一个副本并删除损坏的。\n非确定：并发写（不是 append）导致结果不确定。\n![](bbb.png)\n\n\n### Primary 和租约\n- master 找到 Primary 或 选择 Primary 并给定租约\n- client 把变更传给所有副本的chunkserver，server缓存变更（变更：write，append……）\n- 所有副本server都确认收到了数据后，primary为变更选取顺序，所有副本应用变更。\n\n租约 -> 防止部分网络问题导致的脑裂\n\n\n\n","slug":"后端/分布式——MapReduce，GFS","published":1,"date":"2024-09-10T06:32:37.891Z","updated":"2024-12-15T11:31:25.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vn000ip4wv335checn","content":"<h2 id=\"mapreduce\"><a href=\"#mapreduce\" class=\"headerlink\" title=\"mapreduce\"></a>MapReduce</h2>\r\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3>\r\n<p>专门为并行处理大规模数据量而设计的简单模型。 自定义 Map 和 Reduce\r\n函数，进行分布式运算和基于 key 的检索 <img src=\"aaaa.png\" /></p>\r\n<ul>\r\n<li><code>map(key: string, value: string): (key: string, value:string)</code></li>\r\n<li><code>reduce(key: string, values: []string): any</code> ### 执行流程\r\n<img src=\"aaa.png\" /></li>\r\n<li>master 分配 map 任务到 worker。（master\r\n负责分配任务和传输数据地址）</li>\r\n<li>worker 挨个执行 map 函数，将中间数据分为 nReduce\r\n组存储。分的方式是按照 hash(key) mod R 的方式。nReduce 即为 reduce\r\n任务的数量。执行完后再在 master 处领取新的 map 任务。</li>\r\n<li>所有 map 任务完成后，master 开始分配 reduce 任务。</li>\r\n<li>worker 收集中间数据，按 key 进行排序，对每个 key 找到所有对应的\r\nvalue，然后挨个执行 reduce 函数。存储输出数据。</li>\r\n</ul>\r\n<h3 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h3>\r\n<p>词频统计 倒排索引。每个文档里有什么词语 -&gt; 每个词语在哪些文档里\r\n分布式排序。</p>\r\n<h2 id=\"gfs\"><a href=\"#gfs\" class=\"headerlink\" title=\"gfs\"></a>GFS</h2>\r\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3>\r\n<ul>\r\n<li>需要能够运行在经常故障的物理机环境上。使得能采用相对便宜的服务器硬件。</li>\r\n<li>大文件居多。几个GB这样的级别</li>\r\n<li>大多数写是append写，即在文件末尾追加。（应该没有顺序要求）</li>\r\n</ul>\r\n<h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念-1\"></a>概念</h3>\r\n<p>GFS由一个Master节点、ChunkServer和提供给用户的client组成。\r\n所有的数据，被切分成固定大小的”chunk”，写入ChunkServer所在的物理机的磁盘上。\r\nmaster节点管理好所有的元信息，包括表示文件系统目录结构的namespace、文件所属的chunk所在位置等\r\n用户需要读写文件的时候，通过GFS的client，首先从master查到文件所在的chunk相关信息，而后直接与对应的chunkserver通讯。</p>\r\n<ul>\r\n<li>master通过检查点+重放（replay）操作日志来恢复其文件系统的状态。</li>\r\n<li>master在启动时从chunkserver获取chunk信息，存在内存中。随后master控制着所有chunk的分配并通过周期性的心跳消息监控chunkserver状态。</li>\r\n</ul>\r\n<h3 id=\"一致性\"><a href=\"#一致性\" class=\"headerlink\" title=\"一致性\"></a>一致性</h3>\r\n<p>弱一致性：从不同chunk副本（一个文件大概有3份，保证不会被损坏）中获得的数据可能会有一点差距。chunkserver\r\n在返回数据之前检查 校验和\r\n，如果校验和不匹配，让client请求其他副本，并会新建一个副本并删除损坏的。\r\n非确定：并发写（不是 append）导致结果不确定。 <img src=\"bbb.png\" /></p>\r\n<h3 id=\"primary-和租约\"><a href=\"#primary-和租约\" class=\"headerlink\" title=\"primary-和租约\"></a>Primary 和租约</h3>\r\n<ul>\r\n<li>master 找到 Primary 或 选择 Primary 并给定租约</li>\r\n<li>client\r\n把变更传给所有副本的chunkserver，server缓存变更（变更：write，append……）</li>\r\n<li>所有副本server都确认收到了数据后，primary为变更选取顺序，所有副本应用变更。</li>\r\n</ul>\r\n<p>租约 -&gt; 防止部分网络问题导致的脑裂</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mapreduce\"><a href=\"#mapreduce\" class=\"headerlink\" title=\"mapreduce\"></a>MapReduce</h2>\r\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3>\r\n<p>专门为并行处理大规模数据量而设计的简单模型。 自定义 Map 和 Reduce\r\n函数，进行分布式运算和基于 key 的检索 <img src=\"aaaa.png\" /></p>\r\n<ul>\r\n<li><code>map(key: string, value: string): (key: string, value:string)</code></li>\r\n<li><code>reduce(key: string, values: []string): any</code> ### 执行流程\r\n<img src=\"aaa.png\" /></li>\r\n<li>master 分配 map 任务到 worker。（master\r\n负责分配任务和传输数据地址）</li>\r\n<li>worker 挨个执行 map 函数，将中间数据分为 nReduce\r\n组存储。分的方式是按照 hash(key) mod R 的方式。nReduce 即为 reduce\r\n任务的数量。执行完后再在 master 处领取新的 map 任务。</li>\r\n<li>所有 map 任务完成后，master 开始分配 reduce 任务。</li>\r\n<li>worker 收集中间数据，按 key 进行排序，对每个 key 找到所有对应的\r\nvalue，然后挨个执行 reduce 函数。存储输出数据。</li>\r\n</ul>\r\n<h3 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h3>\r\n<p>词频统计 倒排索引。每个文档里有什么词语 -&gt; 每个词语在哪些文档里\r\n分布式排序。</p>\r\n<h2 id=\"gfs\"><a href=\"#gfs\" class=\"headerlink\" title=\"gfs\"></a>GFS</h2>\r\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3>\r\n<ul>\r\n<li>需要能够运行在经常故障的物理机环境上。使得能采用相对便宜的服务器硬件。</li>\r\n<li>大文件居多。几个GB这样的级别</li>\r\n<li>大多数写是append写，即在文件末尾追加。（应该没有顺序要求）</li>\r\n</ul>\r\n<h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念-1\"></a>概念</h3>\r\n<p>GFS由一个Master节点、ChunkServer和提供给用户的client组成。\r\n所有的数据，被切分成固定大小的”chunk”，写入ChunkServer所在的物理机的磁盘上。\r\nmaster节点管理好所有的元信息，包括表示文件系统目录结构的namespace、文件所属的chunk所在位置等\r\n用户需要读写文件的时候，通过GFS的client，首先从master查到文件所在的chunk相关信息，而后直接与对应的chunkserver通讯。</p>\r\n<ul>\r\n<li>master通过检查点+重放（replay）操作日志来恢复其文件系统的状态。</li>\r\n<li>master在启动时从chunkserver获取chunk信息，存在内存中。随后master控制着所有chunk的分配并通过周期性的心跳消息监控chunkserver状态。</li>\r\n</ul>\r\n<h3 id=\"一致性\"><a href=\"#一致性\" class=\"headerlink\" title=\"一致性\"></a>一致性</h3>\r\n<p>弱一致性：从不同chunk副本（一个文件大概有3份，保证不会被损坏）中获得的数据可能会有一点差距。chunkserver\r\n在返回数据之前检查 校验和\r\n，如果校验和不匹配，让client请求其他副本，并会新建一个副本并删除损坏的。\r\n非确定：并发写（不是 append）导致结果不确定。 <img src=\"bbb.png\" /></p>\r\n<h3 id=\"primary-和租约\"><a href=\"#primary-和租约\" class=\"headerlink\" title=\"primary-和租约\"></a>Primary 和租约</h3>\r\n<ul>\r\n<li>master 找到 Primary 或 选择 Primary 并给定租约</li>\r\n<li>client\r\n把变更传给所有副本的chunkserver，server缓存变更（变更：write，append……）</li>\r\n<li>所有副本server都确认收到了数据后，primary为变更选取顺序，所有副本应用变更。</li>\r\n</ul>\r\n<p>租约 -&gt; 防止部分网络问题导致的脑裂</p>\r\n"},{"title":"掘金笔记","data":"2024-11-06T16:00:00.000Z","hidden":true,"_content":"## 微服务架构\n![](Pasted%20image%2020241107121046.png)\n\nDevOps\n![](Pasted%20image%2020241107122012.png)\n\n架构：SOA，微服务\n![](Pasted%20image%2020241107135636.png)\n\nIaaS、PaaS 和 SaaS \n“即服务（aaS）”：由第三方提供的[云计算](https://www.redhat.com/zh/topics/cloud-computing)服务，它可让您可以专注于更重要的事务，例如写代码和客户关系。每一种类型的云计算，都能逐步减轻您管理本地基础架构的负担。 \n\nIaaS：作为用户，您只需负责操作系统以及任何数据、应用、中间件和运行时，而提供商会给您访问和管理所需网络、服务器、虚拟化和存储的权限。\nPaaS：您只需编写代码、构建和管理您的应用，不再有软件更新或硬件维护方面的麻烦。系统将会为您提供构建和部署环境。\nSaaS：提供商将负责处理软件更新、漏洞修复及其他常规软件维护工作，而用户则通过控制面板或 API 连接至应用。\n\nService mesh\n它通过在整个服务间通信路径上插入代理，实现了对通信的全面控制和管理。Service Mesh的出现使得服务间通信的管理变得更加简单和可靠，开发人员可以专注于业务逻辑的开发，而不必关注底层的网络通信细节。同时，Service Mesh还提供了强大的安全性、监控和追踪能力，可以帮助运维人员更好地监控和管理服务的运行状态。总之，Service Mesh的出现为服务通信带来了一场革命，极大地提升了应用程序的可靠性和可维护性。","source":"_posts/后端/掘金笔记.md","raw":"---\ntitle: 掘金笔记\ndata: 2024-11-07\ntags:\n  - 后端\nhidden: true\n---\n## 微服务架构\n![](Pasted%20image%2020241107121046.png)\n\nDevOps\n![](Pasted%20image%2020241107122012.png)\n\n架构：SOA，微服务\n![](Pasted%20image%2020241107135636.png)\n\nIaaS、PaaS 和 SaaS \n“即服务（aaS）”：由第三方提供的[云计算](https://www.redhat.com/zh/topics/cloud-computing)服务，它可让您可以专注于更重要的事务，例如写代码和客户关系。每一种类型的云计算，都能逐步减轻您管理本地基础架构的负担。 \n\nIaaS：作为用户，您只需负责操作系统以及任何数据、应用、中间件和运行时，而提供商会给您访问和管理所需网络、服务器、虚拟化和存储的权限。\nPaaS：您只需编写代码、构建和管理您的应用，不再有软件更新或硬件维护方面的麻烦。系统将会为您提供构建和部署环境。\nSaaS：提供商将负责处理软件更新、漏洞修复及其他常规软件维护工作，而用户则通过控制面板或 API 连接至应用。\n\nService mesh\n它通过在整个服务间通信路径上插入代理，实现了对通信的全面控制和管理。Service Mesh的出现使得服务间通信的管理变得更加简单和可靠，开发人员可以专注于业务逻辑的开发，而不必关注底层的网络通信细节。同时，Service Mesh还提供了强大的安全性、监控和追踪能力，可以帮助运维人员更好地监控和管理服务的运行状态。总之，Service Mesh的出现为服务通信带来了一场革命，极大地提升了应用程序的可靠性和可维护性。","slug":"后端/掘金笔记","published":1,"date":"2024-11-07T04:09:47.523Z","updated":"2024-11-10T06:20:50.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vo000kp4wvg4551eal","content":"<h2 id=\"微服务架构\"><a href=\"#微服务架构\" class=\"headerlink\" title=\"微服务架构\"></a>微服务架构</h2>\r\n<p class='item-img' data-src='Pasted%20image%2020241107121046.png'><img src=\"Pasted%20image%2020241107121046.png\" /></p>\r\n<p>DevOps <img src=\"Pasted%20image%2020241107122012.png\" /></p>\r\n<p>架构：SOA，微服务 <img\r\nsrc=\"Pasted%20image%2020241107135636.png\" /></p>\r\n<p>IaaS、PaaS 和 SaaS “即服务（aaS）”：由第三方提供的<a\r\nhref=\"https://www.redhat.com/zh/topics/cloud-computing\">云计算</a>服务，它可让您可以专注于更重要的事务，例如写代码和客户关系。每一种类型的云计算，都能逐步减轻您管理本地基础架构的负担。 </p>\r\n<p>IaaS：作为用户，您只需负责操作系统以及任何数据、应用、中间件和运行时，而提供商会给您访问和管理所需网络、服务器、虚拟化和存储的权限。\r\nPaaS：您只需编写代码、构建和管理您的应用，不再有软件更新或硬件维护方面的麻烦。系统将会为您提供构建和部署环境。\r\nSaaS：提供商将负责处理软件更新、漏洞修复及其他常规软件维护工作，而用户则通过控制面板或\r\nAPI 连接至应用。</p>\r\n<p>Service mesh\r\n它通过在整个服务间通信路径上插入代理，实现了对通信的全面控制和管理。Service\r\nMesh的出现使得服务间通信的管理变得更加简单和可靠，开发人员可以专注于业务逻辑的开发，而不必关注底层的网络通信细节。同时，Service\r\nMesh还提供了强大的安全性、监控和追踪能力，可以帮助运维人员更好地监控和管理服务的运行状态。总之，Service\r\nMesh的出现为服务通信带来了一场革命，极大地提升了应用程序的可靠性和可维护性。</p>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<h2 id=\"微服务架构\"><a href=\"#微服务架构\" class=\"headerlink\" title=\"微服务架构\"></a>微服务架构</h2>\r\n<p><img src=\"Pasted%20image%2020241107121046.png\" /></p>\r\n<p>DevOps <img src=\"Pasted%20image%2020241107122012.png\" /></p>\r\n<p>架构：SOA，微服务 <img\r\nsrc=\"Pasted%20image%2020241107135636.png\" /></p>\r\n<p>IaaS、PaaS 和 SaaS “即服务（aaS）”：由第三方提供的<a\r\nhref=\"https://www.redhat.com/zh/topics/cloud-computing\">云计算</a>服务，它可让您可以专注于更重要的事务，例如写代码和客户关系。每一种类型的云计算，都能逐步减轻您管理本地基础架构的负担。 </p>\r\n<p>IaaS：作为用户，您只需负责操作系统以及任何数据、应用、中间件和运行时，而提供商会给您访问和管理所需网络、服务器、虚拟化和存储的权限。\r\nPaaS：您只需编写代码、构建和管理您的应用，不再有软件更新或硬件维护方面的麻烦。系统将会为您提供构建和部署环境。\r\nSaaS：提供商将负责处理软件更新、漏洞修复及其他常规软件维护工作，而用户则通过控制面板或\r\nAPI 连接至应用。</p>\r\n<p>Service mesh\r\n它通过在整个服务间通信路径上插入代理，实现了对通信的全面控制和管理。Service\r\nMesh的出现使得服务间通信的管理变得更加简单和可靠，开发人员可以专注于业务逻辑的开发，而不必关注底层的网络通信细节。同时，Service\r\nMesh还提供了强大的安全性、监控和追踪能力，可以帮助运维人员更好地监控和管理服务的运行状态。总之，Service\r\nMesh的出现为服务通信带来了一场革命，极大地提升了应用程序的可靠性和可维护性。</p>\r\n"},{"title":"SSE 流式传输——组会分享","data":"2024-09-08T16:00:00.000Z","_content":"SSE 全称为 **Server-sent events** , 是一种基于 HTTP 协议的通信技术，允许服务器主动向客户端（通常是Web浏览器）发送更新。**这种服务端实时向客户端发送数据的传输方式，其实就是流式传输。**\n\nSSE 与 WebSocket 区别：\n- SSE 使用 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。\n- SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。\n- SSE 默认支持断线重连，WebSocket 需要自己实现。\n- SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket 默认支持传送二进制数据。\n- SSE 支持自定义发送的消息类型。\n\n三种状态（`EventSource.readyState`）\n- EventSource.CONNECTING -> message 事件\n- EventSource.OPEN -> open\n- EventSource.CLOSED -> close","source":"_posts/前端/SSE 流式传输.md","raw":"---\ntitle: SSE 流式传输——组会分享\ndata: 2024-09-09\ntags:\n  - 前端\n  - 后端\n---\nSSE 全称为 **Server-sent events** , 是一种基于 HTTP 协议的通信技术，允许服务器主动向客户端（通常是Web浏览器）发送更新。**这种服务端实时向客户端发送数据的传输方式，其实就是流式传输。**\n\nSSE 与 WebSocket 区别：\n- SSE 使用 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。\n- SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。\n- SSE 默认支持断线重连，WebSocket 需要自己实现。\n- SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket 默认支持传送二进制数据。\n- SSE 支持自定义发送的消息类型。\n\n三种状态（`EventSource.readyState`）\n- EventSource.CONNECTING -> message 事件\n- EventSource.OPEN -> open\n- EventSource.CLOSED -> close","slug":"前端/SSE 流式传输","published":1,"date":"2024-09-09T12:37:23.902Z","updated":"2024-09-10T06:32:23.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vp000np4wvemhgh8tb","content":"<p>SSE 全称为 <strong>Server-sent events</strong> , 是一种基于 HTTP\r\n协议的通信技术，允许服务器主动向客户端（通常是Web浏览器）发送更新。<strong>这种服务端实时向客户端发送数据的传输方式，其实就是流式传输。</strong></p>\r\n<p>SSE 与 WebSocket 区别： - SSE 使用 HTTP\r\n协议，现有的服务器软件都支持。WebSocket 是一个独立协议。 - SSE\r\n属于轻量级，使用简单；WebSocket 协议相对复杂。 - SSE\r\n默认支持断线重连，WebSocket 需要自己实现。 - SSE\r\n一般只用来传送文本，二进制数据需要编码后传送，WebSocket\r\n默认支持传送二进制数据。 - SSE 支持自定义发送的消息类型。</p>\r\n<p>三种状态（<code>EventSource.readyState</code>） -\r\nEventSource.CONNECTING -&gt; message 事件 - EventSource.OPEN -&gt; open\r\n- EventSource.CLOSED -&gt; close</p>\r\n","site":{"data":{}},"excerpt":"","more":"<p>SSE 全称为 <strong>Server-sent events</strong> , 是一种基于 HTTP\r\n协议的通信技术，允许服务器主动向客户端（通常是Web浏览器）发送更新。<strong>这种服务端实时向客户端发送数据的传输方式，其实就是流式传输。</strong></p>\r\n<p>SSE 与 WebSocket 区别： - SSE 使用 HTTP\r\n协议，现有的服务器软件都支持。WebSocket 是一个独立协议。 - SSE\r\n属于轻量级，使用简单；WebSocket 协议相对复杂。 - SSE\r\n默认支持断线重连，WebSocket 需要自己实现。 - SSE\r\n一般只用来传送文本，二进制数据需要编码后传送，WebSocket\r\n默认支持传送二进制数据。 - SSE 支持自定义发送的消息类型。</p>\r\n<p>三种状态（<code>EventSource.readyState</code>） -\r\nEventSource.CONNECTING -&gt; message 事件 - EventSource.OPEN -&gt; open\r\n- EventSource.CLOSED -&gt; close</p>\r\n"},{"title":"LinuxLearning","date":"2024-02-22T16:00:00.000Z","_content":"# linux\n## basic order\n- ls\n    `-l`:详细信息 \n    - 第一个属性：文件类型+属主权限+属组权限+其他用户权限（d目录，-文件，l链接文件）（权限：r可读 w可写 x可执行 -没有 'rwx' 'r-x'）\n\n- pwd 显示目前所在的目录\n- cd\n    `.` is itself\n- touch:create file\n    mkdir:create dir\n- cp A B \n    cope A to B\n    可以将SOURCE文件复制为DEST文件; 如果DEST是一个目录, 则将SOURCE文件复制到该目录下.\n- mv SOURCE DEST可以将SOURCE文件重命名为DEST文件; 如果DEST是一个目录, 则将SOURCE文件移动到该目录下.\n- rm FILE\n- man : learn the use of a order\n- A | B的含义是创建两个进程A和B, 并将A进程的标准输出连接到B进程的标准输入\n- find [目录路径] [expression]\n    expression中:-name [pattern]（可用*和？） -type [type] -mtime [+/-n](+n：n天前，-n：n天内)\n- cat 查看文件\n## 文本处理\n- cat tac(从最后一行倒着显示)\n    -b 显示的时候，在最开始输出行号\n- more/less 一页一页地翻　/string可以查找　(in less)?string 向下查找\n- head/tail -n number 最前或最后几行\n- grep [options] pattern [files]\n    -n：显示匹配行的行号。\n    -r：递归查找子目录中的文件。\n    grep 'a*' x.txt　正则要加''\n## 更改权限\n- chown [who] [file] :change owner (更改文件目录)\n- chmod [ugoa] [+-=] [rwx] (u文件所有者,g所在组,o所有其他用户,a所有用户)\n    chmod [num] [file] r=4,w=2,x=1 如770就是rwxrwx---\n## 进程\n进程就是一个正在运行的程序\n在 Linux 中，默认提供了 6 个文字界面登录窗口和一个图形界面，可以使用 alt+F{1-7}来切换不同的终端机界面\n每一个进程都有一个ＰＩＤ\n前景和背景(背景不能直接ctrl+c停止)\n将 目前 的工作丢到背景中_暂停_：ctrl+z\n### jobs\n观察目前的背景工作状态：jobs [-lrs] r:run s:stop\n'[2]+'里的+:the lastest job\n'[1]-'里的-:the second lastest job\n### fg\n`fg` 取出＋的工作,即lastest\n`fg num`取出[num]工作\n### bg\n让工作在背景下的状态变成运行中：bg\n### kill\nkill -9 %num强制结束[num]\nkiil -9 PID\n-15 正常结束\n-SIGHUP 重启\n-SIGINT 终止\n-SIGKILL 强制终止\n-SIGSTOP ctrl+z\n-SIGTERM = -15  \n### killall\n用命令名字终止\n-i:will ask you one by one\n### priority nice\nwaiting for learning\n### ps\n只能查询自己 bash 进程的 ps -l\n可以查询所有系统运行的进程 ps aux\nＳ状态　R(running) S(sleep) D(sleep但不能唤醒) T(stop) Z\nppid:父进程的PID\nSZ:用掉多少内存\nTIME:使用掉的 CPU 时间\nPRI/NI:执行的优先级，越小越快\n### top\n-p [pid] 指定看某些pid\n在 top 执行过程中可以使用的按键指令：P(sort by %cpu),M(memory)\n### pstree -A\n-p：并同时列出每个 process 的 PID\n看进程的相关性\n## [bash (shell)]( https://juejin.cn/post/7171272222051401735)\n只要能够操作应用程序的接口都能够成为壳程序\n别名　alias lm='ls -al'\n### 变量\necho ${aaa} 显示变量的值\naaa=lyx 赋值，字符串\nname=${aaa}+12138\n\\${}返回变量的值，否则是字符串\ncd /lib/modules/${uname -r}/kernel\n用 env 观察环境变量与常见环境变量说明\n\n## 通配符\nls -l /usr/bin/X*　所有Ｘ开头的文件\n## 快捷键\nctrl+a ctrl+e　到命令行首或尾\n## 端口\n端口是设备与外界通讯交流的出口\n`lsof -i:8080`：查看8080端口占用\n## 重定向和ｐｉｐｅ\n标准输入< 标准输出> 错误输出2>\n单个符号是覆盖数据，2 个符号的是追加数据\n\n## 硬链接和软链接\n\n在Linux文件系统中，磁盘中的文件都有一个索引编号（Inode Index），在Linux中，可以多个文件名指向同一索引节点，这种就是硬链接。\n\n软链接（soft link），也叫符号链接（symbolic link），是指向另一个文件的特殊文件，可以简单理解为一个快捷方式","source":"_posts/其他/LinuxLearning.md","raw":"---\ntitle: LinuxLearning\ndate: 2024-02-23 00:00:00\ntags:\n  - Linux\n---\n# linux\n## basic order\n- ls\n    `-l`:详细信息 \n    - 第一个属性：文件类型+属主权限+属组权限+其他用户权限（d目录，-文件，l链接文件）（权限：r可读 w可写 x可执行 -没有 'rwx' 'r-x'）\n\n- pwd 显示目前所在的目录\n- cd\n    `.` is itself\n- touch:create file\n    mkdir:create dir\n- cp A B \n    cope A to B\n    可以将SOURCE文件复制为DEST文件; 如果DEST是一个目录, 则将SOURCE文件复制到该目录下.\n- mv SOURCE DEST可以将SOURCE文件重命名为DEST文件; 如果DEST是一个目录, 则将SOURCE文件移动到该目录下.\n- rm FILE\n- man : learn the use of a order\n- A | B的含义是创建两个进程A和B, 并将A进程的标准输出连接到B进程的标准输入\n- find [目录路径] [expression]\n    expression中:-name [pattern]（可用*和？） -type [type] -mtime [+/-n](+n：n天前，-n：n天内)\n- cat 查看文件\n## 文本处理\n- cat tac(从最后一行倒着显示)\n    -b 显示的时候，在最开始输出行号\n- more/less 一页一页地翻　/string可以查找　(in less)?string 向下查找\n- head/tail -n number 最前或最后几行\n- grep [options] pattern [files]\n    -n：显示匹配行的行号。\n    -r：递归查找子目录中的文件。\n    grep 'a*' x.txt　正则要加''\n## 更改权限\n- chown [who] [file] :change owner (更改文件目录)\n- chmod [ugoa] [+-=] [rwx] (u文件所有者,g所在组,o所有其他用户,a所有用户)\n    chmod [num] [file] r=4,w=2,x=1 如770就是rwxrwx---\n## 进程\n进程就是一个正在运行的程序\n在 Linux 中，默认提供了 6 个文字界面登录窗口和一个图形界面，可以使用 alt+F{1-7}来切换不同的终端机界面\n每一个进程都有一个ＰＩＤ\n前景和背景(背景不能直接ctrl+c停止)\n将 目前 的工作丢到背景中_暂停_：ctrl+z\n### jobs\n观察目前的背景工作状态：jobs [-lrs] r:run s:stop\n'[2]+'里的+:the lastest job\n'[1]-'里的-:the second lastest job\n### fg\n`fg` 取出＋的工作,即lastest\n`fg num`取出[num]工作\n### bg\n让工作在背景下的状态变成运行中：bg\n### kill\nkill -9 %num强制结束[num]\nkiil -9 PID\n-15 正常结束\n-SIGHUP 重启\n-SIGINT 终止\n-SIGKILL 强制终止\n-SIGSTOP ctrl+z\n-SIGTERM = -15  \n### killall\n用命令名字终止\n-i:will ask you one by one\n### priority nice\nwaiting for learning\n### ps\n只能查询自己 bash 进程的 ps -l\n可以查询所有系统运行的进程 ps aux\nＳ状态　R(running) S(sleep) D(sleep但不能唤醒) T(stop) Z\nppid:父进程的PID\nSZ:用掉多少内存\nTIME:使用掉的 CPU 时间\nPRI/NI:执行的优先级，越小越快\n### top\n-p [pid] 指定看某些pid\n在 top 执行过程中可以使用的按键指令：P(sort by %cpu),M(memory)\n### pstree -A\n-p：并同时列出每个 process 的 PID\n看进程的相关性\n## [bash (shell)]( https://juejin.cn/post/7171272222051401735)\n只要能够操作应用程序的接口都能够成为壳程序\n别名　alias lm='ls -al'\n### 变量\necho ${aaa} 显示变量的值\naaa=lyx 赋值，字符串\nname=${aaa}+12138\n\\${}返回变量的值，否则是字符串\ncd /lib/modules/${uname -r}/kernel\n用 env 观察环境变量与常见环境变量说明\n\n## 通配符\nls -l /usr/bin/X*　所有Ｘ开头的文件\n## 快捷键\nctrl+a ctrl+e　到命令行首或尾\n## 端口\n端口是设备与外界通讯交流的出口\n`lsof -i:8080`：查看8080端口占用\n## 重定向和ｐｉｐｅ\n标准输入< 标准输出> 错误输出2>\n单个符号是覆盖数据，2 个符号的是追加数据\n\n## 硬链接和软链接\n\n在Linux文件系统中，磁盘中的文件都有一个索引编号（Inode Index），在Linux中，可以多个文件名指向同一索引节点，这种就是硬链接。\n\n软链接（soft link），也叫符号链接（symbolic link），是指向另一个文件的特殊文件，可以简单理解为一个快捷方式","slug":"其他/LinuxLearning","published":1,"updated":"2024-02-23T07:24:25.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vq000pp4wv4zred12b","content":"<h1 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h1>\r\n<h2 id=\"basic-order\"><a href=\"#basic-order\" class=\"headerlink\" title=\"basic-order\"></a>basic order</h2>\r\n<ul>\r\n<li>ls <code>-l</code>:详细信息\r\n<ul>\r\n<li>第一个属性：文件类型+属主权限+属组权限+其他用户权限（d目录，-文件，l链接文件）（权限：r可读\r\nw可写 x可执行 -没有 'rwx' 'r-x'）</li>\r\n</ul></li>\r\n<li>pwd 显示目前所在的目录</li>\r\n<li>cd <code>.</code> is itself</li>\r\n<li>touch:create file mkdir:create dir</li>\r\n<li>cp A B cope A to B 可以将SOURCE文件复制为DEST文件;\r\n如果DEST是一个目录, 则将SOURCE文件复制到该目录下.</li>\r\n<li>mv SOURCE DEST可以将SOURCE文件重命名为DEST文件; 如果DEST是一个目录,\r\n则将SOURCE文件移动到该目录下.</li>\r\n<li>rm FILE</li>\r\n<li>man : learn the use of a order</li>\r\n<li>A | B的含义是创建两个进程A和B,\r\n并将A进程的标准输出连接到B进程的标准输入</li>\r\n<li>find [目录路径] [expression] expression中:-name\r\n[pattern]（可用*和？） -type [type] -mtime <a\r\nhref=\"+n：n天前，-n：n天内\">+/-n</a></li>\r\n<li>cat 查看文件 ## 文本处理</li>\r\n<li>cat tac(从最后一行倒着显示) -b 显示的时候，在最开始输出行号</li>\r\n<li>more/less 一页一页地翻　/string可以查找　(in less)?string\r\n向下查找</li>\r\n<li>head/tail -n number 最前或最后几行</li>\r\n<li>grep [options] pattern [files] -n：显示匹配行的行号。\r\n-r：递归查找子目录中的文件。 grep 'a*' x.txt　正则要加'' ##\r\n更改权限</li>\r\n<li>chown [who] [file] :change owner (更改文件目录)</li>\r\n<li>chmod [ugoa] [+-=] [rwx]\r\n(u文件所有者,g所在组,o所有其他用户,a所有用户) chmod [num] [file]\r\nr=4,w=2,x=1 如770就是rwxrwx--- ## 进程 进程就是一个正在运行的程序 在\r\nLinux 中，默认提供了 6 个文字界面登录窗口和一个图形界面，可以使用\r\nalt+F{1-7}来切换不同的终端机界面 每一个进程都有一个ＰＩＤ\r\n前景和背景(背景不能直接ctrl+c停止) 将 目前\r\n的工作丢到背景中_暂停_：ctrl+z ### jobs 观察目前的背景工作状态：jobs\r\n[-lrs] r:run s:stop '[2]+'里的+:the lastest job '[1]-'里的-:the second\r\nlastest job ### fg <code>fg</code> 取出＋的工作,即lastest\r\n<code>fg num</code>取出[num]工作 ### bg\r\n让工作在背景下的状态变成运行中：bg ### kill kill -9 %num强制结束[num]\r\nkiil -9 PID -15 正常结束 -SIGHUP 重启 -SIGINT 终止 -SIGKILL 强制终止\r\n-SIGSTOP ctrl+z -SIGTERM = -15<br />\r\n### killall 用命令名字终止 -i:will ask you one by one ### priority nice\r\nwaiting for learning ### ps 只能查询自己 bash 进程的 ps -l\r\n可以查询所有系统运行的进程 ps aux Ｓ状态　R(running) S(sleep)\r\nD(sleep但不能唤醒) T(stop) Z ppid:父进程的PID SZ:用掉多少内存\r\nTIME:使用掉的 CPU 时间 PRI/NI:执行的优先级，越小越快 ### top -p [pid]\r\n指定看某些pid 在 top 执行过程中可以使用的按键指令：P(sort by\r\n%cpu),M(memory) ### pstree -A -p：并同时列出每个 process 的 PID\r\n看进程的相关性 ## <a\r\nhref=\"https://juejin.cn/post/7171272222051401735\">bash (shell)</a>\r\n只要能够操作应用程序的接口都能够成为壳程序 别名　alias lm='ls -al' ###\r\n变量 echo <span class=\"math inline\">\\({aaa} 显示变量的值\r\naaa=lyx 赋值，字符串\r\nname=\\)</span>{aaa}+12138 ${}返回变量的值，否则是字符串 cd\r\n/lib/modules/${uname -r}/kernel 用 env\r\n观察环境变量与常见环境变量说明</li>\r\n</ul>\r\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2>\r\n<p>ls -l /usr/bin/X*　所有Ｘ开头的文件 ## 快捷键 ctrl+a\r\nctrl+e　到命令行首或尾 ## 端口 端口是设备与外界通讯交流的出口\r\n<code>lsof -i:8080</code>：查看8080端口占用 ## 重定向和ｐｉｐｅ\r\n标准输入&lt; 标准输出&gt; 错误输出2&gt; 单个符号是覆盖数据，2\r\n个符号的是追加数据</p>\r\n<h2 id=\"硬链接和软链接\"><a href=\"#硬链接和软链接\" class=\"headerlink\" title=\"硬链接和软链接\"></a>硬链接和软链接</h2>\r\n<p>在Linux文件系统中，磁盘中的文件都有一个索引编号（Inode\r\nIndex），在Linux中，可以多个文件名指向同一索引节点，这种就是硬链接。</p>\r\n<p>软链接（soft link），也叫符号链接（symbolic\r\nlink），是指向另一个文件的特殊文件，可以简单理解为一个快捷方式</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h1>\r\n<h2 id=\"basic-order\"><a href=\"#basic-order\" class=\"headerlink\" title=\"basic-order\"></a>basic order</h2>\r\n<ul>\r\n<li>ls <code>-l</code>:详细信息\r\n<ul>\r\n<li>第一个属性：文件类型+属主权限+属组权限+其他用户权限（d目录，-文件，l链接文件）（权限：r可读\r\nw可写 x可执行 -没有 'rwx' 'r-x'）</li>\r\n</ul></li>\r\n<li>pwd 显示目前所在的目录</li>\r\n<li>cd <code>.</code> is itself</li>\r\n<li>touch:create file mkdir:create dir</li>\r\n<li>cp A B cope A to B 可以将SOURCE文件复制为DEST文件;\r\n如果DEST是一个目录, 则将SOURCE文件复制到该目录下.</li>\r\n<li>mv SOURCE DEST可以将SOURCE文件重命名为DEST文件; 如果DEST是一个目录,\r\n则将SOURCE文件移动到该目录下.</li>\r\n<li>rm FILE</li>\r\n<li>man : learn the use of a order</li>\r\n<li>A | B的含义是创建两个进程A和B,\r\n并将A进程的标准输出连接到B进程的标准输入</li>\r\n<li>find [目录路径] [expression] expression中:-name\r\n[pattern]（可用*和？） -type [type] -mtime <a\r\nhref=\"+n：n天前，-n：n天内\">+/-n</a></li>\r\n<li>cat 查看文件 ## 文本处理</li>\r\n<li>cat tac(从最后一行倒着显示) -b 显示的时候，在最开始输出行号</li>\r\n<li>more/less 一页一页地翻　/string可以查找　(in less)?string\r\n向下查找</li>\r\n<li>head/tail -n number 最前或最后几行</li>\r\n<li>grep [options] pattern [files] -n：显示匹配行的行号。\r\n-r：递归查找子目录中的文件。 grep 'a*' x.txt　正则要加'' ##\r\n更改权限</li>\r\n<li>chown [who] [file] :change owner (更改文件目录)</li>\r\n<li>chmod [ugoa] [+-=] [rwx]\r\n(u文件所有者,g所在组,o所有其他用户,a所有用户) chmod [num] [file]\r\nr=4,w=2,x=1 如770就是rwxrwx--- ## 进程 进程就是一个正在运行的程序 在\r\nLinux 中，默认提供了 6 个文字界面登录窗口和一个图形界面，可以使用\r\nalt+F{1-7}来切换不同的终端机界面 每一个进程都有一个ＰＩＤ\r\n前景和背景(背景不能直接ctrl+c停止) 将 目前\r\n的工作丢到背景中_暂停_：ctrl+z ### jobs 观察目前的背景工作状态：jobs\r\n[-lrs] r:run s:stop '[2]+'里的+:the lastest job '[1]-'里的-:the second\r\nlastest job ### fg <code>fg</code> 取出＋的工作,即lastest\r\n<code>fg num</code>取出[num]工作 ### bg\r\n让工作在背景下的状态变成运行中：bg ### kill kill -9 %num强制结束[num]\r\nkiil -9 PID -15 正常结束 -SIGHUP 重启 -SIGINT 终止 -SIGKILL 强制终止\r\n-SIGSTOP ctrl+z -SIGTERM = -15<br />\r\n### killall 用命令名字终止 -i:will ask you one by one ### priority nice\r\nwaiting for learning ### ps 只能查询自己 bash 进程的 ps -l\r\n可以查询所有系统运行的进程 ps aux Ｓ状态　R(running) S(sleep)\r\nD(sleep但不能唤醒) T(stop) Z ppid:父进程的PID SZ:用掉多少内存\r\nTIME:使用掉的 CPU 时间 PRI/NI:执行的优先级，越小越快 ### top -p [pid]\r\n指定看某些pid 在 top 执行过程中可以使用的按键指令：P(sort by\r\n%cpu),M(memory) ### pstree -A -p：并同时列出每个 process 的 PID\r\n看进程的相关性 ## <a\r\nhref=\"https://juejin.cn/post/7171272222051401735\">bash (shell)</a>\r\n只要能够操作应用程序的接口都能够成为壳程序 别名　alias lm='ls -al' ###\r\n变量 echo <span class=\"math inline\">\\({aaa} 显示变量的值\r\naaa=lyx 赋值，字符串\r\nname=\\)</span>{aaa}+12138 ${}返回变量的值，否则是字符串 cd\r\n/lib/modules/${uname -r}/kernel 用 env\r\n观察环境变量与常见环境变量说明</li>\r\n</ul>\r\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2>\r\n<p>ls -l /usr/bin/X*　所有Ｘ开头的文件 ## 快捷键 ctrl+a\r\nctrl+e　到命令行首或尾 ## 端口 端口是设备与外界通讯交流的出口\r\n<code>lsof -i:8080</code>：查看8080端口占用 ## 重定向和ｐｉｐｅ\r\n标准输入&lt; 标准输出&gt; 错误输出2&gt; 单个符号是覆盖数据，2\r\n个符号的是追加数据</p>\r\n<h2 id=\"硬链接和软链接\"><a href=\"#硬链接和软链接\" class=\"headerlink\" title=\"硬链接和软链接\"></a>硬链接和软链接</h2>\r\n<p>在Linux文件系统中，磁盘中的文件都有一个索引编号（Inode\r\nIndex），在Linux中，可以多个文件名指向同一索引节点，这种就是硬链接。</p>\r\n<p>软链接（soft link），也叫符号链接（symbolic\r\nlink），是指向另一个文件的特殊文件，可以简单理解为一个快捷方式</p>\r\n"},{"title":"DB","data":"2024-11-09T16:00:00.000Z","hidden":false,"_content":"\n## 启动mysql\n `mysqld --standalone`\n## 主键\n\n用 自增id 或 GUID\n\n全局唯一GUID类型：也称UUID，使用一种全局唯一的字符串作为主键，类似`8f55d96b-8acc-4636-8cb8-76bf8abc2f57`。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。\n\n`alter table last_view_ats add primary key (`value`);`\n\n## 多对一: 外键\n\n在`students`表中，通过`class_id`的字段，可以把数据与另一张表关联起来，这种列称为`外键`。\n\n## 多对多: 中间表\n\n相当于存储所有的边\n\n## 索引\n\n通过对数据库表创建索引，可以提高查询速度；\n\n# 命令\n\n## 进入db\n\nUSE db;\n\n## 查看一个表的所有信息\n\nselect * from table;\n\n## CREATE TABLE\n\n```sql\nDROP TABLE IF EXISTS `user_accounts`;\nCREATE TABLE `user_accounts` (\n  `id`             int(100) unsigned NOT NULL AUTO_INCREMENT primary key,\n  `password`       varchar(32)       NOT NULL DEFAULT '' COMMENT '用户密码',\n  `reset_password` tinyint(32)       NOT NULL DEFAULT 0 COMMENT '用户类型：0－不需要重置密码；1-需要重置密码',\n  `mobile`         varchar(20)       NOT NULL DEFAULT '' COMMENT '手机',\n  `create_at`      timestamp(6)      NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n  `update_at`      timestamp(6)      NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n  -- 创建唯一索引，不允许重复\n  UNIQUE INDEX idx_user_mobile(`mobile`)\n)\n```\n\n\n## 条件\n\n```sql\nSELECT * FROM <表名> WHERE <条件表达式>\n```\n\nAND OR NOT\n\n不等于 <>\n\n使用LIKE判断相似 : `key LIKE %bc%' ( '%表示任意字符，例如'ab%'将匹配'ab'，'abc'，'abcd' )\n\nSELECT 列1, 列2, 列3 FROM ...\n\n## 排序\n\nSELECT id, name, gender, score FROM students ORDER BY score;\n\nSELECT id, name, gender, score FROM students ORDER BY score DESC;\n\nSELECT id, name, gender, score FROM students ORDER BY score DESC, gender; 先按`score`列倒序，如果有相同分数的，再按`gender`列排序\n\n## 计数\n\n把 * 变成 count(*)\n\nSUM AVG MAX MIN\n\n## 分组\n\nCROUP BY\n\n## 修改列信息\n\nALTER TABLE name\nADD PRIMARY KEY (columnName);\n\nALTER TABLE name\nDROP COLUMN aaa;\n\n## 删除\n\nDELETE FROM tablename\nWHERE ...","source":"_posts/后端/DB.md","raw":"---\ntitle: DB\ndata: 2024-11-10\nhidden: false\ntags:\n  - 后端\n  - 数据库\n---\n\n## 启动mysql\n `mysqld --standalone`\n## 主键\n\n用 自增id 或 GUID\n\n全局唯一GUID类型：也称UUID，使用一种全局唯一的字符串作为主键，类似`8f55d96b-8acc-4636-8cb8-76bf8abc2f57`。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。\n\n`alter table last_view_ats add primary key (`value`);`\n\n## 多对一: 外键\n\n在`students`表中，通过`class_id`的字段，可以把数据与另一张表关联起来，这种列称为`外键`。\n\n## 多对多: 中间表\n\n相当于存储所有的边\n\n## 索引\n\n通过对数据库表创建索引，可以提高查询速度；\n\n# 命令\n\n## 进入db\n\nUSE db;\n\n## 查看一个表的所有信息\n\nselect * from table;\n\n## CREATE TABLE\n\n```sql\nDROP TABLE IF EXISTS `user_accounts`;\nCREATE TABLE `user_accounts` (\n  `id`             int(100) unsigned NOT NULL AUTO_INCREMENT primary key,\n  `password`       varchar(32)       NOT NULL DEFAULT '' COMMENT '用户密码',\n  `reset_password` tinyint(32)       NOT NULL DEFAULT 0 COMMENT '用户类型：0－不需要重置密码；1-需要重置密码',\n  `mobile`         varchar(20)       NOT NULL DEFAULT '' COMMENT '手机',\n  `create_at`      timestamp(6)      NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n  `update_at`      timestamp(6)      NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n  -- 创建唯一索引，不允许重复\n  UNIQUE INDEX idx_user_mobile(`mobile`)\n)\n```\n\n\n## 条件\n\n```sql\nSELECT * FROM <表名> WHERE <条件表达式>\n```\n\nAND OR NOT\n\n不等于 <>\n\n使用LIKE判断相似 : `key LIKE %bc%' ( '%表示任意字符，例如'ab%'将匹配'ab'，'abc'，'abcd' )\n\nSELECT 列1, 列2, 列3 FROM ...\n\n## 排序\n\nSELECT id, name, gender, score FROM students ORDER BY score;\n\nSELECT id, name, gender, score FROM students ORDER BY score DESC;\n\nSELECT id, name, gender, score FROM students ORDER BY score DESC, gender; 先按`score`列倒序，如果有相同分数的，再按`gender`列排序\n\n## 计数\n\n把 * 变成 count(*)\n\nSUM AVG MAX MIN\n\n## 分组\n\nCROUP BY\n\n## 修改列信息\n\nALTER TABLE name\nADD PRIMARY KEY (columnName);\n\nALTER TABLE name\nDROP COLUMN aaa;\n\n## 删除\n\nDELETE FROM tablename\nWHERE ...","slug":"后端/DB","published":1,"date":"2024-11-07T13:10:33.433Z","updated":"2024-12-19T09:16:01.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vr000sp4wvgyzn87ky","content":"<h2 id=\"启动mysql\"><a href=\"#启动mysql\" class=\"headerlink\" title=\"启动mysql\"></a>启动mysql</h2>\r\n<p><code>mysqld --standalone</code> ## 主键</p>\r\n<p>用 自增id 或 GUID</p>\r\n<p>全局唯一GUID类型：也称UUID，使用一种全局唯一的字符串作为主键，类似<code>8f55d96b-8acc-4636-8cb8-76bf8abc2f57</code>。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</p>\r\n<p><code>alter table last_view_ats add primary key (</code>value<code>);</code></p>\r\n<h2 id=\"多对一-外键\"><a href=\"#多对一-外键\" class=\"headerlink\" title=\"多对一-外键\"></a>多对一: 外键</h2>\r\n<p>在<code>students</code>表中，通过<code>class_id</code>的字段，可以把数据与另一张表关联起来，这种列称为<code>外键</code>。</p>\r\n<h2 id=\"多对多-中间表\"><a href=\"#多对多-中间表\" class=\"headerlink\" title=\"多对多-中间表\"></a>多对多: 中间表</h2>\r\n<p>相当于存储所有的边</p>\r\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2>\r\n<p>通过对数据库表创建索引，可以提高查询速度；</p>\r\n<h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1>\r\n<h2 id=\"进入db\"><a href=\"#进入db\" class=\"headerlink\" title=\"进入db\"></a>进入db</h2>\r\n<p>USE db;</p>\r\n<h2 id=\"查看一个表的所有信息\"><a href=\"#查看一个表的所有信息\" class=\"headerlink\" title=\"查看一个表的所有信息\"></a>查看一个表的所有信息</h2>\r\n<p>select * from table;</p>\r\n<h2 id=\"create-table\"><a href=\"#create-table\" class=\"headerlink\" title=\"create-table\"></a>CREATE TABLE</h2>\r\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">EXISTS</span> `user_accounts`;<br><span class=\"hljs-keyword\">CREATE TABLE</span> `user_accounts` (<br>  `id`             <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">100</span>) unsigned <span class=\"hljs-keyword\">NOT NULL</span> AUTO_INCREMENT <span class=\"hljs-keyword\">primary key</span>,<br>  `password`       <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">32</span>)       <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">&#x27;&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;用户密码&#x27;</span>,<br>  `reset_password` tinyint(<span class=\"hljs-number\">32</span>)       <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span> COMMENT <span class=\"hljs-string\">&#x27;用户类型：0－不需要重置密码；1-需要重置密码&#x27;</span>,<br>  `mobile`         <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>)       <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">&#x27;&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;手机&#x27;</span>,<br>  `create_at`      <span class=\"hljs-type\">timestamp</span>(<span class=\"hljs-number\">6</span>)      <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span>(<span class=\"hljs-number\">6</span>),<br>  `update_at`      <span class=\"hljs-type\">timestamp</span>(<span class=\"hljs-number\">6</span>)      <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span>(<span class=\"hljs-number\">6</span>) <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span>(<span class=\"hljs-number\">6</span>),<br>  <span class=\"hljs-comment\">-- 创建唯一索引，不允许重复</span><br>  <span class=\"hljs-keyword\">UNIQUE</span> INDEX idx_user_mobile(`mobile`)<br>)<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2>\r\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span>表名<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>条件表达式<span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure>\r\n<p>AND OR NOT</p>\r\n<p>不等于 &lt;&gt;</p>\r\n<p>使用LIKE判断相似 : `key LIKE %bc%' (\r\n'%表示任意字符，例如'ab%'将匹配'ab'，'abc'，'abcd' )</p>\r\n<p>SELECT 列1, 列2, 列3 FROM ...</p>\r\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2>\r\n<p>SELECT id, name, gender, score FROM students ORDER BY score;</p>\r\n<p>SELECT id, name, gender, score FROM students ORDER BY score DESC;</p>\r\n<p>SELECT id, name, gender, score FROM students ORDER BY score DESC,\r\ngender;\r\n先按<code>score</code>列倒序，如果有相同分数的，再按<code>gender</code>列排序</p>\r\n<h2 id=\"计数\"><a href=\"#计数\" class=\"headerlink\" title=\"计数\"></a>计数</h2>\r\n<p>把 * 变成 count(*)</p>\r\n<p>SUM AVG MAX MIN</p>\r\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2>\r\n<p>CROUP BY</p>\r\n<h2 id=\"修改列信息\"><a href=\"#修改列信息\" class=\"headerlink\" title=\"修改列信息\"></a>修改列信息</h2>\r\n<p>ALTER TABLE name ADD PRIMARY KEY (columnName);</p>\r\n<p>ALTER TABLE name DROP COLUMN aaa;</p>\r\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2>\r\n<p>DELETE FROM tablename WHERE ...</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"启动mysql\"><a href=\"#启动mysql\" class=\"headerlink\" title=\"启动mysql\"></a>启动mysql</h2>\r\n<p><code>mysqld --standalone</code> ## 主键</p>\r\n<p>用 自增id 或 GUID</p>\r\n<p>全局唯一GUID类型：也称UUID，使用一种全局唯一的字符串作为主键，类似<code>8f55d96b-8acc-4636-8cb8-76bf8abc2f57</code>。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</p>\r\n<p><code>alter table last_view_ats add primary key (</code>value<code>);</code></p>\r\n<h2 id=\"多对一-外键\"><a href=\"#多对一-外键\" class=\"headerlink\" title=\"多对一-外键\"></a>多对一: 外键</h2>\r\n<p>在<code>students</code>表中，通过<code>class_id</code>的字段，可以把数据与另一张表关联起来，这种列称为<code>外键</code>。</p>\r\n<h2 id=\"多对多-中间表\"><a href=\"#多对多-中间表\" class=\"headerlink\" title=\"多对多-中间表\"></a>多对多: 中间表</h2>\r\n<p>相当于存储所有的边</p>\r\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2>\r\n<p>通过对数据库表创建索引，可以提高查询速度；</p>\r\n<h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1>\r\n<h2 id=\"进入db\"><a href=\"#进入db\" class=\"headerlink\" title=\"进入db\"></a>进入db</h2>\r\n<p>USE db;</p>\r\n<h2 id=\"查看一个表的所有信息\"><a href=\"#查看一个表的所有信息\" class=\"headerlink\" title=\"查看一个表的所有信息\"></a>查看一个表的所有信息</h2>\r\n<p>select * from table;</p>\r\n<h2 id=\"create-table\"><a href=\"#create-table\" class=\"headerlink\" title=\"create-table\"></a>CREATE TABLE</h2>\r\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">EXISTS</span> `user_accounts`;<br><span class=\"hljs-keyword\">CREATE TABLE</span> `user_accounts` (<br>  `id`             <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">100</span>) unsigned <span class=\"hljs-keyword\">NOT NULL</span> AUTO_INCREMENT <span class=\"hljs-keyword\">primary key</span>,<br>  `password`       <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">32</span>)       <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">&#x27;&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;用户密码&#x27;</span>,<br>  `reset_password` tinyint(<span class=\"hljs-number\">32</span>)       <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span> COMMENT <span class=\"hljs-string\">&#x27;用户类型：0－不需要重置密码；1-需要重置密码&#x27;</span>,<br>  `mobile`         <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>)       <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">&#x27;&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;手机&#x27;</span>,<br>  `create_at`      <span class=\"hljs-type\">timestamp</span>(<span class=\"hljs-number\">6</span>)      <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span>(<span class=\"hljs-number\">6</span>),<br>  `update_at`      <span class=\"hljs-type\">timestamp</span>(<span class=\"hljs-number\">6</span>)      <span class=\"hljs-keyword\">NOT NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span>(<span class=\"hljs-number\">6</span>) <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span>(<span class=\"hljs-number\">6</span>),<br>  <span class=\"hljs-comment\">-- 创建唯一索引，不允许重复</span><br>  <span class=\"hljs-keyword\">UNIQUE</span> INDEX idx_user_mobile(`mobile`)<br>)<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2>\r\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span>表名<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>条件表达式<span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure>\r\n<p>AND OR NOT</p>\r\n<p>不等于 &lt;&gt;</p>\r\n<p>使用LIKE判断相似 : `key LIKE %bc%' (\r\n'%表示任意字符，例如'ab%'将匹配'ab'，'abc'，'abcd' )</p>\r\n<p>SELECT 列1, 列2, 列3 FROM ...</p>\r\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2>\r\n<p>SELECT id, name, gender, score FROM students ORDER BY score;</p>\r\n<p>SELECT id, name, gender, score FROM students ORDER BY score DESC;</p>\r\n<p>SELECT id, name, gender, score FROM students ORDER BY score DESC,\r\ngender;\r\n先按<code>score</code>列倒序，如果有相同分数的，再按<code>gender</code>列排序</p>\r\n<h2 id=\"计数\"><a href=\"#计数\" class=\"headerlink\" title=\"计数\"></a>计数</h2>\r\n<p>把 * 变成 count(*)</p>\r\n<p>SUM AVG MAX MIN</p>\r\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2>\r\n<p>CROUP BY</p>\r\n<h2 id=\"修改列信息\"><a href=\"#修改列信息\" class=\"headerlink\" title=\"修改列信息\"></a>修改列信息</h2>\r\n<p>ALTER TABLE name ADD PRIMARY KEY (columnName);</p>\r\n<p>ALTER TABLE name DROP COLUMN aaa;</p>\r\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2>\r\n<p>DELETE FROM tablename WHERE ...</p>\r\n"},{"title":"Bilibili清理计划","_content":"\n# Bilibili清理计划\n\n## 数据\n- https://socialsisteryi.github.io/bilibili-API-collect/\n- 爬取部分关注up主或合集\n- 爬取图片\n- 人工增删改查关注up主或合集\n\t- 编辑页面\n\t- 存储\n\t\t- 合集列表\n\t\t- 已看的bvid\n\n\n## 页面\n- 主页面（推荐页）\n- 导航页\n- 编辑页面\n\n## 按时间（没看过的，不能太晚也不能太早），弹幕数、评论数（不能太少了）进行限制\n\n## 随机推送\n## 网页嵌入视频\nhttps://chiperman.github.io/zai-wang-ye-zhong-qian-ru-bi-li-bi-li-shi-pin/\n\n## 设计\nhttps://js.design/community?category=detail&type=resource&id=6566fdcf0b61f2d1f3d184f4","source":"_posts/学习项目/Bilibili清理计划.md","raw":"---\ntitle: Bilibili清理计划\ntags:\n  - 前端\n  - 学习项目\n---\n\n# Bilibili清理计划\n\n## 数据\n- https://socialsisteryi.github.io/bilibili-API-collect/\n- 爬取部分关注up主或合集\n- 爬取图片\n- 人工增删改查关注up主或合集\n\t- 编辑页面\n\t- 存储\n\t\t- 合集列表\n\t\t- 已看的bvid\n\n\n## 页面\n- 主页面（推荐页）\n- 导航页\n- 编辑页面\n\n## 按时间（没看过的，不能太晚也不能太早），弹幕数、评论数（不能太少了）进行限制\n\n## 随机推送\n## 网页嵌入视频\nhttps://chiperman.github.io/zai-wang-ye-zhong-qian-ru-bi-li-bi-li-shi-pin/\n\n## 设计\nhttps://js.design/community?category=detail&type=resource&id=6566fdcf0b61f2d1f3d184f4","slug":"学习项目/Bilibili清理计划","published":1,"date":"2024-02-24T04:09:34.764Z","updated":"2024-09-23T03:40:36.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vs000up4wv5bwm24zk","content":"<h1 id=\"bilibili清理计划\"><a href=\"#bilibili清理计划\" class=\"headerlink\" title=\"bilibili清理计划\"></a>Bilibili清理计划</h1>\r\n<h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2>\r\n<ul>\r\n<li>https://socialsisteryi.github.io/bilibili-API-collect/</li>\r\n<li>爬取部分关注up主或合集</li>\r\n<li>爬取图片</li>\r\n<li>人工增删改查关注up主或合集\r\n<ul>\r\n<li>编辑页面</li>\r\n<li>存储\r\n<ul>\r\n<li>合集列表</li>\r\n<li>已看的bvid</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"页面\"><a href=\"#页面\" class=\"headerlink\" title=\"页面\"></a>页面</h2>\r\n<ul>\r\n<li>主页面（推荐页）</li>\r\n<li>导航页</li>\r\n<li>编辑页面</li>\r\n</ul>\r\n<h2\r\nid=\"按时间没看过的不能太晚也不能太早弹幕数评论数不能太少了进行限制\">按时间（没看过的，不能太晚也不能太早），弹幕数、评论数（不能太少了）进行限制</h2>\r\n<h2 id=\"随机推送\"><a href=\"#随机推送\" class=\"headerlink\" title=\"随机推送\"></a>随机推送</h2>\r\n<h2 id=\"网页嵌入视频\"><a href=\"#网页嵌入视频\" class=\"headerlink\" title=\"网页嵌入视频\"></a>网页嵌入视频</h2>\r\n<p>https://chiperman.github.io/zai-wang-ye-zhong-qian-ru-bi-li-bi-li-shi-pin/</p>\r\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2>\r\n<p>https://js.design/community?category=detail&amp;type=resource&amp;id=6566fdcf0b61f2d1f3d184f4</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"bilibili清理计划\"><a href=\"#bilibili清理计划\" class=\"headerlink\" title=\"bilibili清理计划\"></a>Bilibili清理计划</h1>\r\n<h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2>\r\n<ul>\r\n<li>https://socialsisteryi.github.io/bilibili-API-collect/</li>\r\n<li>爬取部分关注up主或合集</li>\r\n<li>爬取图片</li>\r\n<li>人工增删改查关注up主或合集\r\n<ul>\r\n<li>编辑页面</li>\r\n<li>存储\r\n<ul>\r\n<li>合集列表</li>\r\n<li>已看的bvid</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"页面\"><a href=\"#页面\" class=\"headerlink\" title=\"页面\"></a>页面</h2>\r\n<ul>\r\n<li>主页面（推荐页）</li>\r\n<li>导航页</li>\r\n<li>编辑页面</li>\r\n</ul>\r\n<h2\r\nid=\"按时间没看过的不能太晚也不能太早弹幕数评论数不能太少了进行限制\">按时间（没看过的，不能太晚也不能太早），弹幕数、评论数（不能太少了）进行限制</h2>\r\n<h2 id=\"随机推送\"><a href=\"#随机推送\" class=\"headerlink\" title=\"随机推送\"></a>随机推送</h2>\r\n<h2 id=\"网页嵌入视频\"><a href=\"#网页嵌入视频\" class=\"headerlink\" title=\"网页嵌入视频\"></a>网页嵌入视频</h2>\r\n<p>https://chiperman.github.io/zai-wang-ye-zhong-qian-ru-bi-li-bi-li-shi-pin/</p>\r\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2>\r\n<p>https://js.design/community?category=detail&amp;type=resource&amp;id=6566fdcf0b61f2d1f3d184f4</p>\r\n"},{"title":"Python 爬虫","date":"2024-02-22T16:00:00.000Z","_content":"## 基本\n\nPython virtual environment (venv)\n\n$ pip list\n\n这将显示当前虚拟环境中安装的所有软件包及其版本号。\n\n## request库\n\n```py\nr = requests.get(URL)\n# or put/delete/head/options\n```\n\n```py\nresponse = requests.get(url, params = p_data)\n# p_data 是dict结构， 给url添加参数\nresponse.encoding\nr.status_code == requests.codes.ok # 相当于r.ok\n# status_code 状态码对象\n```\n\nr.content 是字节形式内容，text是编码后的内容（一般是Unicode编码）\n\n[当http状态码为418时，可以发送user-agent](https://stackoverflow.com/questions/63388521/response-code-418-when-trying-to-web-scrape-the-api)\n\n```\nheaders={\n\t'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36' \n}\n```\n\n## BeautifulSoup 和 lxml\n\n`bs1 = BeautifulSoup(ht.content, 'lxml')`\n\nlxml是xml和html的解析器\n\nbs1.prettify(),用于美化HTML或XML文档的输出。\n\n```python\nfrom lxml import html # 若换为etree则为普通树结构\ntext = requests.get(url).text\nht = html.fromstring(text)\nh1Ele = h1.xpath('//*[@id=\"firstHeading\"]')[0] # 所有元素中id属性为~的\n```\n\n## bs1.find() and find_all() and select()\n\n## XPath\n\n## [[MongoDB]]\n\n详见 https://cuiqingcai.com/202243.html\n\n还有自己的程序\n\n## 疑问\n","source":"_posts/其他/Python 爬虫.md","raw":"---\ntitle: Python 爬虫\ndate: 2024-02-23 00:00:00\ntag:\n  - Python\n---\n## 基本\n\nPython virtual environment (venv)\n\n$ pip list\n\n这将显示当前虚拟环境中安装的所有软件包及其版本号。\n\n## request库\n\n```py\nr = requests.get(URL)\n# or put/delete/head/options\n```\n\n```py\nresponse = requests.get(url, params = p_data)\n# p_data 是dict结构， 给url添加参数\nresponse.encoding\nr.status_code == requests.codes.ok # 相当于r.ok\n# status_code 状态码对象\n```\n\nr.content 是字节形式内容，text是编码后的内容（一般是Unicode编码）\n\n[当http状态码为418时，可以发送user-agent](https://stackoverflow.com/questions/63388521/response-code-418-when-trying-to-web-scrape-the-api)\n\n```\nheaders={\n\t'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36' \n}\n```\n\n## BeautifulSoup 和 lxml\n\n`bs1 = BeautifulSoup(ht.content, 'lxml')`\n\nlxml是xml和html的解析器\n\nbs1.prettify(),用于美化HTML或XML文档的输出。\n\n```python\nfrom lxml import html # 若换为etree则为普通树结构\ntext = requests.get(url).text\nht = html.fromstring(text)\nh1Ele = h1.xpath('//*[@id=\"firstHeading\"]')[0] # 所有元素中id属性为~的\n```\n\n## bs1.find() and find_all() and select()\n\n## XPath\n\n## [[MongoDB]]\n\n详见 https://cuiqingcai.com/202243.html\n\n还有自己的程序\n\n## 疑问\n","slug":"其他/Python 爬虫","published":1,"updated":"2024-09-02T07:56:30.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vs000wp4wv44a245ur","content":"<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2>\r\n<p>Python virtual environment (venv)</p>\r\n<p>$ pip list</p>\r\n<p>这将显示当前虚拟环境中安装的所有软件包及其版本号。</p>\r\n<h2 id=\"request库\"><a href=\"#request库\" class=\"headerlink\" title=\"request库\"></a>request库</h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\">r = requests.get(URL)<br><span class=\"hljs-comment\"># or put/delete/head/options</span><br></code></pre></td></tr></table></figure>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\">response = requests.get(url, params = p_data)<br><span class=\"hljs-comment\"># p_data 是dict结构， 给url添加参数</span><br>response.encoding<br>r.status_code == requests.codes.ok <span class=\"hljs-comment\"># 相当于r.ok</span><br><span class=\"hljs-comment\"># status_code 状态码对象</span><br></code></pre></td></tr></table></figure>\r\n<p>r.content 是字节形式内容，text是编码后的内容（一般是Unicode编码）</p>\r\n<p><a\r\nhref=\"https://stackoverflow.com/questions/63388521/response-code-418-when-trying-to-web-scrape-the-api\">当http状态码为418时，可以发送user-agent</a></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">headers=&#123;<br>\t&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&#x27; <br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"beautifulsoup-和-lxml\"><a href=\"#beautifulsoup-和-lxml\" class=\"headerlink\" title=\"beautifulsoup-和-lxml\"></a>BeautifulSoup 和 lxml</h2>\r\n<p><code>bs1 = BeautifulSoup(ht.content, 'lxml')</code></p>\r\n<p>lxml是xml和html的解析器</p>\r\n<p>bs1.prettify(),用于美化HTML或XML文档的输出。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> html <span class=\"hljs-comment\"># 若换为etree则为普通树结构</span><br>text = requests.get(url).text<br>ht = html.fromstring(text)<br>h1Ele = h1.xpath(<span class=\"hljs-string\">&#x27;//*[@id=&quot;firstHeading&quot;]&#x27;</span>)[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\"># 所有元素中id属性为~的</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"bs1.find-and-find_all-and-select\">bs1.find() and find_all() and\r\nselect()</h2>\r\n<h2 id=\"xpath\"><a href=\"#xpath\" class=\"headerlink\" title=\"xpath\"></a>XPath</h2>\r\n<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>[[MongoDB]]</h2>\r\n<p>详见 https://cuiqingcai.com/202243.html</p>\r\n<p>还有自己的程序</p>\r\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2>\r\n<p>Python virtual environment (venv)</p>\r\n<p>$ pip list</p>\r\n<p>这将显示当前虚拟环境中安装的所有软件包及其版本号。</p>\r\n<h2 id=\"request库\"><a href=\"#request库\" class=\"headerlink\" title=\"request库\"></a>request库</h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\">r = requests.get(URL)<br><span class=\"hljs-comment\"># or put/delete/head/options</span><br></code></pre></td></tr></table></figure>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs py\">response = requests.get(url, params = p_data)<br><span class=\"hljs-comment\"># p_data 是dict结构， 给url添加参数</span><br>response.encoding<br>r.status_code == requests.codes.ok <span class=\"hljs-comment\"># 相当于r.ok</span><br><span class=\"hljs-comment\"># status_code 状态码对象</span><br></code></pre></td></tr></table></figure>\r\n<p>r.content 是字节形式内容，text是编码后的内容（一般是Unicode编码）</p>\r\n<p><a\r\nhref=\"https://stackoverflow.com/questions/63388521/response-code-418-when-trying-to-web-scrape-the-api\">当http状态码为418时，可以发送user-agent</a></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">headers=&#123;<br>\t&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&#x27; <br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"beautifulsoup-和-lxml\"><a href=\"#beautifulsoup-和-lxml\" class=\"headerlink\" title=\"beautifulsoup-和-lxml\"></a>BeautifulSoup 和 lxml</h2>\r\n<p><code>bs1 = BeautifulSoup(ht.content, 'lxml')</code></p>\r\n<p>lxml是xml和html的解析器</p>\r\n<p>bs1.prettify(),用于美化HTML或XML文档的输出。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> html <span class=\"hljs-comment\"># 若换为etree则为普通树结构</span><br>text = requests.get(url).text<br>ht = html.fromstring(text)<br>h1Ele = h1.xpath(<span class=\"hljs-string\">&#x27;//*[@id=&quot;firstHeading&quot;]&#x27;</span>)[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\"># 所有元素中id属性为~的</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"bs1.find-and-find_all-and-select\">bs1.find() and find_all() and\r\nselect()</h2>\r\n<h2 id=\"xpath\"><a href=\"#xpath\" class=\"headerlink\" title=\"xpath\"></a>XPath</h2>\r\n<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>[[MongoDB]]</h2>\r\n<p>详见 https://cuiqingcai.com/202243.html</p>\r\n<p>还有自己的程序</p>\r\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2>\r\n"},{"title":"Todo Program","date":"2024-05-18T16:00:00.000Z","hidden":true,"_content":"- 浏览器插件，标记go语言圣经已读部分","source":"_posts/学习项目/Todo Programs.md","raw":"---\ntitle: Todo Program\ndate: 2024-05-19 00:00:00\ntags:\n  - 学习项目\nhidden: true\n---\n- 浏览器插件，标记go语言圣经已读部分","slug":"学习项目/Todo Programs","published":1,"updated":"2024-09-23T03:41:02.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vt000yp4wvau3afyq3","content":"<ul>\r\n<li>浏览器插件，标记go语言圣经已读部分</li>\r\n</ul>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<ul>\r\n<li>浏览器插件，标记go语言圣经已读部分</li>\r\n</ul>\r\n"},{"title":"Vim","data":"2024-08-23T16:00:00.000Z","_content":"- 选中`(), {}, []`内的东西\n\t- `v/y/d + i/a + (/{/[`\n\t- i: inner, a: around\n- 多文本替换的操作指令是 `:substitute`，一般直接用 `:s`；替换的完整指令公式是：`:[range]s[ubstitute]/{pattern}/{string}/[flags]`；\n- `gb` 命令可以选中与我们光标所在的单词相同的且未被选中的第一个单词（当前往下搜索）\n- **die**删除整个文件中的文字 （e: entire）\n- https://www.golang-mix.com/code/58  （很全）\n- https://harttle.land/2016/08/08/vim-search-in-file.html （查找和替换）\n\n## 寄存器\nVim 有 48 个寄存器，`y`, `d`, `p` 等命令一般使用匿名寄存器 `\"\"`， 支持剪切板的 Vim 会支持额外的选区寄存器 `\"*` 和 `\"+`。 更多 Vim 寄存器的信息，可以参考这篇文章：[Vim 寄存器完全手册](https://harttle.land/2016/07/25/vim-registers.html)。\n\n`\"*` 和 `\"+` 在 Mac 和 Windows 中，都是指系统剪切板（clipboard），例如 `\"*yy` 即可复制当前行到剪切板。 其他程序中复制的内容也会被存储到这两个寄存器中。 在 X11 系统中（绝大多数带有桌面环境的 Linux 发行版），二者是有区别的：\n\n- `\"*` 指 X11 中的 PRIMARY 选区，即鼠标选中区域。在桌面系统中可按鼠标中键粘贴。\n- `\"+` 指 X11 中的 CLIPBOARD 选区，即系统剪切板。在桌面系统中可按 Ctrl+V 粘贴。\n\n上述哪个寄存器对应于你的剪切板和 Linux 发行版有关，在配置 Vim 前可以测试一下。 比如用 Vim 打开一个文件，在 normal 模式下（进入 Vim 后默认的模式）键入 `gg\"*yG`， 来把当前文件内容拷贝到 `\"*` 寄存器。键入 `gg\"+yG` 拷贝到 `\"+` 寄存器。\n\n到目前为止，你已经可以通过命令来拷贝粘贴内容了。接下来我们希望通过 Vim 配置， 让匿名寄存器和系统剪切板同步。","source":"_posts/其他/Vim.md","raw":"---\ntitle: Vim\ndata: 2024-08-24\ntags:\n  - Vim\n  - 学习笔记\n---\n- 选中`(), {}, []`内的东西\n\t- `v/y/d + i/a + (/{/[`\n\t- i: inner, a: around\n- 多文本替换的操作指令是 `:substitute`，一般直接用 `:s`；替换的完整指令公式是：`:[range]s[ubstitute]/{pattern}/{string}/[flags]`；\n- `gb` 命令可以选中与我们光标所在的单词相同的且未被选中的第一个单词（当前往下搜索）\n- **die**删除整个文件中的文字 （e: entire）\n- https://www.golang-mix.com/code/58  （很全）\n- https://harttle.land/2016/08/08/vim-search-in-file.html （查找和替换）\n\n## 寄存器\nVim 有 48 个寄存器，`y`, `d`, `p` 等命令一般使用匿名寄存器 `\"\"`， 支持剪切板的 Vim 会支持额外的选区寄存器 `\"*` 和 `\"+`。 更多 Vim 寄存器的信息，可以参考这篇文章：[Vim 寄存器完全手册](https://harttle.land/2016/07/25/vim-registers.html)。\n\n`\"*` 和 `\"+` 在 Mac 和 Windows 中，都是指系统剪切板（clipboard），例如 `\"*yy` 即可复制当前行到剪切板。 其他程序中复制的内容也会被存储到这两个寄存器中。 在 X11 系统中（绝大多数带有桌面环境的 Linux 发行版），二者是有区别的：\n\n- `\"*` 指 X11 中的 PRIMARY 选区，即鼠标选中区域。在桌面系统中可按鼠标中键粘贴。\n- `\"+` 指 X11 中的 CLIPBOARD 选区，即系统剪切板。在桌面系统中可按 Ctrl+V 粘贴。\n\n上述哪个寄存器对应于你的剪切板和 Linux 发行版有关，在配置 Vim 前可以测试一下。 比如用 Vim 打开一个文件，在 normal 模式下（进入 Vim 后默认的模式）键入 `gg\"*yG`， 来把当前文件内容拷贝到 `\"*` 寄存器。键入 `gg\"+yG` 拷贝到 `\"+` 寄存器。\n\n到目前为止，你已经可以通过命令来拷贝粘贴内容了。接下来我们希望通过 Vim 配置， 让匿名寄存器和系统剪切板同步。","slug":"其他/Vim","published":1,"date":"2024-08-23T16:31:05.067Z","updated":"2024-09-02T14:18:54.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vu0010p4wvgifo75ux","content":"<ul>\r\n<li>选中<code>(), &#123;&#125;, []</code>内的东西\r\n<ul>\r\n<li><code>v/y/d + i/a + (/&#123;/[</code></li>\r\n<li>i: inner, a: around</li>\r\n</ul></li>\r\n<li>多文本替换的操作指令是 <code>:substitute</code>，一般直接用 <code>:s</code>；替换的完整指令公式是：<code>:[range]s[ubstitute]/&#123;pattern&#125;/&#123;string&#125;/[flags]</code>；</li>\r\n<li><code>gb</code> 命令可以选中与我们光标所在的单词相同的且未被选中的第一个单词（当前往下搜索）</li>\r\n<li><strong>die</strong>删除整个文件中的文字 （e: entire）</li>\r\n<li>https://www.golang-mix.com/code/58 （很全）</li>\r\n<li>https://harttle.land/2016/08/08/vim-search-in-file.html\r\n（查找和替换）</li>\r\n</ul>\r\n<h2 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h2>\r\n<p>Vim 有 48\r\n个寄存器，<code>y</code>, <code>d</code>, <code>p</code> 等命令一般使用匿名寄存器 <code>\"\"</code>，\r\n支持剪切板的 Vim\r\n会支持额外的选区寄存器 <code>\"*</code> 和 <code>\"+</code>。 更多 Vim\r\n寄存器的信息，可以参考这篇文章：<a\r\nhref=\"https://harttle.land/2016/07/25/vim-registers.html\">Vim\r\n寄存器完全手册</a>。</p>\r\n<p><code>\"*</code> 和 <code>\"+</code> 在 Mac 和 Windows\r\n中，都是指系统剪切板（clipboard），例如 <code>\"*yy</code> 即可复制当前行到剪切板。\r\n其他程序中复制的内容也会被存储到这两个寄存器中。 在 X11\r\n系统中（绝大多数带有桌面环境的 Linux 发行版），二者是有区别的：</p>\r\n<ul>\r\n<li><code>\"*</code> 指 X11 中的 PRIMARY\r\n选区，即鼠标选中区域。在桌面系统中可按鼠标中键粘贴。</li>\r\n<li><code>\"+</code> 指 X11 中的 CLIPBOARD\r\n选区，即系统剪切板。在桌面系统中可按 Ctrl+V 粘贴。</li>\r\n</ul>\r\n<p>上述哪个寄存器对应于你的剪切板和 Linux 发行版有关，在配置 Vim\r\n前可以测试一下。 比如用 Vim 打开一个文件，在 normal 模式下（进入 Vim\r\n后默认的模式）键入 <code>gg\"*yG</code>，\r\n来把当前文件内容拷贝到 <code>\"*</code> 寄存器。键入 <code>gg\"+yG</code> 拷贝到 <code>\"+</code> 寄存器。</p>\r\n<p>到目前为止，你已经可以通过命令来拷贝粘贴内容了。接下来我们希望通过\r\nVim 配置， 让匿名寄存器和系统剪切板同步。</p>\r\n","site":{"data":{}},"excerpt":"","more":"<ul>\r\n<li>选中<code>(), &#123;&#125;, []</code>内的东西\r\n<ul>\r\n<li><code>v/y/d + i/a + (/&#123;/[</code></li>\r\n<li>i: inner, a: around</li>\r\n</ul></li>\r\n<li>多文本替换的操作指令是 <code>:substitute</code>，一般直接用 <code>:s</code>；替换的完整指令公式是：<code>:[range]s[ubstitute]/&#123;pattern&#125;/&#123;string&#125;/[flags]</code>；</li>\r\n<li><code>gb</code> 命令可以选中与我们光标所在的单词相同的且未被选中的第一个单词（当前往下搜索）</li>\r\n<li><strong>die</strong>删除整个文件中的文字 （e: entire）</li>\r\n<li>https://www.golang-mix.com/code/58 （很全）</li>\r\n<li>https://harttle.land/2016/08/08/vim-search-in-file.html\r\n（查找和替换）</li>\r\n</ul>\r\n<h2 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h2>\r\n<p>Vim 有 48\r\n个寄存器，<code>y</code>, <code>d</code>, <code>p</code> 等命令一般使用匿名寄存器 <code>\"\"</code>，\r\n支持剪切板的 Vim\r\n会支持额外的选区寄存器 <code>\"*</code> 和 <code>\"+</code>。 更多 Vim\r\n寄存器的信息，可以参考这篇文章：<a\r\nhref=\"https://harttle.land/2016/07/25/vim-registers.html\">Vim\r\n寄存器完全手册</a>。</p>\r\n<p><code>\"*</code> 和 <code>\"+</code> 在 Mac 和 Windows\r\n中，都是指系统剪切板（clipboard），例如 <code>\"*yy</code> 即可复制当前行到剪切板。\r\n其他程序中复制的内容也会被存储到这两个寄存器中。 在 X11\r\n系统中（绝大多数带有桌面环境的 Linux 发行版），二者是有区别的：</p>\r\n<ul>\r\n<li><code>\"*</code> 指 X11 中的 PRIMARY\r\n选区，即鼠标选中区域。在桌面系统中可按鼠标中键粘贴。</li>\r\n<li><code>\"+</code> 指 X11 中的 CLIPBOARD\r\n选区，即系统剪切板。在桌面系统中可按 Ctrl+V 粘贴。</li>\r\n</ul>\r\n<p>上述哪个寄存器对应于你的剪切板和 Linux 发行版有关，在配置 Vim\r\n前可以测试一下。 比如用 Vim 打开一个文件，在 normal 模式下（进入 Vim\r\n后默认的模式）键入 <code>gg\"*yG</code>，\r\n来把当前文件内容拷贝到 <code>\"*</code> 寄存器。键入 <code>gg\"+yG</code> 拷贝到 <code>\"+</code> 寄存器。</p>\r\n<p>到目前为止，你已经可以通过命令来拷贝粘贴内容了。接下来我们希望通过\r\nVim 配置， 让匿名寄存器和系统剪切板同步。</p>\r\n"},{"title":"GIT","date":"2024-02-22T16:00:00.000Z","_content":"## git rm 会删除工作区文件！\n## 创建仓库\n\n```\n$ mkdir learngit //在此处建立一个文件夹\n$ cd learngit //到文件夹里面\n$ pwd //看看我在哪个文件夹\n/Users/michael/learngit\n$ git init //把这个目录变成Git可以管理的仓库\n```\n\n## 注意记事本\n\n千万不要使用Windows自带的**记事本**编辑任何文本文件。\n\n## `git add a.txt`\n\n把修改添加到暂存区\n\nGit管理的是修改，不是文件\n\n## `git commit -m \"提交说明\" `\n\n把暂存区的修改提交到仓库\n\n## `ls`\n\n查看此文件夹下的文件\n\n## `git status`\n\n### 查看的状态\n\n- 没有add的修改\n- 没有commit留在暂存区的修改\n\n### 简单方式\n\n```console\n$ git status -s\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt\n```\n\n新添加的未跟踪文件前面有 `??` 标记，新添加到暂存区中的文件前面有 `A` 标记，修改过的文件前面有 `M` 标记。 输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示： `README` 文件在工作区已修改但尚未暂存，而 `lib/simplegit.rb` 文件已修改且已暂存。 `Rakefile` 文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。\n\n## `git diff a.txt`\n\n查看改变后的和在仓库里的版本的差别\n\ngit diff：工作区和暂存区\n\ngit diff --staged： 暂存区和仓库\n\n## `git log`\n\n查看历史记录\n\n`--pretty=oneline`\n\n查看版本号\n\n## 版本表示\n\n用`HEAD`表示当前版本，上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，往上100个版本`HEAD~100`。\n\n## Reset\n1. 使用 `--soft` 选项，你可以重置HEAD到指定的提交，但不会影响工作目录或暂存区。\n2. 使用 `--hard`，你可以重置HEAD到指定的提交，并且清除工作目录和暂存区的所有更改。\n\n## 撤回版本回退\n\n找到那个`append GPL`的`commit id`是`1094adb...`，于是就可以指定回到未来的某个版本：\n\n```\n$ git reset --hard 1094a\nHEAD is now at 83b0afe append GPL\n```\n\n版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。\n\n## `git reflog`\n\n记录你的每一次命令（commit，reset……）\n\n和那个命令的版本号\n\n## `git checkout -- a.txt`\n\n总之，就是让这个文件回到最近一次`git commit`或`git add`时的状态。\n\n删除之后也可以\n\n## `cat a.txt`\n\n查看文件内容\n\n## 撤销修改\n\n1.没有`git add`时（在工作区），用`git checkout -- file`\n\n2.已经`git add`时（在暂存区），先`git reset HEAD <file>`回退到1.，再按1.操作\n\n3.已经`git commit`时，用`git reset`回退版本\n\n## 删除\n\n`git rm`删掉，并且`git commit`\n\n没git rm之前可以checkout恢复\n\n`$ git rm --cached README` 在仓库里删除但是工作区保留\n\n## 分支\n\n- git switch -c dev 创建`dev`分支，然后切换到`dev`分支\n- git switch dev 切换到`dev`分支\n- git branch dev 创建\n- git branch -d dev 删除dev分支\n\n- git merge dev 合并指定分支到当前分支。\n\n- git merge dev 合并冲突时会把当前分支的工作区的此文件变成这个样子\n\n  ```\n  Git is a distributed version control system.\n  Git is free software distributed under the GPL.\n  Git has a mutable index called stage.\n  Git tracks changes of files.\n  <<<<<<< HEAD\n  Creating a new branch is quick & simple.\n  =======\n  Creating a new branch is quick AND simple.\n  >>>>>>> feature1\n  ```\n\n  可以手动修改之后再提交\n\n  注意merge的是修改，不是文件\n\n## merge报错\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5effe96b58ea4ad6a6dbdbde8d50009a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n不写原因直接3，4步骤，写原因则1，2，3，4步骤\n\n1. 按键盘字母 i 进入insert模式\n2. 修改最上面那行黄色合并信息,可以不修改\n3. 按键盘左上角\"Esc\"\n4. 输入\":wq\",注意是冒号+wq,按回车键即可\n\n## 改变分支策略\n\n```\ngit merge --no-ff -m \"commit describtion\" dev\n```\n\nmerge的同时commit \n\n## 临时储藏分支\n\n把工作区存起来，不用commit，直接switch到另一个分支\n\n存入：`$ git stash `\n\n查看stash：`git stash list`\n\n恢复：一是用`git stash apply`恢复，但是恢复后，stash内容并不删除，你需要用`git stash drop`来删除；\n\n另一种方式是用`git stash pop`，恢复的同时把stash内容也删了：\n\n## 在另一个分支上重复一个提交（修改）\n\n```\n$ git cherry-pick 4c805e2\n```\n\n把另一分支上的4c805e2提交重复，注意是重复内容，但commit号是另一个\n\n## 别名 alias\n\n`git config --global alias.ch checkout`\n\n以后就可以用ch代表checkout\n\n## 给提交弄上标签\n\n### 轻量标签\n\n`$ git tag v1.0` 给HEAD（lastest commit）打上标签\n`$ git tag` 看有什么标签\n\n`$ git tag v1.0 f52c633` 给commit id为f52...的提交打上标签\n\n### 附注标签\n\n`$ git tag -a v1.4 -m \"my version 1.4\"`\n\n`git show <tagname>` 查看标签信息，这个标签有哪些提交\n\n### 共享标签\n\n`git push` 命令并不会传送标签到远程仓库服务器上，在创建完标签后你必须显式地推送标签到共享服务器上\n\n`$ git push origin v1.5`\n\n### 删除标签\n\n`$ git tag -d v1.4-lw`\n\n`$ git push origin --delete <tagname>` 还需删除远程标签\n\n## 远程库 remote\n- [把本地仓库推送到github上（添加远程库）](https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440)\n\n- 名字即简写，代替整个 URL\n\n- git remote add origin2 http...\n\n- `$ git push origin dev` 把本地dev分支推送到远程库里\n\n- `$ git remote -v` 需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。\n\n- 克隆仓库\n\n  ```console\n  $ git clone https://github.com/libgit2/libgit2 mylibgit\n  ```\n\n  在当前目录下创建一个名为 “mylibgit” 的目录作为仓库\n  \n  要只克隆一个特定分支，你可以使用 `--single-branch` 选项来限制克隆的分支。以下是使用 `git clone` 命令只克隆一个分支的示例：\n\n```\ngit clone --single-branch --branch <branch-name> <repository-url>\n```\n  \n- `$git fetch <remote>` 访问远程仓库，从中拉取所有你还没有的数据\n\n- 他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先抓取他们的工作并将其合并进你的工作后才能推送。\n\n- `$ git remote remove paul` 移除远程库\n\n- Git中的\"upstream branch\"（上游分支）是指本地分支所跟踪的远程分支。当你执行`git push`命令时，Git会将本地分支的更改推送到相应的远程分支。错误消息中提供了一个解决方案，即使用`git push --set-upstream origin master`命令。这个命令将推送当前分支的更改到远程仓库的\"master\"分支，并将其设置为当前分支的上游分支（也就是将本地分支与远程分支进行关联）。\n\n## 多人协作的工作模式\n\n1. 首先，可以试图用`git push origin <branch-name>`推送自己的修改；\n2. 如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；\n3. 如果合并有冲突，则解决冲突，并在本地提交；\n4. 没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！\n\n（如果`git pull`提示`no tracking information`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream-to <branch-name> origin/<branch-name>`。）\n\n## rebase\n\n- `git rebase <branch>`：将当前分支上的提交应用到 `<branch>` 分支上。\n- rebase操作可以把本地未push的分叉提交历史整理成直线；\n- rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n\n## 图形界面工具\n\n[Source Tree](https://www.sourcetreeapp.com/)\n\n\n## 重命名\n\n```console\n$ git mv README.md README\n```\n\n其实，运行 `git mv` 就相当于运行了下面三条命令：\n\n```console\n$ mv README.md README\n$ git rm README.md\n$ git add README\n```\n\n## .gitignore\n\n*Github上传*项目时，可能会遇到文件*上传*不*上去*，可以检查.gitignore用记事本打开看看文件的名字是否在里面，然后删除保存即可。\n\n## to be learned\n\nhttps://www.jianshu.com/p/098d85a58bf1\n\n## Pull Request\nhttps://juejin.cn/post/6844903821521469448\n","source":"_posts/其他/GIT.md","raw":"---\ntitle: GIT\ndate: 2024-02-23 00:00:00\ntags:\n  - GIT\n---\n## git rm 会删除工作区文件！\n## 创建仓库\n\n```\n$ mkdir learngit //在此处建立一个文件夹\n$ cd learngit //到文件夹里面\n$ pwd //看看我在哪个文件夹\n/Users/michael/learngit\n$ git init //把这个目录变成Git可以管理的仓库\n```\n\n## 注意记事本\n\n千万不要使用Windows自带的**记事本**编辑任何文本文件。\n\n## `git add a.txt`\n\n把修改添加到暂存区\n\nGit管理的是修改，不是文件\n\n## `git commit -m \"提交说明\" `\n\n把暂存区的修改提交到仓库\n\n## `ls`\n\n查看此文件夹下的文件\n\n## `git status`\n\n### 查看的状态\n\n- 没有add的修改\n- 没有commit留在暂存区的修改\n\n### 简单方式\n\n```console\n$ git status -s\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt\n```\n\n新添加的未跟踪文件前面有 `??` 标记，新添加到暂存区中的文件前面有 `A` 标记，修改过的文件前面有 `M` 标记。 输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示： `README` 文件在工作区已修改但尚未暂存，而 `lib/simplegit.rb` 文件已修改且已暂存。 `Rakefile` 文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。\n\n## `git diff a.txt`\n\n查看改变后的和在仓库里的版本的差别\n\ngit diff：工作区和暂存区\n\ngit diff --staged： 暂存区和仓库\n\n## `git log`\n\n查看历史记录\n\n`--pretty=oneline`\n\n查看版本号\n\n## 版本表示\n\n用`HEAD`表示当前版本，上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，往上100个版本`HEAD~100`。\n\n## Reset\n1. 使用 `--soft` 选项，你可以重置HEAD到指定的提交，但不会影响工作目录或暂存区。\n2. 使用 `--hard`，你可以重置HEAD到指定的提交，并且清除工作目录和暂存区的所有更改。\n\n## 撤回版本回退\n\n找到那个`append GPL`的`commit id`是`1094adb...`，于是就可以指定回到未来的某个版本：\n\n```\n$ git reset --hard 1094a\nHEAD is now at 83b0afe append GPL\n```\n\n版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。\n\n## `git reflog`\n\n记录你的每一次命令（commit，reset……）\n\n和那个命令的版本号\n\n## `git checkout -- a.txt`\n\n总之，就是让这个文件回到最近一次`git commit`或`git add`时的状态。\n\n删除之后也可以\n\n## `cat a.txt`\n\n查看文件内容\n\n## 撤销修改\n\n1.没有`git add`时（在工作区），用`git checkout -- file`\n\n2.已经`git add`时（在暂存区），先`git reset HEAD <file>`回退到1.，再按1.操作\n\n3.已经`git commit`时，用`git reset`回退版本\n\n## 删除\n\n`git rm`删掉，并且`git commit`\n\n没git rm之前可以checkout恢复\n\n`$ git rm --cached README` 在仓库里删除但是工作区保留\n\n## 分支\n\n- git switch -c dev 创建`dev`分支，然后切换到`dev`分支\n- git switch dev 切换到`dev`分支\n- git branch dev 创建\n- git branch -d dev 删除dev分支\n\n- git merge dev 合并指定分支到当前分支。\n\n- git merge dev 合并冲突时会把当前分支的工作区的此文件变成这个样子\n\n  ```\n  Git is a distributed version control system.\n  Git is free software distributed under the GPL.\n  Git has a mutable index called stage.\n  Git tracks changes of files.\n  <<<<<<< HEAD\n  Creating a new branch is quick & simple.\n  =======\n  Creating a new branch is quick AND simple.\n  >>>>>>> feature1\n  ```\n\n  可以手动修改之后再提交\n\n  注意merge的是修改，不是文件\n\n## merge报错\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5effe96b58ea4ad6a6dbdbde8d50009a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n不写原因直接3，4步骤，写原因则1，2，3，4步骤\n\n1. 按键盘字母 i 进入insert模式\n2. 修改最上面那行黄色合并信息,可以不修改\n3. 按键盘左上角\"Esc\"\n4. 输入\":wq\",注意是冒号+wq,按回车键即可\n\n## 改变分支策略\n\n```\ngit merge --no-ff -m \"commit describtion\" dev\n```\n\nmerge的同时commit \n\n## 临时储藏分支\n\n把工作区存起来，不用commit，直接switch到另一个分支\n\n存入：`$ git stash `\n\n查看stash：`git stash list`\n\n恢复：一是用`git stash apply`恢复，但是恢复后，stash内容并不删除，你需要用`git stash drop`来删除；\n\n另一种方式是用`git stash pop`，恢复的同时把stash内容也删了：\n\n## 在另一个分支上重复一个提交（修改）\n\n```\n$ git cherry-pick 4c805e2\n```\n\n把另一分支上的4c805e2提交重复，注意是重复内容，但commit号是另一个\n\n## 别名 alias\n\n`git config --global alias.ch checkout`\n\n以后就可以用ch代表checkout\n\n## 给提交弄上标签\n\n### 轻量标签\n\n`$ git tag v1.0` 给HEAD（lastest commit）打上标签\n`$ git tag` 看有什么标签\n\n`$ git tag v1.0 f52c633` 给commit id为f52...的提交打上标签\n\n### 附注标签\n\n`$ git tag -a v1.4 -m \"my version 1.4\"`\n\n`git show <tagname>` 查看标签信息，这个标签有哪些提交\n\n### 共享标签\n\n`git push` 命令并不会传送标签到远程仓库服务器上，在创建完标签后你必须显式地推送标签到共享服务器上\n\n`$ git push origin v1.5`\n\n### 删除标签\n\n`$ git tag -d v1.4-lw`\n\n`$ git push origin --delete <tagname>` 还需删除远程标签\n\n## 远程库 remote\n- [把本地仓库推送到github上（添加远程库）](https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440)\n\n- 名字即简写，代替整个 URL\n\n- git remote add origin2 http...\n\n- `$ git push origin dev` 把本地dev分支推送到远程库里\n\n- `$ git remote -v` 需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。\n\n- 克隆仓库\n\n  ```console\n  $ git clone https://github.com/libgit2/libgit2 mylibgit\n  ```\n\n  在当前目录下创建一个名为 “mylibgit” 的目录作为仓库\n  \n  要只克隆一个特定分支，你可以使用 `--single-branch` 选项来限制克隆的分支。以下是使用 `git clone` 命令只克隆一个分支的示例：\n\n```\ngit clone --single-branch --branch <branch-name> <repository-url>\n```\n  \n- `$git fetch <remote>` 访问远程仓库，从中拉取所有你还没有的数据\n\n- 他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先抓取他们的工作并将其合并进你的工作后才能推送。\n\n- `$ git remote remove paul` 移除远程库\n\n- Git中的\"upstream branch\"（上游分支）是指本地分支所跟踪的远程分支。当你执行`git push`命令时，Git会将本地分支的更改推送到相应的远程分支。错误消息中提供了一个解决方案，即使用`git push --set-upstream origin master`命令。这个命令将推送当前分支的更改到远程仓库的\"master\"分支，并将其设置为当前分支的上游分支（也就是将本地分支与远程分支进行关联）。\n\n## 多人协作的工作模式\n\n1. 首先，可以试图用`git push origin <branch-name>`推送自己的修改；\n2. 如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；\n3. 如果合并有冲突，则解决冲突，并在本地提交；\n4. 没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！\n\n（如果`git pull`提示`no tracking information`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream-to <branch-name> origin/<branch-name>`。）\n\n## rebase\n\n- `git rebase <branch>`：将当前分支上的提交应用到 `<branch>` 分支上。\n- rebase操作可以把本地未push的分叉提交历史整理成直线；\n- rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n\n## 图形界面工具\n\n[Source Tree](https://www.sourcetreeapp.com/)\n\n\n## 重命名\n\n```console\n$ git mv README.md README\n```\n\n其实，运行 `git mv` 就相当于运行了下面三条命令：\n\n```console\n$ mv README.md README\n$ git rm README.md\n$ git add README\n```\n\n## .gitignore\n\n*Github上传*项目时，可能会遇到文件*上传*不*上去*，可以检查.gitignore用记事本打开看看文件的名字是否在里面，然后删除保存即可。\n\n## to be learned\n\nhttps://www.jianshu.com/p/098d85a58bf1\n\n## Pull Request\nhttps://juejin.cn/post/6844903821521469448\n","slug":"其他/GIT","published":1,"updated":"2024-08-06T16:19:50.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vu0013p4wvb5ma1spv","content":"<h2 id=\"git-rm-会删除工作区文件\"><a href=\"#git-rm-会删除工作区文件\" class=\"headerlink\" title=\"git-rm-会删除工作区文件\"></a>git rm 会删除工作区文件！</h2>\r\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ mkdir learngit //在此处建立一个文件夹<br>$ cd learngit //到文件夹里面<br>$ pwd //看看我在哪个文件夹<br>/Users/michael/learngit<br>$ git init //把这个目录变成Git可以管理的仓库<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"注意记事本\"><a href=\"#注意记事本\" class=\"headerlink\" title=\"注意记事本\"></a>注意记事本</h2>\r\n<p>千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。</p>\r\n<h2 id=\"git-add-a.txt\"><a href=\"#git-add-a.txt\" class=\"headerlink\" title=\"git-add-a.txt\"></a><code>git add a.txt</code></h2>\r\n<p>把修改添加到暂存区</p>\r\n<p>Git管理的是修改，不是文件</p>\r\n<h2\r\nid=\"git-commit--m-提交说明\"><code>git commit -m \"提交说明\"</code></h2>\r\n<p>把暂存区的修改提交到仓库</p>\r\n<h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a><code>ls</code></h2>\r\n<p>查看此文件夹下的文件</p>\r\n<h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git-status\"></a><code>git status</code></h2>\r\n<h3 id=\"查看的状态\"><a href=\"#查看的状态\" class=\"headerlink\" title=\"查看的状态\"></a>查看的状态</h3>\r\n<ul>\r\n<li>没有add的修改</li>\r\n<li>没有commit留在暂存区的修改</li>\r\n</ul>\r\n<h3 id=\"简单方式\"><a href=\"#简单方式\" class=\"headerlink\" title=\"简单方式\"></a>简单方式</h3>\r\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git status -s</span><br> M README<br>MM Rakefile<br>A  lib/git.rb<br>M  lib/simplegit.rb<br>?? LICENSE.txt<br></code></pre></td></tr></table></figure>\r\n<p>新添加的未跟踪文件前面有 <code>??</code>\r\n标记，新添加到暂存区中的文件前面有 <code>A</code>\r\n标记，修改过的文件前面有 <code>M</code> 标记。\r\n输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示：\r\n<code>README</code> 文件在工作区已修改但尚未暂存，而\r\n<code>lib/simplegit.rb</code> 文件已修改且已暂存。 <code>Rakefile</code>\r\n文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。</p>\r\n<h2 id=\"git-diff-a.txt\"><a href=\"#git-diff-a.txt\" class=\"headerlink\" title=\"git-diff-a.txt\"></a><code>git diff a.txt</code></h2>\r\n<p>查看改变后的和在仓库里的版本的差别</p>\r\n<p>git diff：工作区和暂存区</p>\r\n<p>git diff --staged： 暂存区和仓库</p>\r\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git-log\"></a><code>git log</code></h2>\r\n<p>查看历史记录</p>\r\n<p><code>--pretty=oneline</code></p>\r\n<p>查看版本号</p>\r\n<h2 id=\"版本表示\"><a href=\"#版本表示\" class=\"headerlink\" title=\"版本表示\"></a>版本表示</h2>\r\n<p>用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，往上100个版本<code>HEAD~100</code>。</p>\r\n<h2 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>Reset</h2>\r\n<ol type=\"1\">\r\n<li>使用 <code>--soft</code>\r\n选项，你可以重置HEAD到指定的提交，但不会影响工作目录或暂存区。</li>\r\n<li>使用\r\n<code>--hard</code>，你可以重置HEAD到指定的提交，并且清除工作目录和暂存区的所有更改。</li>\r\n</ol>\r\n<h2 id=\"撤回版本回退\"><a href=\"#撤回版本回退\" class=\"headerlink\" title=\"撤回版本回退\"></a>撤回版本回退</h2>\r\n<p>找到那个<code>append GPL</code>的<code>commit id</code>是<code>1094adb...</code>，于是就可以指定回到未来的某个版本：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ git reset --hard 1094a<br>HEAD is now at 83b0afe append GPL<br></code></pre></td></tr></table></figure>\r\n<p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>\r\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git-reflog\"></a><code>git reflog</code></h2>\r\n<p>记录你的每一次命令（commit，reset……）</p>\r\n<p>和那个命令的版本号</p>\r\n<h2 id=\"git-checkout----a.txt\"><a href=\"#git-checkout----a.txt\" class=\"headerlink\" title=\"git-checkout----a.txt\"></a><code>git checkout -- a.txt</code></h2>\r\n<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>\r\n<p>删除之后也可以</p>\r\n<h2 id=\"cat-a.txt\"><a href=\"#cat-a.txt\" class=\"headerlink\" title=\"cat-a.txt\"></a><code>cat a.txt</code></h2>\r\n<p>查看文件内容</p>\r\n<h2 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h2>\r\n<p>1.没有<code>git add</code>时（在工作区），用<code>git checkout -- file</code></p>\r\n<p>2.已经<code>git add</code>时（在暂存区），先<code>git reset HEAD &lt;file&gt;</code>回退到1.，再按1.操作</p>\r\n<p>3.已经<code>git commit</code>时，用<code>git reset</code>回退版本</p>\r\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2>\r\n<p><code>git rm</code>删掉，并且<code>git commit</code></p>\r\n<p>没git rm之前可以checkout恢复</p>\r\n<p><code>$ git rm --cached README</code> 在仓库里删除但是工作区保留</p>\r\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2>\r\n<ul>\r\n<li><p>git switch -c dev\r\n创建<code>dev</code>分支，然后切换到<code>dev</code>分支</p></li>\r\n<li><p>git switch dev 切换到<code>dev</code>分支</p></li>\r\n<li><p>git branch dev 创建</p></li>\r\n<li><p>git branch -d dev 删除dev分支</p></li>\r\n<li><p>git merge dev 合并指定分支到当前分支。</p></li>\r\n<li><p>git merge dev\r\n合并冲突时会把当前分支的工作区的此文件变成这个样子</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">Git is a distributed version control system.<br>Git is free software distributed under the GPL.<br>Git has a mutable index called stage.<br>Git tracks changes of files.<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>Creating a new branch is quick &amp; simple.<br>=======<br>Creating a new branch is quick AND simple.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1<br></code></pre></td></tr></table></figure>\r\n<p>可以手动修改之后再提交</p>\r\n<p>注意merge的是修改，不是文件</p></li>\r\n</ul>\r\n<h2 id=\"merge报错\"><a href=\"#merge报错\" class=\"headerlink\" title=\"merge报错\"></a>merge报错</h2>\r\n<p><img\r\nsrc=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5effe96b58ea4ad6a6dbdbde8d50009a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" /></p>\r\n<p>不写原因直接3，4步骤，写原因则1，2，3，4步骤</p>\r\n<ol type=\"1\">\r\n<li>按键盘字母 i 进入insert模式</li>\r\n<li>修改最上面那行黄色合并信息,可以不修改</li>\r\n<li>按键盘左上角\"Esc\"</li>\r\n<li>输入\":wq\",注意是冒号+wq,按回车键即可</li>\r\n</ol>\r\n<h2 id=\"改变分支策略\"><a href=\"#改变分支策略\" class=\"headerlink\" title=\"改变分支策略\"></a>改变分支策略</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git merge --no-ff -m &quot;commit describtion&quot; dev<br></code></pre></td></tr></table></figure>\r\n<p>merge的同时commit</p>\r\n<h2 id=\"临时储藏分支\"><a href=\"#临时储藏分支\" class=\"headerlink\" title=\"临时储藏分支\"></a>临时储藏分支</h2>\r\n<p>把工作区存起来，不用commit，直接switch到另一个分支</p>\r\n<p>存入：<code>$ git stash</code></p>\r\n<p>查看stash：<code>git stash list</code></p>\r\n<p>恢复：一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p>\r\n<p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p>\r\n<h2\r\nid=\"在另一个分支上重复一个提交修改\">在另一个分支上重复一个提交（修改）</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ git cherry-pick 4c805e2<br></code></pre></td></tr></table></figure>\r\n<p>把另一分支上的4c805e2提交重复，注意是重复内容，但commit号是另一个</p>\r\n<h2 id=\"别名-alias\"><a href=\"#别名-alias\" class=\"headerlink\" title=\"别名-alias\"></a>别名 alias</h2>\r\n<p><code>git config --global alias.ch checkout</code></p>\r\n<p>以后就可以用ch代表checkout</p>\r\n<h2 id=\"给提交弄上标签\"><a href=\"#给提交弄上标签\" class=\"headerlink\" title=\"给提交弄上标签\"></a>给提交弄上标签</h2>\r\n<h3 id=\"轻量标签\"><a href=\"#轻量标签\" class=\"headerlink\" title=\"轻量标签\"></a>轻量标签</h3>\r\n<p><code>$ git tag v1.0</code> 给HEAD（lastest commit）打上标签\r\n<code>$ git tag</code> 看有什么标签</p>\r\n<p><code>$ git tag v1.0 f52c633</code> 给commit\r\nid为f52...的提交打上标签</p>\r\n<h3 id=\"附注标签\"><a href=\"#附注标签\" class=\"headerlink\" title=\"附注标签\"></a>附注标签</h3>\r\n<p><code>$ git tag -a v1.4 -m \"my version 1.4\"</code></p>\r\n<p><code>git show &lt;tagname&gt;</code>\r\n查看标签信息，这个标签有哪些提交</p>\r\n<h3 id=\"共享标签\"><a href=\"#共享标签\" class=\"headerlink\" title=\"共享标签\"></a>共享标签</h3>\r\n<p><code>git push</code>\r\n命令并不会传送标签到远程仓库服务器上，在创建完标签后你必须显式地推送标签到共享服务器上</p>\r\n<p><code>$ git push origin v1.5</code></p>\r\n<h3 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a>删除标签</h3>\r\n<p><code>$ git tag -d v1.4-lw</code></p>\r\n<p><code>$ git push origin --delete &lt;tagname&gt;</code>\r\n还需删除远程标签</p>\r\n<h2 id=\"远程库-remote\"><a href=\"#远程库-remote\" class=\"headerlink\" title=\"远程库-remote\"></a>远程库 remote</h2>\r\n<ul>\r\n<li><p><a\r\nhref=\"https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440\">把本地仓库推送到github上（添加远程库）</a></p></li>\r\n<li><p>名字即简写，代替整个 URL</p></li>\r\n<li><p>git remote add origin2 http...</p></li>\r\n<li><p><code>$ git push origin dev</code>\r\n把本地dev分支推送到远程库里</p></li>\r\n<li><p><code>$ git remote -v</code> 需要读写远程仓库使用的 Git\r\n保存的简写与其对应的 URL。</p></li>\r\n<li><p>克隆仓库</p>\r\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/libgit2/libgit2 mylibgit</span><br></code></pre></td></tr></table></figure>\r\n<p>在当前目录下创建一个名为 “mylibgit” 的目录作为仓库</p>\r\n<p>要只克隆一个特定分支，你可以使用 <code>--single-branch</code> 选项来限制克隆的分支。以下是使用 <code>git clone</code> 命令只克隆一个分支的示例：</p></li>\r\n</ul>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git clone --single-branch --branch &lt;branch-name&gt; &lt;repository-url&gt;<br></code></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><code>$git fetch &lt;remote&gt;</code>\r\n访问远程仓库，从中拉取所有你还没有的数据</p></li>\r\n<li><p>他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。\r\n你必须先抓取他们的工作并将其合并进你的工作后才能推送。</p></li>\r\n<li><p><code>$ git remote remove paul</code> 移除远程库</p></li>\r\n<li><p>Git中的\"upstream\r\nbranch\"（上游分支）是指本地分支所跟踪的远程分支。当你执行<code>git push</code>命令时，Git会将本地分支的更改推送到相应的远程分支。错误消息中提供了一个解决方案，即使用<code>git push --set-upstream origin master</code>命令。这个命令将推送当前分支的更改到远程仓库的\"master\"分支，并将其设置为当前分支的上游分支（也就是将本地分支与远程分支进行关联）。</p></li>\r\n</ul>\r\n<h2 id=\"多人协作的工作模式\"><a href=\"#多人协作的工作模式\" class=\"headerlink\" title=\"多人协作的工作模式\"></a>多人协作的工作模式</h2>\r\n<ol type=\"1\">\r\n<li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li>\r\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>\r\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\r\n<li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li>\r\n</ol>\r\n<p>（如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。）</p>\r\n<h2 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h2>\r\n<ul>\r\n<li><code>git rebase &lt;branch&gt;</code>：将当前分支上的提交应用到 <code>&lt;branch&gt;</code> 分支上。</li>\r\n<li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li>\r\n<li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li>\r\n</ul>\r\n<h2 id=\"图形界面工具\"><a href=\"#图形界面工具\" class=\"headerlink\" title=\"图形界面工具\"></a>图形界面工具</h2>\r\n<p><a href=\"https://www.sourcetreeapp.com/\">Source Tree</a></p>\r\n<h2 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h2>\r\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">mv</span> README.md README</span><br></code></pre></td></tr></table></figure>\r\n<p>其实，运行 <code>git mv</code> 就相当于运行了下面三条命令：</p>\r\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">mv</span> README.md README</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">rm</span> README.md</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git add README</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\"gitignore\"></a>.gitignore</h2>\r\n<p><em>Github上传</em>项目时，可能会遇到文件<em>上传</em>不<em>上去</em>，可以检查.gitignore用记事本打开看看文件的名字是否在里面，然后删除保存即可。</p>\r\n<h2 id=\"to-be-learned\"><a href=\"#to-be-learned\" class=\"headerlink\" title=\"to-be-learned\"></a>to be learned</h2>\r\n<p>https://www.jianshu.com/p/098d85a58bf1</p>\r\n<h2 id=\"pull-request\"><a href=\"#pull-request\" class=\"headerlink\" title=\"pull-request\"></a>Pull Request</h2>\r\n<p>https://juejin.cn/post/6844903821521469448</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git-rm-会删除工作区文件\"><a href=\"#git-rm-会删除工作区文件\" class=\"headerlink\" title=\"git-rm-会删除工作区文件\"></a>git rm 会删除工作区文件！</h2>\r\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ mkdir learngit //在此处建立一个文件夹<br>$ cd learngit //到文件夹里面<br>$ pwd //看看我在哪个文件夹<br>/Users/michael/learngit<br>$ git init //把这个目录变成Git可以管理的仓库<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"注意记事本\"><a href=\"#注意记事本\" class=\"headerlink\" title=\"注意记事本\"></a>注意记事本</h2>\r\n<p>千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。</p>\r\n<h2 id=\"git-add-a.txt\"><a href=\"#git-add-a.txt\" class=\"headerlink\" title=\"git-add-a.txt\"></a><code>git add a.txt</code></h2>\r\n<p>把修改添加到暂存区</p>\r\n<p>Git管理的是修改，不是文件</p>\r\n<h2\r\nid=\"git-commit--m-提交说明\"><code>git commit -m \"提交说明\"</code></h2>\r\n<p>把暂存区的修改提交到仓库</p>\r\n<h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a><code>ls</code></h2>\r\n<p>查看此文件夹下的文件</p>\r\n<h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git-status\"></a><code>git status</code></h2>\r\n<h3 id=\"查看的状态\"><a href=\"#查看的状态\" class=\"headerlink\" title=\"查看的状态\"></a>查看的状态</h3>\r\n<ul>\r\n<li>没有add的修改</li>\r\n<li>没有commit留在暂存区的修改</li>\r\n</ul>\r\n<h3 id=\"简单方式\"><a href=\"#简单方式\" class=\"headerlink\" title=\"简单方式\"></a>简单方式</h3>\r\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git status -s</span><br> M README<br>MM Rakefile<br>A  lib/git.rb<br>M  lib/simplegit.rb<br>?? LICENSE.txt<br></code></pre></td></tr></table></figure>\r\n<p>新添加的未跟踪文件前面有 <code>??</code>\r\n标记，新添加到暂存区中的文件前面有 <code>A</code>\r\n标记，修改过的文件前面有 <code>M</code> 标记。\r\n输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示：\r\n<code>README</code> 文件在工作区已修改但尚未暂存，而\r\n<code>lib/simplegit.rb</code> 文件已修改且已暂存。 <code>Rakefile</code>\r\n文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。</p>\r\n<h2 id=\"git-diff-a.txt\"><a href=\"#git-diff-a.txt\" class=\"headerlink\" title=\"git-diff-a.txt\"></a><code>git diff a.txt</code></h2>\r\n<p>查看改变后的和在仓库里的版本的差别</p>\r\n<p>git diff：工作区和暂存区</p>\r\n<p>git diff --staged： 暂存区和仓库</p>\r\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git-log\"></a><code>git log</code></h2>\r\n<p>查看历史记录</p>\r\n<p><code>--pretty=oneline</code></p>\r\n<p>查看版本号</p>\r\n<h2 id=\"版本表示\"><a href=\"#版本表示\" class=\"headerlink\" title=\"版本表示\"></a>版本表示</h2>\r\n<p>用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，往上100个版本<code>HEAD~100</code>。</p>\r\n<h2 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>Reset</h2>\r\n<ol type=\"1\">\r\n<li>使用 <code>--soft</code>\r\n选项，你可以重置HEAD到指定的提交，但不会影响工作目录或暂存区。</li>\r\n<li>使用\r\n<code>--hard</code>，你可以重置HEAD到指定的提交，并且清除工作目录和暂存区的所有更改。</li>\r\n</ol>\r\n<h2 id=\"撤回版本回退\"><a href=\"#撤回版本回退\" class=\"headerlink\" title=\"撤回版本回退\"></a>撤回版本回退</h2>\r\n<p>找到那个<code>append GPL</code>的<code>commit id</code>是<code>1094adb...</code>，于是就可以指定回到未来的某个版本：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ git reset --hard 1094a<br>HEAD is now at 83b0afe append GPL<br></code></pre></td></tr></table></figure>\r\n<p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>\r\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git-reflog\"></a><code>git reflog</code></h2>\r\n<p>记录你的每一次命令（commit，reset……）</p>\r\n<p>和那个命令的版本号</p>\r\n<h2 id=\"git-checkout----a.txt\"><a href=\"#git-checkout----a.txt\" class=\"headerlink\" title=\"git-checkout----a.txt\"></a><code>git checkout -- a.txt</code></h2>\r\n<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>\r\n<p>删除之后也可以</p>\r\n<h2 id=\"cat-a.txt\"><a href=\"#cat-a.txt\" class=\"headerlink\" title=\"cat-a.txt\"></a><code>cat a.txt</code></h2>\r\n<p>查看文件内容</p>\r\n<h2 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h2>\r\n<p>1.没有<code>git add</code>时（在工作区），用<code>git checkout -- file</code></p>\r\n<p>2.已经<code>git add</code>时（在暂存区），先<code>git reset HEAD &lt;file&gt;</code>回退到1.，再按1.操作</p>\r\n<p>3.已经<code>git commit</code>时，用<code>git reset</code>回退版本</p>\r\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2>\r\n<p><code>git rm</code>删掉，并且<code>git commit</code></p>\r\n<p>没git rm之前可以checkout恢复</p>\r\n<p><code>$ git rm --cached README</code> 在仓库里删除但是工作区保留</p>\r\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2>\r\n<ul>\r\n<li><p>git switch -c dev\r\n创建<code>dev</code>分支，然后切换到<code>dev</code>分支</p></li>\r\n<li><p>git switch dev 切换到<code>dev</code>分支</p></li>\r\n<li><p>git branch dev 创建</p></li>\r\n<li><p>git branch -d dev 删除dev分支</p></li>\r\n<li><p>git merge dev 合并指定分支到当前分支。</p></li>\r\n<li><p>git merge dev\r\n合并冲突时会把当前分支的工作区的此文件变成这个样子</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">Git is a distributed version control system.<br>Git is free software distributed under the GPL.<br>Git has a mutable index called stage.<br>Git tracks changes of files.<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>Creating a new branch is quick &amp; simple.<br>=======<br>Creating a new branch is quick AND simple.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1<br></code></pre></td></tr></table></figure>\r\n<p>可以手动修改之后再提交</p>\r\n<p>注意merge的是修改，不是文件</p></li>\r\n</ul>\r\n<h2 id=\"merge报错\"><a href=\"#merge报错\" class=\"headerlink\" title=\"merge报错\"></a>merge报错</h2>\r\n<p><img\r\nsrc=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5effe96b58ea4ad6a6dbdbde8d50009a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" /></p>\r\n<p>不写原因直接3，4步骤，写原因则1，2，3，4步骤</p>\r\n<ol type=\"1\">\r\n<li>按键盘字母 i 进入insert模式</li>\r\n<li>修改最上面那行黄色合并信息,可以不修改</li>\r\n<li>按键盘左上角\"Esc\"</li>\r\n<li>输入\":wq\",注意是冒号+wq,按回车键即可</li>\r\n</ol>\r\n<h2 id=\"改变分支策略\"><a href=\"#改变分支策略\" class=\"headerlink\" title=\"改变分支策略\"></a>改变分支策略</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git merge --no-ff -m &quot;commit describtion&quot; dev<br></code></pre></td></tr></table></figure>\r\n<p>merge的同时commit</p>\r\n<h2 id=\"临时储藏分支\"><a href=\"#临时储藏分支\" class=\"headerlink\" title=\"临时储藏分支\"></a>临时储藏分支</h2>\r\n<p>把工作区存起来，不用commit，直接switch到另一个分支</p>\r\n<p>存入：<code>$ git stash</code></p>\r\n<p>查看stash：<code>git stash list</code></p>\r\n<p>恢复：一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p>\r\n<p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p>\r\n<h2\r\nid=\"在另一个分支上重复一个提交修改\">在另一个分支上重复一个提交（修改）</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ git cherry-pick 4c805e2<br></code></pre></td></tr></table></figure>\r\n<p>把另一分支上的4c805e2提交重复，注意是重复内容，但commit号是另一个</p>\r\n<h2 id=\"别名-alias\"><a href=\"#别名-alias\" class=\"headerlink\" title=\"别名-alias\"></a>别名 alias</h2>\r\n<p><code>git config --global alias.ch checkout</code></p>\r\n<p>以后就可以用ch代表checkout</p>\r\n<h2 id=\"给提交弄上标签\"><a href=\"#给提交弄上标签\" class=\"headerlink\" title=\"给提交弄上标签\"></a>给提交弄上标签</h2>\r\n<h3 id=\"轻量标签\"><a href=\"#轻量标签\" class=\"headerlink\" title=\"轻量标签\"></a>轻量标签</h3>\r\n<p><code>$ git tag v1.0</code> 给HEAD（lastest commit）打上标签\r\n<code>$ git tag</code> 看有什么标签</p>\r\n<p><code>$ git tag v1.0 f52c633</code> 给commit\r\nid为f52...的提交打上标签</p>\r\n<h3 id=\"附注标签\"><a href=\"#附注标签\" class=\"headerlink\" title=\"附注标签\"></a>附注标签</h3>\r\n<p><code>$ git tag -a v1.4 -m \"my version 1.4\"</code></p>\r\n<p><code>git show &lt;tagname&gt;</code>\r\n查看标签信息，这个标签有哪些提交</p>\r\n<h3 id=\"共享标签\"><a href=\"#共享标签\" class=\"headerlink\" title=\"共享标签\"></a>共享标签</h3>\r\n<p><code>git push</code>\r\n命令并不会传送标签到远程仓库服务器上，在创建完标签后你必须显式地推送标签到共享服务器上</p>\r\n<p><code>$ git push origin v1.5</code></p>\r\n<h3 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a>删除标签</h3>\r\n<p><code>$ git tag -d v1.4-lw</code></p>\r\n<p><code>$ git push origin --delete &lt;tagname&gt;</code>\r\n还需删除远程标签</p>\r\n<h2 id=\"远程库-remote\"><a href=\"#远程库-remote\" class=\"headerlink\" title=\"远程库-remote\"></a>远程库 remote</h2>\r\n<ul>\r\n<li><p><a\r\nhref=\"https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440\">把本地仓库推送到github上（添加远程库）</a></p></li>\r\n<li><p>名字即简写，代替整个 URL</p></li>\r\n<li><p>git remote add origin2 http...</p></li>\r\n<li><p><code>$ git push origin dev</code>\r\n把本地dev分支推送到远程库里</p></li>\r\n<li><p><code>$ git remote -v</code> 需要读写远程仓库使用的 Git\r\n保存的简写与其对应的 URL。</p></li>\r\n<li><p>克隆仓库</p>\r\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/libgit2/libgit2 mylibgit</span><br></code></pre></td></tr></table></figure>\r\n<p>在当前目录下创建一个名为 “mylibgit” 的目录作为仓库</p>\r\n<p>要只克隆一个特定分支，你可以使用 <code>--single-branch</code> 选项来限制克隆的分支。以下是使用 <code>git clone</code> 命令只克隆一个分支的示例：</p></li>\r\n</ul>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git clone --single-branch --branch &lt;branch-name&gt; &lt;repository-url&gt;<br></code></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><code>$git fetch &lt;remote&gt;</code>\r\n访问远程仓库，从中拉取所有你还没有的数据</p></li>\r\n<li><p>他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。\r\n你必须先抓取他们的工作并将其合并进你的工作后才能推送。</p></li>\r\n<li><p><code>$ git remote remove paul</code> 移除远程库</p></li>\r\n<li><p>Git中的\"upstream\r\nbranch\"（上游分支）是指本地分支所跟踪的远程分支。当你执行<code>git push</code>命令时，Git会将本地分支的更改推送到相应的远程分支。错误消息中提供了一个解决方案，即使用<code>git push --set-upstream origin master</code>命令。这个命令将推送当前分支的更改到远程仓库的\"master\"分支，并将其设置为当前分支的上游分支（也就是将本地分支与远程分支进行关联）。</p></li>\r\n</ul>\r\n<h2 id=\"多人协作的工作模式\"><a href=\"#多人协作的工作模式\" class=\"headerlink\" title=\"多人协作的工作模式\"></a>多人协作的工作模式</h2>\r\n<ol type=\"1\">\r\n<li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li>\r\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>\r\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\r\n<li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li>\r\n</ol>\r\n<p>（如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。）</p>\r\n<h2 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h2>\r\n<ul>\r\n<li><code>git rebase &lt;branch&gt;</code>：将当前分支上的提交应用到 <code>&lt;branch&gt;</code> 分支上。</li>\r\n<li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li>\r\n<li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li>\r\n</ul>\r\n<h2 id=\"图形界面工具\"><a href=\"#图形界面工具\" class=\"headerlink\" title=\"图形界面工具\"></a>图形界面工具</h2>\r\n<p><a href=\"https://www.sourcetreeapp.com/\">Source Tree</a></p>\r\n<h2 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h2>\r\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">mv</span> README.md README</span><br></code></pre></td></tr></table></figure>\r\n<p>其实，运行 <code>git mv</code> 就相当于运行了下面三条命令：</p>\r\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">mv</span> README.md README</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">rm</span> README.md</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git add README</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\"gitignore\"></a>.gitignore</h2>\r\n<p><em>Github上传</em>项目时，可能会遇到文件<em>上传</em>不<em>上去</em>，可以检查.gitignore用记事本打开看看文件的名字是否在里面，然后删除保存即可。</p>\r\n<h2 id=\"to-be-learned\"><a href=\"#to-be-learned\" class=\"headerlink\" title=\"to-be-learned\"></a>to be learned</h2>\r\n<p>https://www.jianshu.com/p/098d85a58bf1</p>\r\n<h2 id=\"pull-request\"><a href=\"#pull-request\" class=\"headerlink\" title=\"pull-request\"></a>Pull Request</h2>\r\n<p>https://juejin.cn/post/6844903821521469448</p>\r\n"},{"title":"二分图","date":"2024-02-22T16:00:00.000Z","_content":"\n一个图是二分图 <=> 染色法存在矛盾 <=> 图中不存在奇数环\n\n（通过染色法可以想到**棋盘，树，DAG**）\n\n\n\n匹配：“一夫一妻”\n\n最大匹配：一个二分图中边数最多的一组匹配\n\n增广路径：（对于一个匹配来说）始于非匹配点且终于非匹配点（除了起始的点）的由匹配边与非匹配边交错而成路径。增广路中边的数量是奇数，所以这两个匹配点一定是不同边。\n\n![](image_1.bf2209b0.png)\n\n最大匹配<=>此匹配不存在增广路径\n\n匈牙利算法：\n\n遍历每一个男的，看他喜欢的女生的男朋友能不能再找一个，好让他们两个在一起\n\n用到了递归，就是看那个男朋友能不能再找一个的时候用到的算法是一样的（find）\n\n```\nbool find(int x)\n{\n    for (int i = h[x]; i != -1; i = ne[i])\n    {\n        int j = e[i];\nif (!vis[j])\n        {\nvis[j] = true;\n            if (match[j] == 0 || find(match[j]))\n            {\n                match[j] = x;\n                return true;\n            }\n        }\n    }\n    \n    return false;\n}\nint main() {\nfor (int i = 1; i <= M; ++i) // 遍历二分图的一边\n    {\n        memset(vis, 0, sizeof(vis)); //重置vis数组\nif (find(i)) cnt++;\n    }\n    return 0;\n}\n```\n\n\\*下面的遍历是指main函数中的，只有M次\n\n其实本质上是每次遍历找一条增广路径\n\n（遍历过的男的不一定是匹配点，但男的匹配点一定被遍历过，因为只有被遍历的时候男的会变成匹配点）\n\n记得每次遍历的时候标记一下vis（因为这个点向外扩展的方式的唯一的）\n\n\n-----\n- 最小点覆盖：选出最少的点，使得每一条边的端点至少有一边被选\n- 二分图中 **最小点覆盖 = 最大匹配数** **！**\n- 最大独立集：选出最多的点，使得选出的任意两点之间没有边 => 去掉最少的点，把所有的边破坏掉 => 最小点覆盖\n- 最大团：选出最多的点，使得选出的任意两点之间都有边（即补图的最大独立集）\n- 最小路径点覆盖：用最少的互不相交的路径将所有点覆盖\n  - 针对有向无环图\n  - 不是边，是几条路径\n  - 不一定能找到可行解\n  - \\= 点数 - 拆点后的最大匹配数\n  - 方法：拆点（拆成出点和入点 => 二分图） 不相交 =>（拆点后的）匹配\n\n- 最小路径重复点覆盖：\n  - 传递闭包后图G‘做最小点覆盖\n  - 原图G的每一个路径重复点覆盖 都对应 G'中的一个路径点覆盖，且路径数目相同；G'中的一个路径点覆盖 都对应 原图G的每一个路径重复点覆盖，且路径数目相同\n\n- 例：acwing379\\. 捉迷藏\n  - 题目：一个有向无环图，问最多选多少个点，使得两两之间没有路径连接\n  - 题解：即传递闭包只有的最大独立集\n\n","source":"_posts/算法竞赛/二分图.md","raw":"---\ntitle: 二分图\ndate: 2024-02-23 00:00:00\ntags:\n  - 算法竞赛\n---\n\n一个图是二分图 <=> 染色法存在矛盾 <=> 图中不存在奇数环\n\n（通过染色法可以想到**棋盘，树，DAG**）\n\n\n\n匹配：“一夫一妻”\n\n最大匹配：一个二分图中边数最多的一组匹配\n\n增广路径：（对于一个匹配来说）始于非匹配点且终于非匹配点（除了起始的点）的由匹配边与非匹配边交错而成路径。增广路中边的数量是奇数，所以这两个匹配点一定是不同边。\n\n![](image_1.bf2209b0.png)\n\n最大匹配<=>此匹配不存在增广路径\n\n匈牙利算法：\n\n遍历每一个男的，看他喜欢的女生的男朋友能不能再找一个，好让他们两个在一起\n\n用到了递归，就是看那个男朋友能不能再找一个的时候用到的算法是一样的（find）\n\n```\nbool find(int x)\n{\n    for (int i = h[x]; i != -1; i = ne[i])\n    {\n        int j = e[i];\nif (!vis[j])\n        {\nvis[j] = true;\n            if (match[j] == 0 || find(match[j]))\n            {\n                match[j] = x;\n                return true;\n            }\n        }\n    }\n    \n    return false;\n}\nint main() {\nfor (int i = 1; i <= M; ++i) // 遍历二分图的一边\n    {\n        memset(vis, 0, sizeof(vis)); //重置vis数组\nif (find(i)) cnt++;\n    }\n    return 0;\n}\n```\n\n\\*下面的遍历是指main函数中的，只有M次\n\n其实本质上是每次遍历找一条增广路径\n\n（遍历过的男的不一定是匹配点，但男的匹配点一定被遍历过，因为只有被遍历的时候男的会变成匹配点）\n\n记得每次遍历的时候标记一下vis（因为这个点向外扩展的方式的唯一的）\n\n\n-----\n- 最小点覆盖：选出最少的点，使得每一条边的端点至少有一边被选\n- 二分图中 **最小点覆盖 = 最大匹配数** **！**\n- 最大独立集：选出最多的点，使得选出的任意两点之间没有边 => 去掉最少的点，把所有的边破坏掉 => 最小点覆盖\n- 最大团：选出最多的点，使得选出的任意两点之间都有边（即补图的最大独立集）\n- 最小路径点覆盖：用最少的互不相交的路径将所有点覆盖\n  - 针对有向无环图\n  - 不是边，是几条路径\n  - 不一定能找到可行解\n  - \\= 点数 - 拆点后的最大匹配数\n  - 方法：拆点（拆成出点和入点 => 二分图） 不相交 =>（拆点后的）匹配\n\n- 最小路径重复点覆盖：\n  - 传递闭包后图G‘做最小点覆盖\n  - 原图G的每一个路径重复点覆盖 都对应 G'中的一个路径点覆盖，且路径数目相同；G'中的一个路径点覆盖 都对应 原图G的每一个路径重复点覆盖，且路径数目相同\n\n- 例：acwing379\\. 捉迷藏\n  - 题目：一个有向无环图，问最多选多少个点，使得两两之间没有路径连接\n  - 题解：即传递闭包只有的最大独立集\n\n","slug":"算法竞赛/二分图","published":1,"updated":"2024-02-23T07:21:37.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vv0015p4wvgbxsh4u6","content":"<p>一个图是二分图 &lt;=&gt; 染色法存在矛盾 &lt;=&gt;\r\n图中不存在奇数环</p>\r\n<p>（通过染色法可以想到<strong>棋盘，树，DAG</strong>）</p>\r\n<p>匹配：“一夫一妻”</p>\r\n<p>最大匹配：一个二分图中边数最多的一组匹配</p>\r\n<p>增广路径：（对于一个匹配来说）始于非匹配点且终于非匹配点（除了起始的点）的由匹配边与非匹配边交错而成路径。增广路中边的数量是奇数，所以这两个匹配点一定是不同边。</p>\r\n<p class='item-img' data-src='image_1.bf2209b0.png'><img src=\"image_1.bf2209b0.png\" /></p>\r\n<p>最大匹配&lt;=&gt;此匹配不存在增广路径</p>\r\n<p>匈牙利算法：</p>\r\n<p>遍历每一个男的，看他喜欢的女生的男朋友能不能再找一个，好让他们两个在一起</p>\r\n<p>用到了递归，就是看那个男朋友能不能再找一个的时候用到的算法是一样的（find）</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">bool find(int x)<br>&#123;<br>    for (int i = h[x]; i != -1; i = ne[i])<br>    &#123;<br>        int j = e[i];<br>if (!vis[j])<br>        &#123;<br>vis[j] = true;<br>            if (match[j] == 0 || find(match[j]))<br>            &#123;<br>                match[j] = x;<br>                return true;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    return false;<br>&#125;<br>int main() &#123;<br>for (int i = 1; i &lt;= M; ++i) // 遍历二分图的一边<br>    &#123;<br>        memset(vis, 0, sizeof(vis)); //重置vis数组<br>if (find(i)) cnt++;<br>    &#125;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>*下面的遍历是指main函数中的，只有M次</p>\r\n<p>其实本质上是每次遍历找一条增广路径</p>\r\n<p>（遍历过的男的不一定是匹配点，但男的匹配点一定被遍历过，因为只有被遍历的时候男的会变成匹配点）</p>\r\n<p>记得每次遍历的时候标记一下vis（因为这个点向外扩展的方式的唯一的）</p>\r\n<hr />\r\n<ul>\r\n<li>最小点覆盖：选出最少的点，使得每一条边的端点至少有一边被选</li>\r\n<li>二分图中 <strong>最小点覆盖 = 最大匹配数</strong>\r\n<strong>！</strong></li>\r\n<li>最大独立集：选出最多的点，使得选出的任意两点之间没有边 =&gt;\r\n去掉最少的点，把所有的边破坏掉 =&gt; 最小点覆盖</li>\r\n<li>最大团：选出最多的点，使得选出的任意两点之间都有边（即补图的最大独立集）</li>\r\n<li>最小路径点覆盖：用最少的互不相交的路径将所有点覆盖\r\n<ul>\r\n<li>针对有向无环图</li>\r\n<li>不是边，是几条路径</li>\r\n<li>不一定能找到可行解</li>\r\n<li>= 点数 - 拆点后的最大匹配数</li>\r\n<li>方法：拆点（拆成出点和入点 =&gt; 二分图） 不相交\r\n=&gt;（拆点后的）匹配</li>\r\n</ul></li>\r\n<li>最小路径重复点覆盖：\r\n<ul>\r\n<li>传递闭包后图G‘做最小点覆盖</li>\r\n<li>原图G的每一个路径重复点覆盖 都对应\r\nG'中的一个路径点覆盖，且路径数目相同；G'中的一个路径点覆盖 都对应\r\n原图G的每一个路径重复点覆盖，且路径数目相同</li>\r\n</ul></li>\r\n<li>例：acwing379. 捉迷藏\r\n<ul>\r\n<li>题目：一个有向无环图，问最多选多少个点，使得两两之间没有路径连接</li>\r\n<li>题解：即传递闭包只有的最大独立集</li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<p>一个图是二分图 &lt;=&gt; 染色法存在矛盾 &lt;=&gt;\r\n图中不存在奇数环</p>\r\n<p>（通过染色法可以想到<strong>棋盘，树，DAG</strong>）</p>\r\n<p>匹配：“一夫一妻”</p>\r\n<p>最大匹配：一个二分图中边数最多的一组匹配</p>\r\n<p>增广路径：（对于一个匹配来说）始于非匹配点且终于非匹配点（除了起始的点）的由匹配边与非匹配边交错而成路径。增广路中边的数量是奇数，所以这两个匹配点一定是不同边。</p>\r\n<p><img src=\"image_1.bf2209b0.png\" /></p>\r\n<p>最大匹配&lt;=&gt;此匹配不存在增广路径</p>\r\n<p>匈牙利算法：</p>\r\n<p>遍历每一个男的，看他喜欢的女生的男朋友能不能再找一个，好让他们两个在一起</p>\r\n<p>用到了递归，就是看那个男朋友能不能再找一个的时候用到的算法是一样的（find）</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">bool find(int x)<br>&#123;<br>    for (int i = h[x]; i != -1; i = ne[i])<br>    &#123;<br>        int j = e[i];<br>if (!vis[j])<br>        &#123;<br>vis[j] = true;<br>            if (match[j] == 0 || find(match[j]))<br>            &#123;<br>                match[j] = x;<br>                return true;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    return false;<br>&#125;<br>int main() &#123;<br>for (int i = 1; i &lt;= M; ++i) // 遍历二分图的一边<br>    &#123;<br>        memset(vis, 0, sizeof(vis)); //重置vis数组<br>if (find(i)) cnt++;<br>    &#125;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>*下面的遍历是指main函数中的，只有M次</p>\r\n<p>其实本质上是每次遍历找一条增广路径</p>\r\n<p>（遍历过的男的不一定是匹配点，但男的匹配点一定被遍历过，因为只有被遍历的时候男的会变成匹配点）</p>\r\n<p>记得每次遍历的时候标记一下vis（因为这个点向外扩展的方式的唯一的）</p>\r\n<hr />\r\n<ul>\r\n<li>最小点覆盖：选出最少的点，使得每一条边的端点至少有一边被选</li>\r\n<li>二分图中 <strong>最小点覆盖 = 最大匹配数</strong>\r\n<strong>！</strong></li>\r\n<li>最大独立集：选出最多的点，使得选出的任意两点之间没有边 =&gt;\r\n去掉最少的点，把所有的边破坏掉 =&gt; 最小点覆盖</li>\r\n<li>最大团：选出最多的点，使得选出的任意两点之间都有边（即补图的最大独立集）</li>\r\n<li>最小路径点覆盖：用最少的互不相交的路径将所有点覆盖\r\n<ul>\r\n<li>针对有向无环图</li>\r\n<li>不是边，是几条路径</li>\r\n<li>不一定能找到可行解</li>\r\n<li>= 点数 - 拆点后的最大匹配数</li>\r\n<li>方法：拆点（拆成出点和入点 =&gt; 二分图） 不相交\r\n=&gt;（拆点后的）匹配</li>\r\n</ul></li>\r\n<li>最小路径重复点覆盖：\r\n<ul>\r\n<li>传递闭包后图G‘做最小点覆盖</li>\r\n<li>原图G的每一个路径重复点覆盖 都对应\r\nG'中的一个路径点覆盖，且路径数目相同；G'中的一个路径点覆盖 都对应\r\n原图G的每一个路径重复点覆盖，且路径数目相同</li>\r\n</ul></li>\r\n<li>例：acwing379. 捉迷藏\r\n<ul>\r\n<li>题目：一个有向无环图，问最多选多少个点，使得两两之间没有路径连接</li>\r\n<li>题解：即传递闭包只有的最大独立集</li>\r\n</ul></li>\r\n</ul>\r\n"},{"hidden":true,"_content":"\n\n[莫烦Python](mofanpy.com)\n\n## QLearning\n\n![整体算法](https://static.mofanpy.com/static/results/ML-intro/q4.png?t=6735b03a&sign=d2e60c542fb57754a759b01331e1fda9)\n\n![qlrearning公式](https://wikimedia.org/api/rest_v1/media/math/render/svg/a3a4d2ac903b1be02cc81e60de2e9f91d7025fec)\n\nQ(state, action) : 在当前state做出该action的价值(此价值包含从当前点直到最终点)\n\n![aaaa](https://static.mofanpy.com/static/results/ML-intro/q5.png?t=6735b03a&sign=c9592952191e05b46abc14be9e5d07ff)\n\n### DQLearning\n\nstate太多(如下围棋)\n\n在机器学习中, 有一种方法对这种事情很在行, 那就是神经网络. 我们可以将状态和动作当成神经网络的输入, 然后经过神经网络分析后得到动作的 Q 值, \n\n## Sarsa\n\n![aaa](https://static.mofanpy.com/static/results/ML-intro/s4.png?t=6735b350&sign=048244833c06e5bedf2c04c95af91ebe)\n\n on-policy, 下一个 state*, 和下一个 action* 将会变成他真正采取的 action 和 state. \n\n 不过于 Qlearning 不同之处:\n\n- 他在当前 `state` 已经想好了 `state` 对应的 `action`, 而且想好了 下一个 `state_` 和下一个 `action_` (Qlearning 还没有想好下一个 `action_`)\n- 更新 `Q(s,a)` 的时候基于的是下一个 `Q(s_, a_)` (Qlearning 是基于 `maxQ(s_)`)\n\n### sarsa_Lamda\n\n![bbb](https://static.mofanpy.com/static/results/ML-intro/sl5.png?t=6735b350&sign=f9d26d18dda35c5fccfa1c3a047cd594)\n\n 当 lambda 在 0 和 1 之间, 取值越大, 离宝藏越近的步更新力度越大. 这样我们就不用受限于单步更新的每次只能更新最近的一步, 我们可以更有效率的更新所有相关步了.\n\n## Policy Gradient\n\nPolicy Gradients 直接输出动作的最大好处就是, 它能在一个连续区间内挑选动作. 他接受环境信息 (observation), 不同的是他要输出不是 action 的 value, 而是具体的那一个 action\n\n用神经网络输出动作\n\n把 reward 看成神经网络中的 loss (要乘个负号) , 进行反向传递, 修改参数\n\n回合更新\n\n## Actor Critic \n\nActor Critic (演员评判家)\n\nActor -> 类policy gradient的输出*行为*的神经网络\n\nCritic -> 类qlearning的输出*值*的神经网络\n\n## PPO\n\n根据 OpenAI 的[官方博客](https://blog.openai.com/openai-baselines-ppo/), PPO 已经成为他们在强化学习上的默认算法. **如果一句话概括 PPO: OpenAI 提出的一种解决 Policy Gradient 不好确定 Learning rate (或者 Step size) 的问题.** \n\n\n\n\n\n","source":"_posts/其他/强化学习.md","raw":"---\nhidden: true\n---\n\n\n[莫烦Python](mofanpy.com)\n\n## QLearning\n\n![整体算法](https://static.mofanpy.com/static/results/ML-intro/q4.png?t=6735b03a&sign=d2e60c542fb57754a759b01331e1fda9)\n\n![qlrearning公式](https://wikimedia.org/api/rest_v1/media/math/render/svg/a3a4d2ac903b1be02cc81e60de2e9f91d7025fec)\n\nQ(state, action) : 在当前state做出该action的价值(此价值包含从当前点直到最终点)\n\n![aaaa](https://static.mofanpy.com/static/results/ML-intro/q5.png?t=6735b03a&sign=c9592952191e05b46abc14be9e5d07ff)\n\n### DQLearning\n\nstate太多(如下围棋)\n\n在机器学习中, 有一种方法对这种事情很在行, 那就是神经网络. 我们可以将状态和动作当成神经网络的输入, 然后经过神经网络分析后得到动作的 Q 值, \n\n## Sarsa\n\n![aaa](https://static.mofanpy.com/static/results/ML-intro/s4.png?t=6735b350&sign=048244833c06e5bedf2c04c95af91ebe)\n\n on-policy, 下一个 state*, 和下一个 action* 将会变成他真正采取的 action 和 state. \n\n 不过于 Qlearning 不同之处:\n\n- 他在当前 `state` 已经想好了 `state` 对应的 `action`, 而且想好了 下一个 `state_` 和下一个 `action_` (Qlearning 还没有想好下一个 `action_`)\n- 更新 `Q(s,a)` 的时候基于的是下一个 `Q(s_, a_)` (Qlearning 是基于 `maxQ(s_)`)\n\n### sarsa_Lamda\n\n![bbb](https://static.mofanpy.com/static/results/ML-intro/sl5.png?t=6735b350&sign=f9d26d18dda35c5fccfa1c3a047cd594)\n\n 当 lambda 在 0 和 1 之间, 取值越大, 离宝藏越近的步更新力度越大. 这样我们就不用受限于单步更新的每次只能更新最近的一步, 我们可以更有效率的更新所有相关步了.\n\n## Policy Gradient\n\nPolicy Gradients 直接输出动作的最大好处就是, 它能在一个连续区间内挑选动作. 他接受环境信息 (observation), 不同的是他要输出不是 action 的 value, 而是具体的那一个 action\n\n用神经网络输出动作\n\n把 reward 看成神经网络中的 loss (要乘个负号) , 进行反向传递, 修改参数\n\n回合更新\n\n## Actor Critic \n\nActor Critic (演员评判家)\n\nActor -> 类policy gradient的输出*行为*的神经网络\n\nCritic -> 类qlearning的输出*值*的神经网络\n\n## PPO\n\n根据 OpenAI 的[官方博客](https://blog.openai.com/openai-baselines-ppo/), PPO 已经成为他们在强化学习上的默认算法. **如果一句话概括 PPO: OpenAI 提出的一种解决 Policy Gradient 不好确定 Learning rate (或者 Step size) 的问题.** \n\n\n\n\n\n","slug":"其他/强化学习","published":1,"date":"2024-11-14T08:15:38.597Z","updated":"2024-12-15T11:26:58.263Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vw0017p4wv1k6mepvk","content":"<p><a href=\"mofanpy.com\">莫烦Python</a></p>\r\n<h2 id=\"qlearning\"><a href=\"#qlearning\" class=\"headerlink\" title=\"qlearning\"></a>QLearning</h2>\r\n<figure>\r\n<img\r\nsrc=\"https://static.mofanpy.com/static/results/ML-intro/q4.png?t=6735b03a&amp;sign=d2e60c542fb57754a759b01331e1fda9\"\r\nalt=\"整体算法\" />\r\n<figcaption aria-hidden=\"true\">整体算法</figcaption>\r\n</figure>\r\n<figure>\r\n<img\r\nsrc=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/a3a4d2ac903b1be02cc81e60de2e9f91d7025fec\"\r\nalt=\"qlrearning公式\" />\r\n<figcaption aria-hidden=\"true\">qlrearning公式</figcaption>\r\n</figure>\r\n<p>Q(state, action) :\r\n在当前state做出该action的价值(此价值包含从当前点直到最终点)</p>\r\n<figure>\r\n<img\r\nsrc=\"https://static.mofanpy.com/static/results/ML-intro/q5.png?t=6735b03a&amp;sign=c9592952191e05b46abc14be9e5d07ff\"\r\nalt=\"aaaa\" />\r\n<figcaption aria-hidden=\"true\">aaaa</figcaption>\r\n</figure>\r\n<h3 id=\"dqlearning\"><a href=\"#dqlearning\" class=\"headerlink\" title=\"dqlearning\"></a>DQLearning</h3>\r\n<p>state太多(如下围棋)</p>\r\n<p>在机器学习中, 有一种方法对这种事情很在行, 那就是神经网络.\r\n我们可以将状态和动作当成神经网络的输入, 然后经过神经网络分析后得到动作的\r\nQ 值,</p>\r\n<h2 id=\"sarsa\"><a href=\"#sarsa\" class=\"headerlink\" title=\"sarsa\"></a>Sarsa</h2>\r\n<figure>\r\n<img\r\nsrc=\"https://static.mofanpy.com/static/results/ML-intro/s4.png?t=6735b350&amp;sign=048244833c06e5bedf2c04c95af91ebe\"\r\nalt=\"aaa\" />\r\n<figcaption aria-hidden=\"true\">aaa</figcaption>\r\n</figure>\r\n<p>on-policy, 下一个 state<em>, 和下一个 action</em>\r\n将会变成他真正采取的 action 和 state.</p>\r\n<p>不过于 Qlearning 不同之处:</p>\r\n<ul>\r\n<li>他在当前 <code>state</code> 已经想好了 <code>state</code> 对应的\r\n<code>action</code>, 而且想好了 下一个 <code>state_</code> 和下一个\r\n<code>action_</code> (Qlearning 还没有想好下一个\r\n<code>action_</code>)</li>\r\n<li>更新 <code>Q(s,a)</code> 的时候基于的是下一个 <code>Q(s_, a_)</code>\r\n(Qlearning 是基于 <code>maxQ(s_)</code>)</li>\r\n</ul>\r\n<h3 id=\"sarsa_lamda\"><a href=\"#sarsa_lamda\" class=\"headerlink\" title=\"sarsa_lamda\"></a>sarsa_Lamda</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://static.mofanpy.com/static/results/ML-intro/sl5.png?t=6735b350&amp;sign=f9d26d18dda35c5fccfa1c3a047cd594\"\r\nalt=\"bbb\" />\r\n<figcaption aria-hidden=\"true\">bbb</figcaption>\r\n</figure>\r\n<p>当 lambda 在 0 和 1 之间, 取值越大, 离宝藏越近的步更新力度越大.\r\n这样我们就不用受限于单步更新的每次只能更新最近的一步,\r\n我们可以更有效率的更新所有相关步了.</p>\r\n<h2 id=\"policy-gradient\"><a href=\"#policy-gradient\" class=\"headerlink\" title=\"policy-gradient\"></a>Policy Gradient</h2>\r\n<p>Policy Gradients 直接输出动作的最大好处就是,\r\n它能在一个连续区间内挑选动作. 他接受环境信息 (observation),\r\n不同的是他要输出不是 action 的 value, 而是具体的那一个 action</p>\r\n<p>用神经网络输出动作</p>\r\n<p>把 reward 看成神经网络中的 loss (要乘个负号) , 进行反向传递,\r\n修改参数</p>\r\n<p>回合更新</p>\r\n<h2 id=\"actor-critic\"><a href=\"#actor-critic\" class=\"headerlink\" title=\"actor-critic\"></a>Actor Critic</h2>\r\n<p>Actor Critic (演员评判家)</p>\r\n<p>Actor -&gt; 类policy gradient的输出<em>行为</em>的神经网络</p>\r\n<p>Critic -&gt; 类qlearning的输出<em>值</em>的神经网络</p>\r\n<h2 id=\"ppo\"><a href=\"#ppo\" class=\"headerlink\" title=\"ppo\"></a>PPO</h2>\r\n<p>根据 OpenAI 的<a\r\nhref=\"https://blog.openai.com/openai-baselines-ppo/\">官方博客</a>, PPO\r\n已经成为他们在强化学习上的默认算法. <strong>如果一句话概括 PPO: OpenAI\r\n提出的一种解决 Policy Gradient 不好确定 Learning rate (或者 Step size)\r\n的问题.</strong></p>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<p><a href=\"mofanpy.com\">莫烦Python</a></p>\r\n<h2 id=\"qlearning\"><a href=\"#qlearning\" class=\"headerlink\" title=\"qlearning\"></a>QLearning</h2>\r\n<figure>\r\n<img\r\nsrc=\"https://static.mofanpy.com/static/results/ML-intro/q4.png?t=6735b03a&amp;sign=d2e60c542fb57754a759b01331e1fda9\"\r\nalt=\"整体算法\" />\r\n<figcaption aria-hidden=\"true\">整体算法</figcaption>\r\n</figure>\r\n<figure>\r\n<img\r\nsrc=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/a3a4d2ac903b1be02cc81e60de2e9f91d7025fec\"\r\nalt=\"qlrearning公式\" />\r\n<figcaption aria-hidden=\"true\">qlrearning公式</figcaption>\r\n</figure>\r\n<p>Q(state, action) :\r\n在当前state做出该action的价值(此价值包含从当前点直到最终点)</p>\r\n<figure>\r\n<img\r\nsrc=\"https://static.mofanpy.com/static/results/ML-intro/q5.png?t=6735b03a&amp;sign=c9592952191e05b46abc14be9e5d07ff\"\r\nalt=\"aaaa\" />\r\n<figcaption aria-hidden=\"true\">aaaa</figcaption>\r\n</figure>\r\n<h3 id=\"dqlearning\"><a href=\"#dqlearning\" class=\"headerlink\" title=\"dqlearning\"></a>DQLearning</h3>\r\n<p>state太多(如下围棋)</p>\r\n<p>在机器学习中, 有一种方法对这种事情很在行, 那就是神经网络.\r\n我们可以将状态和动作当成神经网络的输入, 然后经过神经网络分析后得到动作的\r\nQ 值,</p>\r\n<h2 id=\"sarsa\"><a href=\"#sarsa\" class=\"headerlink\" title=\"sarsa\"></a>Sarsa</h2>\r\n<figure>\r\n<img\r\nsrc=\"https://static.mofanpy.com/static/results/ML-intro/s4.png?t=6735b350&amp;sign=048244833c06e5bedf2c04c95af91ebe\"\r\nalt=\"aaa\" />\r\n<figcaption aria-hidden=\"true\">aaa</figcaption>\r\n</figure>\r\n<p>on-policy, 下一个 state<em>, 和下一个 action</em>\r\n将会变成他真正采取的 action 和 state.</p>\r\n<p>不过于 Qlearning 不同之处:</p>\r\n<ul>\r\n<li>他在当前 <code>state</code> 已经想好了 <code>state</code> 对应的\r\n<code>action</code>, 而且想好了 下一个 <code>state_</code> 和下一个\r\n<code>action_</code> (Qlearning 还没有想好下一个\r\n<code>action_</code>)</li>\r\n<li>更新 <code>Q(s,a)</code> 的时候基于的是下一个 <code>Q(s_, a_)</code>\r\n(Qlearning 是基于 <code>maxQ(s_)</code>)</li>\r\n</ul>\r\n<h3 id=\"sarsa_lamda\"><a href=\"#sarsa_lamda\" class=\"headerlink\" title=\"sarsa_lamda\"></a>sarsa_Lamda</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://static.mofanpy.com/static/results/ML-intro/sl5.png?t=6735b350&amp;sign=f9d26d18dda35c5fccfa1c3a047cd594\"\r\nalt=\"bbb\" />\r\n<figcaption aria-hidden=\"true\">bbb</figcaption>\r\n</figure>\r\n<p>当 lambda 在 0 和 1 之间, 取值越大, 离宝藏越近的步更新力度越大.\r\n这样我们就不用受限于单步更新的每次只能更新最近的一步,\r\n我们可以更有效率的更新所有相关步了.</p>\r\n<h2 id=\"policy-gradient\"><a href=\"#policy-gradient\" class=\"headerlink\" title=\"policy-gradient\"></a>Policy Gradient</h2>\r\n<p>Policy Gradients 直接输出动作的最大好处就是,\r\n它能在一个连续区间内挑选动作. 他接受环境信息 (observation),\r\n不同的是他要输出不是 action 的 value, 而是具体的那一个 action</p>\r\n<p>用神经网络输出动作</p>\r\n<p>把 reward 看成神经网络中的 loss (要乘个负号) , 进行反向传递,\r\n修改参数</p>\r\n<p>回合更新</p>\r\n<h2 id=\"actor-critic\"><a href=\"#actor-critic\" class=\"headerlink\" title=\"actor-critic\"></a>Actor Critic</h2>\r\n<p>Actor Critic (演员评判家)</p>\r\n<p>Actor -&gt; 类policy gradient的输出<em>行为</em>的神经网络</p>\r\n<p>Critic -&gt; 类qlearning的输出<em>值</em>的神经网络</p>\r\n<h2 id=\"ppo\"><a href=\"#ppo\" class=\"headerlink\" title=\"ppo\"></a>PPO</h2>\r\n<p>根据 OpenAI 的<a\r\nhref=\"https://blog.openai.com/openai-baselines-ppo/\">官方博客</a>, PPO\r\n已经成为他们在强化学习上的默认算法. <strong>如果一句话概括 PPO: OpenAI\r\n提出的一种解决 Policy Gradient 不好确定 Learning rate (或者 Step size)\r\n的问题.</strong></p>\r\n"},{"title":"日常总结","data":"2024-03-19T16:00:00.000Z","_content":"## CF932 div2比赛总结\n很烂，只做了两道题，感觉晚上好困。C思路是差不多的，主要是中间实现太复杂了，我忘了在遍历区间的右端点的时候，那个值是递减的。还是要注意区间与区间之间的关系。实现的时候还有些sb问题，需要注意。\n## [CF932 div2 E. Distance Learning Courses in MAC](https://codeforces.com/contest/1935/problem/E)\n### 题意\nn个数，每个数为 $[x_i,y_i]$ 内任意一个数，q个询问，每次给一个 $l, r$，问从第l个数到第r个数（共r-l+1个数）的最大or和。\n### 题解\n- 从最大位开始贪心\n- 如果该位（设为第 j 位）有两个数能为1（`y_i <= (1<<j)`），且至少一个数的 $x_i$ <= (1<<j)，说明这个数可以进行“降维打击”，变成 (1<<j)-1 直接结束游戏\n- 这样就把题目简化了很多，要么使用这个1后面继续考虑此数，要么不使用这个1直接进行降维打击。这个1只要不用就会结束游戏，所以一般情况必须得用。\n# [Educational Codeforces Round 161 Div.2 D. Berserk Monsters](https://codeforces.com/contest/1922/problem/D) [[优化处理]] \n\n## 题意\nn个二元组 $(a_i,d_i)$ 排成一列，n轮，每一轮对于每一个 i 若 $d_i<a_{pre_i}+a_{nxt_i}$ 则去掉这个二元组。（pre，nxt就是最近的没有去掉的二元组）。求每一轮去掉的组数。\n\n## 题解\n这道题比赛时想复杂了，想着对于每个联通块的左右端点处理，但其实没那么复杂。\n\n>It is important to note that if during the j�-th round the i�-th monster did not die and none of its alive neighbors died, then there is no point in checking this monster in the (j+1)(�+1)-th round. Therefore, we can solve the problem as follows: let's maintain a list of candidates (those who can die) for the current round; if the monster dies in the current round, then add its neighbors to the list of candidates for the next round.\n\n只用每次检查没有被保护的人（list），如果死了就在list中加入它附近的人。注意检查和去掉应该是两个循环。\n\n# [Educational Codeforces Round 161 Div.2 E - Increasing Subsequences](https://codeforces.com/contest/1922/problem/E) [[构造]]\n## 题意\n构造一个子严格上升子序列的数量恰好为x的序列\n## 题解\n构造->找到特殊处理方式\n在一个序列最后如果加上一个比它们都小的值->t+=1\n在一个序列最后如果加上一个比它们都小的值->t*=2\nt为子严格上升子序列的数量\n将序列操作与数的二进制操作联系。\n# *\n把一段染成一个颜色之后可以把这一段看成一个数\n# [Educational Codeforces Round 163 (Rated for Div. 2)](https://codeforces.com/contest/1948)D. Tandem Repeats? [[优化处理]]\n## 题意\n有一行由小写字母和？组成的字符串，？可以代表任何小写字母。求重复子串的最大长度，重复子串指满足 $s[l,l+len-1]=s[l+len,l+len*2-1]$ 的连续子串。\n$n<=5e3$\n## 题解\n没想到那么简单qwq\n就是要找到处理的相同量，这里是判断 $s[i]==s[i+len]$ ，当len固定时左端点l和l+1只有端点需要处理。在每次记一个cnt，记录满足相等的个数。因为len固定时判断的永远时s[i]和s[i+len]，所以 $？$ 可以直接贪心处理。\n# [Educational Codeforces Round 163 (Rated for Div. 2)](https://codeforces.com/contest/1948)E. Clique Partition [[构造]]\n## 题意\nn个点，第i个点序号为i，让你给每个点分配一个 a_i（1~n中互不相同的数）。当 $|i−j|+|a_i−a_j|≤k$ 时第i个点和第j个点连一条边。求此图的极大强连通子图的个数的最大值。\n## 题解\n易得每个强连通子图的点的个数<=k，则构造一种方式使n=k时答案为1。如下：\n$$m,m-1,m-2,...,1,n,n-1,...,m+1，其中m=k/2向上取整$$\n**找到边界，构造边界**\n# [Educational Codeforces Round 163 (Rated for Div. 2)](https://codeforces.com/contest/1948) F. Rare Coins [[概率]] [[优化处理]]\n## 题意\n有n个袋子，编号为1到n。第i个袋子里装着 $b_i$ 个银币。每个银币有50%的概率价值为0，50%的概率价值为1。一个袋子的价值为其银币价值的和。现在问你Q个问题，每次给一个l和一个r和一个a，求 $$编号为l到r的袋子的价值和 - 其他袋子价值和 > a$$ 的概率\n## 题解\n简化问题：b1个银币贡献是加，b2个银币贡献是减，求 $res=t+b1-b2>0$ 的可能性。\n我们假设这b1个银币默认值是0，有1/2的概率变成1；b2个银币默认值是1，有1/2的概率变成0。则这b1+b2个银币都有1/2的概率使res增加1。我们再求res满足上述条件的概率（或者是方案数）就行。\n**把“和”变成“变化值”，整体化**\n# *\n[[构造]]可以注意一下特殊情况，比如 11111……1111 。还有题目上的限制可能比实际要用到的大，可能是来迷惑你的。\n\n# 9.30\n记得每次都要初始化，特别记住map， vector\nsqrt(long long) 精度不够，还是两边都平方\n并查集卡常 -> 启发式合并\n```\nvoid merge(int x, int y) { x = find(x), y = find(y); if (x == y) return; if (sz[x] > sz[y]) swap(x, y); f[x] = y, sz[y] += sz[x]; }\n```\n![](Pasted%20image%2020240930215251.png)\n\n# [D. Penchick and Desert Rabbit](https://codeforces.com/contest/2031/problem/D)\n\n一列数，只能跳左边比它大的，和右边比它小的，求以每一个数为起点能跳到的最高处。\n突破口：a[i] 如何跳到 a[i+1]，利用 1~i最高 和 i+1~n最矮。然后发现如果跳不到则两边隔离。\nwhy：发现从一个数跳到另一个数要考虑 左中右 三边的数，所以把中间删掉。","source":"_posts/算法竞赛/日常总结.md","raw":"---\ntitle: 日常总结\ndata: 2024-03-20\ntags:\n  - 算法竞赛\n---\n## CF932 div2比赛总结\n很烂，只做了两道题，感觉晚上好困。C思路是差不多的，主要是中间实现太复杂了，我忘了在遍历区间的右端点的时候，那个值是递减的。还是要注意区间与区间之间的关系。实现的时候还有些sb问题，需要注意。\n## [CF932 div2 E. Distance Learning Courses in MAC](https://codeforces.com/contest/1935/problem/E)\n### 题意\nn个数，每个数为 $[x_i,y_i]$ 内任意一个数，q个询问，每次给一个 $l, r$，问从第l个数到第r个数（共r-l+1个数）的最大or和。\n### 题解\n- 从最大位开始贪心\n- 如果该位（设为第 j 位）有两个数能为1（`y_i <= (1<<j)`），且至少一个数的 $x_i$ <= (1<<j)，说明这个数可以进行“降维打击”，变成 (1<<j)-1 直接结束游戏\n- 这样就把题目简化了很多，要么使用这个1后面继续考虑此数，要么不使用这个1直接进行降维打击。这个1只要不用就会结束游戏，所以一般情况必须得用。\n# [Educational Codeforces Round 161 Div.2 D. Berserk Monsters](https://codeforces.com/contest/1922/problem/D) [[优化处理]] \n\n## 题意\nn个二元组 $(a_i,d_i)$ 排成一列，n轮，每一轮对于每一个 i 若 $d_i<a_{pre_i}+a_{nxt_i}$ 则去掉这个二元组。（pre，nxt就是最近的没有去掉的二元组）。求每一轮去掉的组数。\n\n## 题解\n这道题比赛时想复杂了，想着对于每个联通块的左右端点处理，但其实没那么复杂。\n\n>It is important to note that if during the j�-th round the i�-th monster did not die and none of its alive neighbors died, then there is no point in checking this monster in the (j+1)(�+1)-th round. Therefore, we can solve the problem as follows: let's maintain a list of candidates (those who can die) for the current round; if the monster dies in the current round, then add its neighbors to the list of candidates for the next round.\n\n只用每次检查没有被保护的人（list），如果死了就在list中加入它附近的人。注意检查和去掉应该是两个循环。\n\n# [Educational Codeforces Round 161 Div.2 E - Increasing Subsequences](https://codeforces.com/contest/1922/problem/E) [[构造]]\n## 题意\n构造一个子严格上升子序列的数量恰好为x的序列\n## 题解\n构造->找到特殊处理方式\n在一个序列最后如果加上一个比它们都小的值->t+=1\n在一个序列最后如果加上一个比它们都小的值->t*=2\nt为子严格上升子序列的数量\n将序列操作与数的二进制操作联系。\n# *\n把一段染成一个颜色之后可以把这一段看成一个数\n# [Educational Codeforces Round 163 (Rated for Div. 2)](https://codeforces.com/contest/1948)D. Tandem Repeats? [[优化处理]]\n## 题意\n有一行由小写字母和？组成的字符串，？可以代表任何小写字母。求重复子串的最大长度，重复子串指满足 $s[l,l+len-1]=s[l+len,l+len*2-1]$ 的连续子串。\n$n<=5e3$\n## 题解\n没想到那么简单qwq\n就是要找到处理的相同量，这里是判断 $s[i]==s[i+len]$ ，当len固定时左端点l和l+1只有端点需要处理。在每次记一个cnt，记录满足相等的个数。因为len固定时判断的永远时s[i]和s[i+len]，所以 $？$ 可以直接贪心处理。\n# [Educational Codeforces Round 163 (Rated for Div. 2)](https://codeforces.com/contest/1948)E. Clique Partition [[构造]]\n## 题意\nn个点，第i个点序号为i，让你给每个点分配一个 a_i（1~n中互不相同的数）。当 $|i−j|+|a_i−a_j|≤k$ 时第i个点和第j个点连一条边。求此图的极大强连通子图的个数的最大值。\n## 题解\n易得每个强连通子图的点的个数<=k，则构造一种方式使n=k时答案为1。如下：\n$$m,m-1,m-2,...,1,n,n-1,...,m+1，其中m=k/2向上取整$$\n**找到边界，构造边界**\n# [Educational Codeforces Round 163 (Rated for Div. 2)](https://codeforces.com/contest/1948) F. Rare Coins [[概率]] [[优化处理]]\n## 题意\n有n个袋子，编号为1到n。第i个袋子里装着 $b_i$ 个银币。每个银币有50%的概率价值为0，50%的概率价值为1。一个袋子的价值为其银币价值的和。现在问你Q个问题，每次给一个l和一个r和一个a，求 $$编号为l到r的袋子的价值和 - 其他袋子价值和 > a$$ 的概率\n## 题解\n简化问题：b1个银币贡献是加，b2个银币贡献是减，求 $res=t+b1-b2>0$ 的可能性。\n我们假设这b1个银币默认值是0，有1/2的概率变成1；b2个银币默认值是1，有1/2的概率变成0。则这b1+b2个银币都有1/2的概率使res增加1。我们再求res满足上述条件的概率（或者是方案数）就行。\n**把“和”变成“变化值”，整体化**\n# *\n[[构造]]可以注意一下特殊情况，比如 11111……1111 。还有题目上的限制可能比实际要用到的大，可能是来迷惑你的。\n\n# 9.30\n记得每次都要初始化，特别记住map， vector\nsqrt(long long) 精度不够，还是两边都平方\n并查集卡常 -> 启发式合并\n```\nvoid merge(int x, int y) { x = find(x), y = find(y); if (x == y) return; if (sz[x] > sz[y]) swap(x, y); f[x] = y, sz[y] += sz[x]; }\n```\n![](Pasted%20image%2020240930215251.png)\n\n# [D. Penchick and Desert Rabbit](https://codeforces.com/contest/2031/problem/D)\n\n一列数，只能跳左边比它大的，和右边比它小的，求以每一个数为起点能跳到的最高处。\n突破口：a[i] 如何跳到 a[i+1]，利用 1~i最高 和 i+1~n最矮。然后发现如果跳不到则两边隔离。\nwhy：发现从一个数跳到另一个数要考虑 左中右 三边的数，所以把中间删掉。","slug":"算法竞赛/日常总结","published":1,"date":"2024-03-07T13:21:12.304Z","updated":"2024-11-20T13:35:52.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vx0019p4wv9tc49yd0","content":"<h2 id=\"cf932-div2比赛总结\"><a href=\"#cf932-div2比赛总结\" class=\"headerlink\" title=\"cf932-div2比赛总结\"></a>CF932 div2比赛总结</h2>\r\n<p>很烂，只做了两道题，感觉晚上好困。C思路是差不多的，主要是中间实现太复杂了，我忘了在遍历区间的右端点的时候，那个值是递减的。还是要注意区间与区间之间的关系。实现的时候还有些sb问题，需要注意。\r\n## <a href=\"https://codeforces.com/contest/1935/problem/E\">CF932 div2 E.\r\nDistance Learning Courses in MAC</a> ### 题意 n个数，每个数为 <span\r\nclass=\"math inline\">\\([x_i,y_i]\\)</span>\r\n内任意一个数，q个询问，每次给一个 <span class=\"math inline\">\\(l,\r\nr\\)</span>，问从第l个数到第r个数（共r-l+1个数）的最大or和。 ### 题解 -\r\n从最大位开始贪心 - 如果该位（设为第 j\r\n位）有两个数能为1（<code>y_i &lt;= (1&lt;&lt;j)</code>），且至少一个数的\r\n<span class=\"math inline\">\\(x_i\\)</span> &lt;=\r\n(1&lt;&lt;j)，说明这个数可以进行“降维打击”，变成 (1&lt;&lt;j)-1\r\n直接结束游戏 -\r\n这样就把题目简化了很多，要么使用这个1后面继续考虑此数，要么不使用这个1直接进行降维打击。这个1只要不用就会结束游戏，所以一般情况必须得用。\r\n# <a href=\"https://codeforces.com/contest/1922/problem/D\">Educational\r\nCodeforces Round 161 Div.2 D. Berserk Monsters</a> [[优化处理]]</p>\r\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2>\r\n<p>n个二元组 <span class=\"math inline\">\\((a_i,d_i)\\)</span>\r\n排成一列，n轮，每一轮对于每一个 i 若 <span\r\nclass=\"math inline\">\\(d_i&lt;a_{pre_i}+a_{nxt_i}\\)</span>\r\n则去掉这个二元组。（pre，nxt就是最近的没有去掉的二元组）。求每一轮去掉的组数。</p>\r\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\r\n<p>这道题比赛时想复杂了，想着对于每个联通块的左右端点处理，但其实没那么复杂。</p>\r\n<blockquote>\r\n<p>It is important to note that if during the j�-th round the i�-th\r\nmonster did not die and none of its alive neighbors died, then there is\r\nno point in checking this monster in the (j+1)(�+1)-th round. Therefore,\r\nwe can solve the problem as follows: let's maintain a list of candidates\r\n(those who can die) for the current round; if the monster dies in the\r\ncurrent round, then add its neighbors to the list of candidates for the\r\nnext round.</p>\r\n</blockquote>\r\n<p>只用每次检查没有被保护的人（list），如果死了就在list中加入它附近的人。注意检查和去掉应该是两个循环。</p>\r\n<h1\r\nid=\"educational-codeforces-round-161-div.2-e---increasing-subsequences-构造\"><a\r\nhref=\"https://codeforces.com/contest/1922/problem/E\">Educational\r\nCodeforces Round 161 Div.2 E - Increasing Subsequences</a> [[构造]]</h1>\r\n<h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意-1\"></a>题意</h2>\r\n<p>构造一个子严格上升子序列的数量恰好为x的序列 ## 题解\r\n构造-&gt;找到特殊处理方式\r\n在一个序列最后如果加上一个比它们都小的值-&gt;t+=1\r\n在一个序列最后如果加上一个比它们都小的值-&gt;t<em>=2\r\nt为子严格上升子序列的数量 将序列操作与数的二进制操作联系。 # </em>\r\n把一段染成一个颜色之后可以把这一段看成一个数 # <a\r\nhref=\"https://codeforces.com/contest/1948\">Educational Codeforces Round\r\n163 (Rated for Div. 2)</a>D. Tandem Repeats? [[优化处理]] ## 题意\r\n有一行由小写字母和？组成的字符串，？可以代表任何小写字母。求重复子串的最大长度，重复子串指满足\r\n<span class=\"math inline\">\\(s[l,l+len-1]=s[l+len,l+len*2-1]\\)</span>\r\n的连续子串。 <span class=\"math inline\">\\(n&lt;=5e3\\)</span> ## 题解\r\n没想到那么简单qwq 就是要找到处理的相同量，这里是判断 <span\r\nclass=\"math inline\">\\(s[i]==s[i+len]\\)</span>\r\n，当len固定时左端点l和l+1只有端点需要处理。在每次记一个cnt，记录满足相等的个数。因为len固定时判断的永远时s[i]和s[i+len]，所以\r\n<span class=\"math inline\">\\(？\\)</span> 可以直接贪心处理。 # <a\r\nhref=\"https://codeforces.com/contest/1948\">Educational Codeforces Round\r\n163 (Rated for Div. 2)</a>E. Clique Partition [[构造]] ## 题意\r\nn个点，第i个点序号为i，让你给每个点分配一个 a_i（1~n中互不相同的数）。当\r\n<span class=\"math inline\">\\(|i−j|+|a_i−a_j|≤k\\)</span>\r\n时第i个点和第j个点连一条边。求此图的极大强连通子图的个数的最大值。 ##\r\n题解\r\n易得每个强连通子图的点的个数&lt;=k，则构造一种方式使n=k时答案为1。如下：\r\n<span\r\nclass=\"math display\">\\[m,m-1,m-2,...,1,n,n-1,...,m+1，其中m=k/2向上取整\\]</span>\r\n<strong>找到边界，构造边界</strong> # <a\r\nhref=\"https://codeforces.com/contest/1948\">Educational Codeforces Round\r\n163 (Rated for Div. 2)</a> F. Rare Coins [[概率]] [[优化处理]] ## 题意\r\n有n个袋子，编号为1到n。第i个袋子里装着 <span\r\nclass=\"math inline\">\\(b_i\\)</span>\r\n个银币。每个银币有50%的概率价值为0，50%的概率价值为1。一个袋子的价值为其银币价值的和。现在问你Q个问题，每次给一个l和一个r和一个a，求\r\n<span class=\"math display\">\\[编号为l到r的袋子的价值和 - 其他袋子价值和\r\n&gt; a\\]</span> 的概率 ## 题解\r\n简化问题：b1个银币贡献是加，b2个银币贡献是减，求 <span\r\nclass=\"math inline\">\\(res=t+b1-b2&gt;0\\)</span> 的可能性。\r\n我们假设这b1个银币默认值是0，有1/2的概率变成1；b2个银币默认值是1，有1/2的概率变成0。则这b1+b2个银币都有1/2的概率使res增加1。我们再求res满足上述条件的概率（或者是方案数）就行。\r\n<strong>把“和”变成“变化值”，整体化</strong> # *\r\n[[构造]]可以注意一下特殊情况，比如 11111……1111\r\n。还有题目上的限制可能比实际要用到的大，可能是来迷惑你的。</p>\r\n<h1 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a>9.30</h1>\r\n<p>记得每次都要初始化，特别记住map， vector sqrt(long long)\r\n精度不够，还是两边都平方 并查集卡常 -&gt; 启发式合并 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">void merge(int x, int y) &#123; x = find(x), y = find(y); if (x == y) return; if (sz[x] &gt; sz[y]) swap(x, y); f[x] = y, sz[y] += sz[x]; &#125;<br></code></pre></td></tr></table></figure> <img\r\nsrc=\"Pasted%20image%2020240930215251.png\" /></p>\r\n<h1 id=\"d.-penchick-and-desert-rabbit\"><a\r\nhref=\"https://codeforces.com/contest/2031/problem/D\">D. Penchick and\r\nDesert Rabbit</a></h1>\r\n<p>一列数，只能跳左边比它大的，和右边比它小的，求以每一个数为起点能跳到的最高处。\r\n突破口：a[i] 如何跳到 a[i+1]，利用 1~i最高 和\r\ni+1~n最矮。然后发现如果跳不到则两边隔离。\r\nwhy：发现从一个数跳到另一个数要考虑 左中右\r\n三边的数，所以把中间删掉。</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"cf932-div2比赛总结\"><a href=\"#cf932-div2比赛总结\" class=\"headerlink\" title=\"cf932-div2比赛总结\"></a>CF932 div2比赛总结</h2>\r\n<p>很烂，只做了两道题，感觉晚上好困。C思路是差不多的，主要是中间实现太复杂了，我忘了在遍历区间的右端点的时候，那个值是递减的。还是要注意区间与区间之间的关系。实现的时候还有些sb问题，需要注意。\r\n## <a href=\"https://codeforces.com/contest/1935/problem/E\">CF932 div2 E.\r\nDistance Learning Courses in MAC</a> ### 题意 n个数，每个数为 <span\r\nclass=\"math inline\">\\([x_i,y_i]\\)</span>\r\n内任意一个数，q个询问，每次给一个 <span class=\"math inline\">\\(l,\r\nr\\)</span>，问从第l个数到第r个数（共r-l+1个数）的最大or和。 ### 题解 -\r\n从最大位开始贪心 - 如果该位（设为第 j\r\n位）有两个数能为1（<code>y_i &lt;= (1&lt;&lt;j)</code>），且至少一个数的\r\n<span class=\"math inline\">\\(x_i\\)</span> &lt;=\r\n(1&lt;&lt;j)，说明这个数可以进行“降维打击”，变成 (1&lt;&lt;j)-1\r\n直接结束游戏 -\r\n这样就把题目简化了很多，要么使用这个1后面继续考虑此数，要么不使用这个1直接进行降维打击。这个1只要不用就会结束游戏，所以一般情况必须得用。\r\n# <a href=\"https://codeforces.com/contest/1922/problem/D\">Educational\r\nCodeforces Round 161 Div.2 D. Berserk Monsters</a> [[优化处理]]</p>\r\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2>\r\n<p>n个二元组 <span class=\"math inline\">\\((a_i,d_i)\\)</span>\r\n排成一列，n轮，每一轮对于每一个 i 若 <span\r\nclass=\"math inline\">\\(d_i&lt;a_{pre_i}+a_{nxt_i}\\)</span>\r\n则去掉这个二元组。（pre，nxt就是最近的没有去掉的二元组）。求每一轮去掉的组数。</p>\r\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\r\n<p>这道题比赛时想复杂了，想着对于每个联通块的左右端点处理，但其实没那么复杂。</p>\r\n<blockquote>\r\n<p>It is important to note that if during the j�-th round the i�-th\r\nmonster did not die and none of its alive neighbors died, then there is\r\nno point in checking this monster in the (j+1)(�+1)-th round. Therefore,\r\nwe can solve the problem as follows: let's maintain a list of candidates\r\n(those who can die) for the current round; if the monster dies in the\r\ncurrent round, then add its neighbors to the list of candidates for the\r\nnext round.</p>\r\n</blockquote>\r\n<p>只用每次检查没有被保护的人（list），如果死了就在list中加入它附近的人。注意检查和去掉应该是两个循环。</p>\r\n<h1\r\nid=\"educational-codeforces-round-161-div.2-e---increasing-subsequences-构造\"><a\r\nhref=\"https://codeforces.com/contest/1922/problem/E\">Educational\r\nCodeforces Round 161 Div.2 E - Increasing Subsequences</a> [[构造]]</h1>\r\n<h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意-1\"></a>题意</h2>\r\n<p>构造一个子严格上升子序列的数量恰好为x的序列 ## 题解\r\n构造-&gt;找到特殊处理方式\r\n在一个序列最后如果加上一个比它们都小的值-&gt;t+=1\r\n在一个序列最后如果加上一个比它们都小的值-&gt;t<em>=2\r\nt为子严格上升子序列的数量 将序列操作与数的二进制操作联系。 # </em>\r\n把一段染成一个颜色之后可以把这一段看成一个数 # <a\r\nhref=\"https://codeforces.com/contest/1948\">Educational Codeforces Round\r\n163 (Rated for Div. 2)</a>D. Tandem Repeats? [[优化处理]] ## 题意\r\n有一行由小写字母和？组成的字符串，？可以代表任何小写字母。求重复子串的最大长度，重复子串指满足\r\n<span class=\"math inline\">\\(s[l,l+len-1]=s[l+len,l+len*2-1]\\)</span>\r\n的连续子串。 <span class=\"math inline\">\\(n&lt;=5e3\\)</span> ## 题解\r\n没想到那么简单qwq 就是要找到处理的相同量，这里是判断 <span\r\nclass=\"math inline\">\\(s[i]==s[i+len]\\)</span>\r\n，当len固定时左端点l和l+1只有端点需要处理。在每次记一个cnt，记录满足相等的个数。因为len固定时判断的永远时s[i]和s[i+len]，所以\r\n<span class=\"math inline\">\\(？\\)</span> 可以直接贪心处理。 # <a\r\nhref=\"https://codeforces.com/contest/1948\">Educational Codeforces Round\r\n163 (Rated for Div. 2)</a>E. Clique Partition [[构造]] ## 题意\r\nn个点，第i个点序号为i，让你给每个点分配一个 a_i（1~n中互不相同的数）。当\r\n<span class=\"math inline\">\\(|i−j|+|a_i−a_j|≤k\\)</span>\r\n时第i个点和第j个点连一条边。求此图的极大强连通子图的个数的最大值。 ##\r\n题解\r\n易得每个强连通子图的点的个数&lt;=k，则构造一种方式使n=k时答案为1。如下：\r\n<span\r\nclass=\"math display\">\\[m,m-1,m-2,...,1,n,n-1,...,m+1，其中m=k/2向上取整\\]</span>\r\n<strong>找到边界，构造边界</strong> # <a\r\nhref=\"https://codeforces.com/contest/1948\">Educational Codeforces Round\r\n163 (Rated for Div. 2)</a> F. Rare Coins [[概率]] [[优化处理]] ## 题意\r\n有n个袋子，编号为1到n。第i个袋子里装着 <span\r\nclass=\"math inline\">\\(b_i\\)</span>\r\n个银币。每个银币有50%的概率价值为0，50%的概率价值为1。一个袋子的价值为其银币价值的和。现在问你Q个问题，每次给一个l和一个r和一个a，求\r\n<span class=\"math display\">\\[编号为l到r的袋子的价值和 - 其他袋子价值和\r\n&gt; a\\]</span> 的概率 ## 题解\r\n简化问题：b1个银币贡献是加，b2个银币贡献是减，求 <span\r\nclass=\"math inline\">\\(res=t+b1-b2&gt;0\\)</span> 的可能性。\r\n我们假设这b1个银币默认值是0，有1/2的概率变成1；b2个银币默认值是1，有1/2的概率变成0。则这b1+b2个银币都有1/2的概率使res增加1。我们再求res满足上述条件的概率（或者是方案数）就行。\r\n<strong>把“和”变成“变化值”，整体化</strong> # *\r\n[[构造]]可以注意一下特殊情况，比如 11111……1111\r\n。还有题目上的限制可能比实际要用到的大，可能是来迷惑你的。</p>\r\n<h1 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a>9.30</h1>\r\n<p>记得每次都要初始化，特别记住map， vector sqrt(long long)\r\n精度不够，还是两边都平方 并查集卡常 -&gt; 启发式合并 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">void merge(int x, int y) &#123; x = find(x), y = find(y); if (x == y) return; if (sz[x] &gt; sz[y]) swap(x, y); f[x] = y, sz[y] += sz[x]; &#125;<br></code></pre></td></tr></table></figure> <img\r\nsrc=\"Pasted%20image%2020240930215251.png\" /></p>\r\n<h1 id=\"d.-penchick-and-desert-rabbit\"><a\r\nhref=\"https://codeforces.com/contest/2031/problem/D\">D. Penchick and\r\nDesert Rabbit</a></h1>\r\n<p>一列数，只能跳左边比它大的，和右边比它小的，求以每一个数为起点能跳到的最高处。\r\n突破口：a[i] 如何跳到 a[i+1]，利用 1~i最高 和\r\ni+1~n最矮。然后发现如果跳不到则两边隔离。\r\nwhy：发现从一个数跳到另一个数要考虑 左中右\r\n三边的数，所以把中间删掉。</p>\r\n"},{"title":"女生赛补题总结","date":"2024-02-22T16:00:00.000Z","_content":"\n## 2023HNUPC A\n\n### 大意\n\n给 一 个 长 度 为 n的 ， 只 包 含 A、 B、 C三 种  字 符 的 字 符 串 S。 问 S 中 包 含 多 少 个 三 元 组 (i,j,k)满 足 i<j<k并 且 $S_iS_jS_k=ABC$ 或 $CBA$ ， 且 每 一 个 字 符 最 多 使 用 一 次 。$(1\\leq n \\leq 3*10^5)$\n\n### 题解\n\n把所有的A和C交换位置，使得所有A都在C之前，然后只需要计算三元组ABC的个数即可。（转化法）\n\n证明正确性：\n\n设交换后的为T，交换前为S。\n\n尝试反过来想，我现在在T中选了很多ABC，现在要把其中的一些AC（不一定相邻）交换位置。那如果有两个\"ABC\"收到影响。一个变成了CBC，一个变成了ABA，假设CBC的B在ABA的B前面（反之同理），讨论A，C对于两个B的相对位置（其实只有4种情况）。\n\n### 启发\n\n这种很自由的题目，要多假设并用”反之同理“。自由的题目可转化成不自由的题目，如”ABC“”CBA“ => \"ABC\"。\n\n## 2023HNUPC B\n\n### 大意\n\n题目中说，可以选择一些有相同颜色的元素，把他们的颜色改成单调不减，使得若干次操作后，所有数 组都单调不减。 \n\n### 题解\n\n可以发现每次操作，等价于删除了一种颜色，若干次操作使得剩下的元素是单调不减的。\n\n问题就变成求一个魔改的最长上升子序列，在相同颜色的元素出现位置首次位置保存一下当前的答案， 尾的位置更新一下当前的答案即可。用树状数组，线段树，或者上升子序列的二分算法都可实现。\n\n（对于一组相同元素a，最后一定是连着的，所以它们只能接第一个a前面的元素，只能最后一个a后面的元素接它们）\n\n### 启示\n\n简化思想\n\n联想模型\n\n## D\n\n$0!=1$\n\n一个很复杂的式子可能最后很简单。\n\n## E\n\n博弈论\n\n### 题意\n\n给定n堆石子，第i堆石子有$a_i$个，每次操作可以从最左边 的石子堆中移除任意个石子(至少1个)，无法操作的人输。 两个人玩游戏。每人连续操作1次，问谁能胜利。 一共有T个case。\n\n### 题解\n\n如果最左边石子堆数量为1，则操作唯一，交换先后手。 如果最左边石子堆数量大于1，则当前操作的人必胜（若$a_{i+1}>1$ 则取 $a_i-1$，让对手取最后的1；若 $a_{i+1}=1$ 则取 $a_i$ 个，让对手取 $a_{i+1}$ 的1）。 如果当前没有石子，则当前操作的人必败。\n\n如果每人每次连续操作k次。定义f(i,j)表示如果第i堆只剩j个石子，并且其左侧的石子全部拿完的状态下，先手是否能获胜状态。1表示先手必胜，0表示后手必胜。能证明若f(i,j)=1,则任意t<j,f(i,t)=1。\n\n### 启示\n\n让对手的操作唯一，让自己的状态能由自己控制\n\n证明状态单调来减少状态数。\n\n","source":"_posts/算法竞赛/女生赛补题总结.md","raw":"---\ntitle: 女生赛补题总结\ndate: 2024-02-23 00:00:00\ntags:\n  - 算法竞赛\n---\n\n## 2023HNUPC A\n\n### 大意\n\n给 一 个 长 度 为 n的 ， 只 包 含 A、 B、 C三 种  字 符 的 字 符 串 S。 问 S 中 包 含 多 少 个 三 元 组 (i,j,k)满 足 i<j<k并 且 $S_iS_jS_k=ABC$ 或 $CBA$ ， 且 每 一 个 字 符 最 多 使 用 一 次 。$(1\\leq n \\leq 3*10^5)$\n\n### 题解\n\n把所有的A和C交换位置，使得所有A都在C之前，然后只需要计算三元组ABC的个数即可。（转化法）\n\n证明正确性：\n\n设交换后的为T，交换前为S。\n\n尝试反过来想，我现在在T中选了很多ABC，现在要把其中的一些AC（不一定相邻）交换位置。那如果有两个\"ABC\"收到影响。一个变成了CBC，一个变成了ABA，假设CBC的B在ABA的B前面（反之同理），讨论A，C对于两个B的相对位置（其实只有4种情况）。\n\n### 启发\n\n这种很自由的题目，要多假设并用”反之同理“。自由的题目可转化成不自由的题目，如”ABC“”CBA“ => \"ABC\"。\n\n## 2023HNUPC B\n\n### 大意\n\n题目中说，可以选择一些有相同颜色的元素，把他们的颜色改成单调不减，使得若干次操作后，所有数 组都单调不减。 \n\n### 题解\n\n可以发现每次操作，等价于删除了一种颜色，若干次操作使得剩下的元素是单调不减的。\n\n问题就变成求一个魔改的最长上升子序列，在相同颜色的元素出现位置首次位置保存一下当前的答案， 尾的位置更新一下当前的答案即可。用树状数组，线段树，或者上升子序列的二分算法都可实现。\n\n（对于一组相同元素a，最后一定是连着的，所以它们只能接第一个a前面的元素，只能最后一个a后面的元素接它们）\n\n### 启示\n\n简化思想\n\n联想模型\n\n## D\n\n$0!=1$\n\n一个很复杂的式子可能最后很简单。\n\n## E\n\n博弈论\n\n### 题意\n\n给定n堆石子，第i堆石子有$a_i$个，每次操作可以从最左边 的石子堆中移除任意个石子(至少1个)，无法操作的人输。 两个人玩游戏。每人连续操作1次，问谁能胜利。 一共有T个case。\n\n### 题解\n\n如果最左边石子堆数量为1，则操作唯一，交换先后手。 如果最左边石子堆数量大于1，则当前操作的人必胜（若$a_{i+1}>1$ 则取 $a_i-1$，让对手取最后的1；若 $a_{i+1}=1$ 则取 $a_i$ 个，让对手取 $a_{i+1}$ 的1）。 如果当前没有石子，则当前操作的人必败。\n\n如果每人每次连续操作k次。定义f(i,j)表示如果第i堆只剩j个石子，并且其左侧的石子全部拿完的状态下，先手是否能获胜状态。1表示先手必胜，0表示后手必胜。能证明若f(i,j)=1,则任意t<j,f(i,t)=1。\n\n### 启示\n\n让对手的操作唯一，让自己的状态能由自己控制\n\n证明状态单调来减少状态数。\n\n","slug":"算法竞赛/女生赛补题总结","published":1,"updated":"2024-02-23T07:22:26.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vy001bp4wv7ldi930e","content":"<h2 id=\"hnupc-a\"><a href=\"#hnupc-a\" class=\"headerlink\" title=\"hnupc-a\"></a>2023HNUPC A</h2>\r\n<h3 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h3>\r\n<p>给 一 个 长 度 为 n的 ， 只 包 含 A、 B、 C三 种 字 符 的 字 符 串\r\nS。 问 S 中 包 含 多 少 个 三 元 组 (i,j,k)满 足 i&lt;j&lt;k并 且 <span\r\nclass=\"math inline\">\\(S_iS_jS_k=ABC\\)</span> 或 <span\r\nclass=\"math inline\">\\(CBA\\)</span> ， 且 每 一 个 字 符 最 多 使 用 一\r\n次 。<span class=\"math inline\">\\((1\\leq n \\leq 3*10^5)\\)</span></p>\r\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\r\n<p>把所有的A和C交换位置，使得所有A都在C之前，然后只需要计算三元组ABC的个数即可。（转化法）</p>\r\n<p>证明正确性：</p>\r\n<p>设交换后的为T，交换前为S。</p>\r\n<p>尝试反过来想，我现在在T中选了很多ABC，现在要把其中的一些AC（不一定相邻）交换位置。那如果有两个\"ABC\"收到影响。一个变成了CBC，一个变成了ABA，假设CBC的B在ABA的B前面（反之同理），讨论A，C对于两个B的相对位置（其实只有4种情况）。</p>\r\n<h3 id=\"启发\"><a href=\"#启发\" class=\"headerlink\" title=\"启发\"></a>启发</h3>\r\n<p>这种很自由的题目，要多假设并用”反之同理“。自由的题目可转化成不自由的题目，如”ABC“”CBA“\r\n=&gt; \"ABC\"。</p>\r\n<h2 id=\"hnupc-b\"><a href=\"#hnupc-b\" class=\"headerlink\" title=\"hnupc-b\"></a>2023HNUPC B</h2>\r\n<h3 id=\"大意-1\"><a href=\"#大意-1\" class=\"headerlink\" title=\"大意-1\"></a>大意</h3>\r\n<p>题目中说，可以选择一些有相同颜色的元素，把他们的颜色改成单调不减，使得若干次操作后，所有数\r\n组都单调不减。</p>\r\n<h3 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解-1\"></a>题解</h3>\r\n<p>可以发现每次操作，等价于删除了一种颜色，若干次操作使得剩下的元素是单调不减的。</p>\r\n<p>问题就变成求一个魔改的最长上升子序列，在相同颜色的元素出现位置首次位置保存一下当前的答案，\r\n尾的位置更新一下当前的答案即可。用树状数组，线段树，或者上升子序列的二分算法都可实现。</p>\r\n<p>（对于一组相同元素a，最后一定是连着的，所以它们只能接第一个a前面的元素，只能最后一个a后面的元素接它们）</p>\r\n<h3 id=\"启示\"><a href=\"#启示\" class=\"headerlink\" title=\"启示\"></a>启示</h3>\r\n<p>简化思想</p>\r\n<p>联想模型</p>\r\n<h2 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"d\"></a>D</h2>\r\n<p><span class=\"math inline\">\\(0!=1\\)</span></p>\r\n<p>一个很复杂的式子可能最后很简单。</p>\r\n<h2 id=\"e\"><a href=\"#e\" class=\"headerlink\" title=\"e\"></a>E</h2>\r\n<p>博弈论</p>\r\n<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3>\r\n<p>给定n堆石子，第i堆石子有<span\r\nclass=\"math inline\">\\(a_i\\)</span>个，每次操作可以从最左边\r\n的石子堆中移除任意个石子(至少1个)，无法操作的人输。\r\n两个人玩游戏。每人连续操作1次，问谁能胜利。 一共有T个case。</p>\r\n<h3 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解-2\"></a>题解</h3>\r\n<p>如果最左边石子堆数量为1，则操作唯一，交换先后手。\r\n如果最左边石子堆数量大于1，则当前操作的人必胜（若<span\r\nclass=\"math inline\">\\(a_{i+1}&gt;1\\)</span> 则取 <span\r\nclass=\"math inline\">\\(a_i-1\\)</span>，让对手取最后的1；若 <span\r\nclass=\"math inline\">\\(a_{i+1}=1\\)</span> 则取 <span\r\nclass=\"math inline\">\\(a_i\\)</span> 个，让对手取 <span\r\nclass=\"math inline\">\\(a_{i+1}\\)</span> 的1）。\r\n如果当前没有石子，则当前操作的人必败。</p>\r\n<p>如果每人每次连续操作k次。定义f(i,j)表示如果第i堆只剩j个石子，并且其左侧的石子全部拿完的状态下，先手是否能获胜状态。1表示先手必胜，0表示后手必胜。能证明若f(i,j)=1,则任意t&lt;j,f(i,t)=1。</p>\r\n<h3 id=\"启示-1\"><a href=\"#启示-1\" class=\"headerlink\" title=\"启示-1\"></a>启示</h3>\r\n<p>让对手的操作唯一，让自己的状态能由自己控制</p>\r\n<p>证明状态单调来减少状态数。</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hnupc-a\"><a href=\"#hnupc-a\" class=\"headerlink\" title=\"hnupc-a\"></a>2023HNUPC A</h2>\r\n<h3 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h3>\r\n<p>给 一 个 长 度 为 n的 ， 只 包 含 A、 B、 C三 种 字 符 的 字 符 串\r\nS。 问 S 中 包 含 多 少 个 三 元 组 (i,j,k)满 足 i&lt;j&lt;k并 且 <span\r\nclass=\"math inline\">\\(S_iS_jS_k=ABC\\)</span> 或 <span\r\nclass=\"math inline\">\\(CBA\\)</span> ， 且 每 一 个 字 符 最 多 使 用 一\r\n次 。<span class=\"math inline\">\\((1\\leq n \\leq 3*10^5)\\)</span></p>\r\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\r\n<p>把所有的A和C交换位置，使得所有A都在C之前，然后只需要计算三元组ABC的个数即可。（转化法）</p>\r\n<p>证明正确性：</p>\r\n<p>设交换后的为T，交换前为S。</p>\r\n<p>尝试反过来想，我现在在T中选了很多ABC，现在要把其中的一些AC（不一定相邻）交换位置。那如果有两个\"ABC\"收到影响。一个变成了CBC，一个变成了ABA，假设CBC的B在ABA的B前面（反之同理），讨论A，C对于两个B的相对位置（其实只有4种情况）。</p>\r\n<h3 id=\"启发\"><a href=\"#启发\" class=\"headerlink\" title=\"启发\"></a>启发</h3>\r\n<p>这种很自由的题目，要多假设并用”反之同理“。自由的题目可转化成不自由的题目，如”ABC“”CBA“\r\n=&gt; \"ABC\"。</p>\r\n<h2 id=\"hnupc-b\"><a href=\"#hnupc-b\" class=\"headerlink\" title=\"hnupc-b\"></a>2023HNUPC B</h2>\r\n<h3 id=\"大意-1\"><a href=\"#大意-1\" class=\"headerlink\" title=\"大意-1\"></a>大意</h3>\r\n<p>题目中说，可以选择一些有相同颜色的元素，把他们的颜色改成单调不减，使得若干次操作后，所有数\r\n组都单调不减。</p>\r\n<h3 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解-1\"></a>题解</h3>\r\n<p>可以发现每次操作，等价于删除了一种颜色，若干次操作使得剩下的元素是单调不减的。</p>\r\n<p>问题就变成求一个魔改的最长上升子序列，在相同颜色的元素出现位置首次位置保存一下当前的答案，\r\n尾的位置更新一下当前的答案即可。用树状数组，线段树，或者上升子序列的二分算法都可实现。</p>\r\n<p>（对于一组相同元素a，最后一定是连着的，所以它们只能接第一个a前面的元素，只能最后一个a后面的元素接它们）</p>\r\n<h3 id=\"启示\"><a href=\"#启示\" class=\"headerlink\" title=\"启示\"></a>启示</h3>\r\n<p>简化思想</p>\r\n<p>联想模型</p>\r\n<h2 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"d\"></a>D</h2>\r\n<p><span class=\"math inline\">\\(0!=1\\)</span></p>\r\n<p>一个很复杂的式子可能最后很简单。</p>\r\n<h2 id=\"e\"><a href=\"#e\" class=\"headerlink\" title=\"e\"></a>E</h2>\r\n<p>博弈论</p>\r\n<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3>\r\n<p>给定n堆石子，第i堆石子有<span\r\nclass=\"math inline\">\\(a_i\\)</span>个，每次操作可以从最左边\r\n的石子堆中移除任意个石子(至少1个)，无法操作的人输。\r\n两个人玩游戏。每人连续操作1次，问谁能胜利。 一共有T个case。</p>\r\n<h3 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解-2\"></a>题解</h3>\r\n<p>如果最左边石子堆数量为1，则操作唯一，交换先后手。\r\n如果最左边石子堆数量大于1，则当前操作的人必胜（若<span\r\nclass=\"math inline\">\\(a_{i+1}&gt;1\\)</span> 则取 <span\r\nclass=\"math inline\">\\(a_i-1\\)</span>，让对手取最后的1；若 <span\r\nclass=\"math inline\">\\(a_{i+1}=1\\)</span> 则取 <span\r\nclass=\"math inline\">\\(a_i\\)</span> 个，让对手取 <span\r\nclass=\"math inline\">\\(a_{i+1}\\)</span> 的1）。\r\n如果当前没有石子，则当前操作的人必败。</p>\r\n<p>如果每人每次连续操作k次。定义f(i,j)表示如果第i堆只剩j个石子，并且其左侧的石子全部拿完的状态下，先手是否能获胜状态。1表示先手必胜，0表示后手必胜。能证明若f(i,j)=1,则任意t&lt;j,f(i,t)=1。</p>\r\n<h3 id=\"启示-1\"><a href=\"#启示-1\" class=\"headerlink\" title=\"启示-1\"></a>启示</h3>\r\n<p>让对手的操作唯一，让自己的状态能由自己控制</p>\r\n<p>证明状态单调来减少状态数。</p>\r\n"},{"title":"高三暑假集训总结","date":"2024-02-22T16:00:00.000Z","_content":"\n# [CodeForces - 1426E](https://vjudge.net/problem/CodeForces-1426E/origin) Rock, Paper, Scissors\n\n##  题意\n\nA出a1次石头，出a2次剪刀，出a3次布，B同理。顺序自定。求the minimum number of round Alice can win和the maximum number of rounds Alice can win。\n\n## 题解\n\n思维题\n\n先说max。每次决策非常独立。易得A的石头最多赢 $min(a1,b2)$ 次（其他同理），而且这样取互相不会影响（石头赢并不影响剪刀赢）。\n\n再说min。如果要赢得最少就要输的和平的尽量多。但是输的和平的不知道怎么分配\n\n# [牛客多校6]([牛客竞赛_ACM/NOI/CSP/CCPC/ICPC算法编程高难度练习赛_牛客竞赛OJ (nowcoder.com)](https://ac.nowcoder.com/acm/contest/57360)) E - Sequence\n\n## 题意\n\n给定一个长度为 n的序列 a \n\n多个询问，每次询问一段区间 l, r, k, 求是否能将这个区间分成 k个部分使得每一部分的和都是偶数\n\n复杂度为O(n+q)\n\n## 题解\n\n> “考虑从左到右扫，只要当前和为偶数就把它切开 \n>\n> 那么我们可以得到这个区间最多能分成多少个偶数部分 \n>\n> 这个过程可以通过记录奇偶性（奇数当成1，偶数当成0）的前缀和来维护 时间复杂度:O(n + q)”\n\n一个简化：奇数当成1，偶数当成0\n\n再一个通项：00100010001000100\n\n为啥这样会没有后效性呢？试一试就知道了。\n\n因为在[l,r]之内都**必须满足**，所以可以直接从前往后扫。（从l开始策略很固定）\n\ntip:有的时候查找一段的信息可以用前缀和。\n\n# B - Distance\n\n一个很高级的公式：\n$$\n\\sum^{min(x,y)}_{i=0}(^x_i)(^y_i) = (^{x+y}_x)\n$$\n证明如下：\n\n$\\because (^y_i)=(^y_{y-i})$\n\n发现上面加起来是x+y，下面加起来是y（这里设x>y）\n\n注意$(^{x+y}_x)=(^{x+y}_y)$ \n","source":"_posts/算法竞赛/高三暑假集训总结.md","raw":"---\ntitle: 高三暑假集训总结\ndate: 2024-02-23 00:00:00\ntags:\n  - 算法竞赛\n---\n\n# [CodeForces - 1426E](https://vjudge.net/problem/CodeForces-1426E/origin) Rock, Paper, Scissors\n\n##  题意\n\nA出a1次石头，出a2次剪刀，出a3次布，B同理。顺序自定。求the minimum number of round Alice can win和the maximum number of rounds Alice can win。\n\n## 题解\n\n思维题\n\n先说max。每次决策非常独立。易得A的石头最多赢 $min(a1,b2)$ 次（其他同理），而且这样取互相不会影响（石头赢并不影响剪刀赢）。\n\n再说min。如果要赢得最少就要输的和平的尽量多。但是输的和平的不知道怎么分配\n\n# [牛客多校6]([牛客竞赛_ACM/NOI/CSP/CCPC/ICPC算法编程高难度练习赛_牛客竞赛OJ (nowcoder.com)](https://ac.nowcoder.com/acm/contest/57360)) E - Sequence\n\n## 题意\n\n给定一个长度为 n的序列 a \n\n多个询问，每次询问一段区间 l, r, k, 求是否能将这个区间分成 k个部分使得每一部分的和都是偶数\n\n复杂度为O(n+q)\n\n## 题解\n\n> “考虑从左到右扫，只要当前和为偶数就把它切开 \n>\n> 那么我们可以得到这个区间最多能分成多少个偶数部分 \n>\n> 这个过程可以通过记录奇偶性（奇数当成1，偶数当成0）的前缀和来维护 时间复杂度:O(n + q)”\n\n一个简化：奇数当成1，偶数当成0\n\n再一个通项：00100010001000100\n\n为啥这样会没有后效性呢？试一试就知道了。\n\n因为在[l,r]之内都**必须满足**，所以可以直接从前往后扫。（从l开始策略很固定）\n\ntip:有的时候查找一段的信息可以用前缀和。\n\n# B - Distance\n\n一个很高级的公式：\n$$\n\\sum^{min(x,y)}_{i=0}(^x_i)(^y_i) = (^{x+y}_x)\n$$\n证明如下：\n\n$\\because (^y_i)=(^y_{y-i})$\n\n发现上面加起来是x+y，下面加起来是y（这里设x>y）\n\n注意$(^{x+y}_x)=(^{x+y}_y)$ \n","slug":"算法竞赛/高三暑假集训总结","published":1,"updated":"2024-02-23T07:21:53.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3vz001dp4wvglluan6b","content":"<h1 id=\"codeforces---1426e-rock-paper-scissors\"><a\r\nhref=\"https://vjudge.net/problem/CodeForces-1426E/origin\">CodeForces -\r\n1426E</a> Rock, Paper, Scissors</h1>\r\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2>\r\n<p>A出a1次石头，出a2次剪刀，出a3次布，B同理。顺序自定。求the minimum\r\nnumber of round Alice can win和the maximum number of rounds Alice can\r\nwin。</p>\r\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\r\n<p>思维题</p>\r\n<p>先说max。每次决策非常独立。易得A的石头最多赢 <span\r\nclass=\"math inline\">\\(min(a1,b2)\\)</span>\r\n次（其他同理），而且这样取互相不会影响（石头赢并不影响剪刀赢）。</p>\r\n<p>再说min。如果要赢得最少就要输的和平的尽量多。但是输的和平的不知道怎么分配</p>\r\n<h1 id=\"牛客多校6-e---sequence\"><a\r\nhref=\"%5B牛客竞赛_ACM/NOI/CSP/CCPC/ICPC算法编程高难度练习赛_牛客竞赛OJ%20(nowcoder.com)%5D(https://ac.nowcoder.com/acm/contest/57360)\">牛客多校6</a>\r\nE - Sequence</h1>\r\n<h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意-1\"></a>题意</h2>\r\n<p>给定一个长度为 n的序列 a</p>\r\n<p>多个询问，每次询问一段区间 l, r, k, 求是否能将这个区间分成\r\nk个部分使得每一部分的和都是偶数</p>\r\n<p>复杂度为O(n+q)</p>\r\n<h2 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解-1\"></a>题解</h2>\r\n<blockquote>\r\n<p>“考虑从左到右扫，只要当前和为偶数就把它切开</p>\r\n<p>那么我们可以得到这个区间最多能分成多少个偶数部分</p>\r\n<p>这个过程可以通过记录奇偶性（奇数当成1，偶数当成0）的前缀和来维护\r\n时间复杂度:O(n + q)”</p>\r\n</blockquote>\r\n<p>一个简化：奇数当成1，偶数当成0</p>\r\n<p>再一个通项：00100010001000100</p>\r\n<p>为啥这样会没有后效性呢？试一试就知道了。</p>\r\n<p>因为在[l,r]之内都<strong>必须满足</strong>，所以可以直接从前往后扫。（从l开始策略很固定）</p>\r\n<p>tip:有的时候查找一段的信息可以用前缀和。</p>\r\n<h1 id=\"b---distance\"><a href=\"#b---distance\" class=\"headerlink\" title=\"b---distance\"></a>B - Distance</h1>\r\n<p>一个很高级的公式： <span class=\"math display\">\\[\r\n\\sum^{min(x,y)}_{i=0}(^x_i)(^y_i) = (^{x+y}_x)\r\n\\]</span> 证明如下：</p>\r\n<p><span class=\"math inline\">\\(\\because (^y_i)=(^y_{y-i})\\)</span></p>\r\n<p>发现上面加起来是x+y，下面加起来是y（这里设x&gt;y）</p>\r\n<p>注意<span class=\"math inline\">\\((^{x+y}_x)=(^{x+y}_y)\\)</span></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"codeforces---1426e-rock-paper-scissors\"><a\r\nhref=\"https://vjudge.net/problem/CodeForces-1426E/origin\">CodeForces -\r\n1426E</a> Rock, Paper, Scissors</h1>\r\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2>\r\n<p>A出a1次石头，出a2次剪刀，出a3次布，B同理。顺序自定。求the minimum\r\nnumber of round Alice can win和the maximum number of rounds Alice can\r\nwin。</p>\r\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\r\n<p>思维题</p>\r\n<p>先说max。每次决策非常独立。易得A的石头最多赢 <span\r\nclass=\"math inline\">\\(min(a1,b2)\\)</span>\r\n次（其他同理），而且这样取互相不会影响（石头赢并不影响剪刀赢）。</p>\r\n<p>再说min。如果要赢得最少就要输的和平的尽量多。但是输的和平的不知道怎么分配</p>\r\n<h1 id=\"牛客多校6-e---sequence\"><a\r\nhref=\"%5B牛客竞赛_ACM/NOI/CSP/CCPC/ICPC算法编程高难度练习赛_牛客竞赛OJ%20(nowcoder.com)%5D(https://ac.nowcoder.com/acm/contest/57360)\">牛客多校6</a>\r\nE - Sequence</h1>\r\n<h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意-1\"></a>题意</h2>\r\n<p>给定一个长度为 n的序列 a</p>\r\n<p>多个询问，每次询问一段区间 l, r, k, 求是否能将这个区间分成\r\nk个部分使得每一部分的和都是偶数</p>\r\n<p>复杂度为O(n+q)</p>\r\n<h2 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解-1\"></a>题解</h2>\r\n<blockquote>\r\n<p>“考虑从左到右扫，只要当前和为偶数就把它切开</p>\r\n<p>那么我们可以得到这个区间最多能分成多少个偶数部分</p>\r\n<p>这个过程可以通过记录奇偶性（奇数当成1，偶数当成0）的前缀和来维护\r\n时间复杂度:O(n + q)”</p>\r\n</blockquote>\r\n<p>一个简化：奇数当成1，偶数当成0</p>\r\n<p>再一个通项：00100010001000100</p>\r\n<p>为啥这样会没有后效性呢？试一试就知道了。</p>\r\n<p>因为在[l,r]之内都<strong>必须满足</strong>，所以可以直接从前往后扫。（从l开始策略很固定）</p>\r\n<p>tip:有的时候查找一段的信息可以用前缀和。</p>\r\n<h1 id=\"b---distance\"><a href=\"#b---distance\" class=\"headerlink\" title=\"b---distance\"></a>B - Distance</h1>\r\n<p>一个很高级的公式： <span class=\"math display\">\\[\r\n\\sum^{min(x,y)}_{i=0}(^x_i)(^y_i) = (^{x+y}_x)\r\n\\]</span> 证明如下：</p>\r\n<p><span class=\"math inline\">\\(\\because (^y_i)=(^y_{y-i})\\)</span></p>\r\n<p>发现上面加起来是x+y，下面加起来是y（这里设x&gt;y）</p>\r\n<p>注意<span class=\"math inline\">\\((^{x+y}_x)=(^{x+y}_y)\\)</span></p>\r\n"},{"title":"大一下总结","data":"2024-07-17T16:00:00.000Z","_content":"一学期的大学生活又过去了，不至于翻天覆地但也是极大的变化时刻在发生着，感觉大脑的另一半正在慢慢唤醒，让我成长为一个更完整的人。  \n  \n遇到了一个很好很好的人，在我充满迷雾的未来里竖起灯塔，给予我勇气去接纳外面的世界，也让我打开自己关于感性的一半。让我少一些纠结，少一些怯懦，少一些退缩。就像我之前所说的，做一个纯粹而强大的人，希望我能保持这一份纯粹，and never let go。  \n  \n我很幸运，很幸运地能够学习自己喜欢的专业，很幸运地有一个不太痛苦的童年和大学。度过了一个虽然有一些波折但非常快乐的学期。希望能对代码继续保持热爱。也对别的人，别的事情多一些耐心，多一些自信，少一些回避吧。其实有一些事情真的没有想象中的那么难，也许就是缺一点点勇气。  \n  \n我知道keep learning，兼具深度和广度是一件很难的事情，但是还是需要加油突破自己。多跟别人合作一下，不然以后就难难了。  \n  \n我对未来没有什么规划，但是还是想keep going，给未来更多选择的机会吧。\n\n还有，期末许下的诺言，希望你能记住。毕竟，“君子一言，驷马难追”","source":"_posts/总结/大一下总结.md","raw":"---\ntitle: 大一下总结\ndata: 2024-07-18\ntags:\n  - 总结\n  - 生活\n---\n一学期的大学生活又过去了，不至于翻天覆地但也是极大的变化时刻在发生着，感觉大脑的另一半正在慢慢唤醒，让我成长为一个更完整的人。  \n  \n遇到了一个很好很好的人，在我充满迷雾的未来里竖起灯塔，给予我勇气去接纳外面的世界，也让我打开自己关于感性的一半。让我少一些纠结，少一些怯懦，少一些退缩。就像我之前所说的，做一个纯粹而强大的人，希望我能保持这一份纯粹，and never let go。  \n  \n我很幸运，很幸运地能够学习自己喜欢的专业，很幸运地有一个不太痛苦的童年和大学。度过了一个虽然有一些波折但非常快乐的学期。希望能对代码继续保持热爱。也对别的人，别的事情多一些耐心，多一些自信，少一些回避吧。其实有一些事情真的没有想象中的那么难，也许就是缺一点点勇气。  \n  \n我知道keep learning，兼具深度和广度是一件很难的事情，但是还是需要加油突破自己。多跟别人合作一下，不然以后就难难了。  \n  \n我对未来没有什么规划，但是还是想keep going，给未来更多选择的机会吧。\n\n还有，期末许下的诺言，希望你能记住。毕竟，“君子一言，驷马难追”","slug":"总结/大一下总结","published":1,"date":"2024-07-17T21:20:13.038Z","updated":"2024-07-17T21:39:06.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3w0001fp4wvd4pce5xk","content":"<p>一学期的大学生活又过去了，不至于翻天覆地但也是极大的变化时刻在发生着，感觉大脑的另一半正在慢慢唤醒，让我成长为一个更完整的人。</p>\r\n<p>遇到了一个很好很好的人，在我充满迷雾的未来里竖起灯塔，给予我勇气去接纳外面的世界，也让我打开自己关于感性的一半。让我少一些纠结，少一些怯懦，少一些退缩。就像我之前所说的，做一个纯粹而强大的人，希望我能保持这一份纯粹，and never let go。</p>\r\n<p>我很幸运，很幸运地能够学习自己喜欢的专业，很幸运地有一个不太痛苦的童年和大学。度过了一个虽然有一些波折但非常快乐的学期。希望能对代码继续保持热爱。也对别的人，别的事情多一些耐心，多一些自信，少一些回避吧。其实有一些事情真的没有想象中的那么难，也许就是缺一点点勇气。</p>\r\n<p>我知道keep learning，兼具深度和广度是一件很难的事情，但是还是需要加油突破自己。多跟别人合作一下，不然以后就难难了。</p>\r\n<p>我对未来没有什么规划，但是还是想keep going，给未来更多选择的机会吧。</p>\r\n<p>还有，期末许下的诺言，希望你能记住。毕竟，“君子一言，驷马难追”</p>\r\n","site":{"data":{}},"excerpt":"","more":"<p>一学期的大学生活又过去了，不至于翻天覆地但也是极大的变化时刻在发生着，感觉大脑的另一半正在慢慢唤醒，让我成长为一个更完整的人。</p>\r\n<p>遇到了一个很好很好的人，在我充满迷雾的未来里竖起灯塔，给予我勇气去接纳外面的世界，也让我打开自己关于感性的一半。让我少一些纠结，少一些怯懦，少一些退缩。就像我之前所说的，做一个纯粹而强大的人，希望我能保持这一份纯粹，and never let go。</p>\r\n<p>我很幸运，很幸运地能够学习自己喜欢的专业，很幸运地有一个不太痛苦的童年和大学。度过了一个虽然有一些波折但非常快乐的学期。希望能对代码继续保持热爱。也对别的人，别的事情多一些耐心，多一些自信，少一些回避吧。其实有一些事情真的没有想象中的那么难，也许就是缺一点点勇气。</p>\r\n<p>我知道keep learning，兼具深度和广度是一件很难的事情，但是还是需要加油突破自己。多跟别人合作一下，不然以后就难难了。</p>\r\n<p>我对未来没有什么规划，但是还是想keep going，给未来更多选择的机会吧。</p>\r\n<p>还有，期末许下的诺言，希望你能记住。毕竟，“君子一言，驷马难追”</p>\r\n"},{"title":"新，兴奋与焦虑 —— 大一上总结","date":"2024-01-21T08:41:05.000Z","_content":"\n来到大学的第一个学期，感觉挺好的。有一种自己掌握生活的感觉，虽然有的时候也因此而焦虑。但毕竟能干自己爱干的事情了。\n\n<!-- more -->\n\n这学期的感觉总结下来就是兴奋和焦虑。兴奋是因为接触到了很多很多新鲜事情，有生活上的，专业学习上的，学生组织上的……这份新鲜感也让我乐于尝试很多事情。但就像拉封丹说的“耐心与持久胜于激烈的狂热”，我希望我能不仅仅乐于“尝试”很多事情，还需要坚持下来，去乐于深入学习这些事情。焦虑一方面则是因为大学的一些事让我浪费了很多时间在做无意义的事情上。但这也是无可厚非的，毕竟一个复杂庞大的社会的运行需要这些东西，我们已经享受了很多自由了。（所以希望之后的自己放平心态）另一方面，则是关于个人成长和未来规划。主要包括对未来方向的迷茫，对努力方向和意义的迷茫以及对无法把握的事情的无力感，当然还有被卷的焦虑。这些焦虑肯定不能完全解决，但还是希望有时间能多读点文章和书。总的来说感觉这学期确实挺充实的，不仅是事情上，也是精神上。\n\n下面来看看我都干了什么。\n\n数学学习上，我感觉这学期还挺轻松的。可能是因为有竞赛基础，所以上课大致还能听懂。但也不是那种没有输入的轻松，一直在费劲去理解一些东西，思考一些不会做的题。挺有收获的。但是看得出来数学确实难，我的兴趣也不在那里，所以我出来了。（但有些人确实挺费力的，希望我的前同学们能有一个正常的四年吧）数学的学习也让我学会去“沉淀”，去沉浸下来啃一些难骨头，希望在未来坚持。\n\n计算机学习上，我感觉确实学到了很多，但也看见了计算机体系之庞大。这学期在联创学习新人任务，在学长那里学到了很多关于前端的。（新人任务真是个好东西，人确实需要ddl和拷打）然后又看了无人机的内容，也大致知道怎么弄了。（我竟然在英语考试前一天看英语论文来复习英语，真的佩服自己的创意）然后自己也学了一些其他的东西，搞到了很多国外的优质网站，确实优质。（但网站在精不在多，还是不要再到处搜罗新的网站和工具为好，拿更多时间在学习上）\n\n生活上，我也学习到了很多东西，有了巨多的思考，第二段就是其中一部分。除此之外，我知道了大学（也是未来）是随机性巨多的东西（比如我的高代（大哭）），所以我们更要抛弃线性思维，提高自己的总体竞争力，也要找到自己的信仰，不被外界所操控。其他的暂时忘了。还有输入和输出的思想。\n\n看起来都是输入呢。但其实也有输出。比如这篇文章（doge），还有自己做到小网站，还有接下来的回母校的演讲（希望不要太紧张呢）。\n\n对于未来，我希望以后能多加入一些人际交往的东西。（毕竟这方面真的很差呢）然后就是多探索探索每个领域，找到自己的方向。加油！坚持下去！\n\n没时间写了，爬虫的书还一点都没翻过呢。\n","source":"_posts/总结/新，兴奋与焦虑——大一上期总结.md","raw":"---\ntitle: 新，兴奋与焦虑 —— 大一上总结\ndate: 2024-01-21 16:41:05\ntags:\n  - 总结\n  - 生活\n---\n\n来到大学的第一个学期，感觉挺好的。有一种自己掌握生活的感觉，虽然有的时候也因此而焦虑。但毕竟能干自己爱干的事情了。\n\n<!-- more -->\n\n这学期的感觉总结下来就是兴奋和焦虑。兴奋是因为接触到了很多很多新鲜事情，有生活上的，专业学习上的，学生组织上的……这份新鲜感也让我乐于尝试很多事情。但就像拉封丹说的“耐心与持久胜于激烈的狂热”，我希望我能不仅仅乐于“尝试”很多事情，还需要坚持下来，去乐于深入学习这些事情。焦虑一方面则是因为大学的一些事让我浪费了很多时间在做无意义的事情上。但这也是无可厚非的，毕竟一个复杂庞大的社会的运行需要这些东西，我们已经享受了很多自由了。（所以希望之后的自己放平心态）另一方面，则是关于个人成长和未来规划。主要包括对未来方向的迷茫，对努力方向和意义的迷茫以及对无法把握的事情的无力感，当然还有被卷的焦虑。这些焦虑肯定不能完全解决，但还是希望有时间能多读点文章和书。总的来说感觉这学期确实挺充实的，不仅是事情上，也是精神上。\n\n下面来看看我都干了什么。\n\n数学学习上，我感觉这学期还挺轻松的。可能是因为有竞赛基础，所以上课大致还能听懂。但也不是那种没有输入的轻松，一直在费劲去理解一些东西，思考一些不会做的题。挺有收获的。但是看得出来数学确实难，我的兴趣也不在那里，所以我出来了。（但有些人确实挺费力的，希望我的前同学们能有一个正常的四年吧）数学的学习也让我学会去“沉淀”，去沉浸下来啃一些难骨头，希望在未来坚持。\n\n计算机学习上，我感觉确实学到了很多，但也看见了计算机体系之庞大。这学期在联创学习新人任务，在学长那里学到了很多关于前端的。（新人任务真是个好东西，人确实需要ddl和拷打）然后又看了无人机的内容，也大致知道怎么弄了。（我竟然在英语考试前一天看英语论文来复习英语，真的佩服自己的创意）然后自己也学了一些其他的东西，搞到了很多国外的优质网站，确实优质。（但网站在精不在多，还是不要再到处搜罗新的网站和工具为好，拿更多时间在学习上）\n\n生活上，我也学习到了很多东西，有了巨多的思考，第二段就是其中一部分。除此之外，我知道了大学（也是未来）是随机性巨多的东西（比如我的高代（大哭）），所以我们更要抛弃线性思维，提高自己的总体竞争力，也要找到自己的信仰，不被外界所操控。其他的暂时忘了。还有输入和输出的思想。\n\n看起来都是输入呢。但其实也有输出。比如这篇文章（doge），还有自己做到小网站，还有接下来的回母校的演讲（希望不要太紧张呢）。\n\n对于未来，我希望以后能多加入一些人际交往的东西。（毕竟这方面真的很差呢）然后就是多探索探索每个领域，找到自己的方向。加油！坚持下去！\n\n没时间写了，爬虫的书还一点都没翻过呢。\n","slug":"总结/新，兴奋与焦虑——大一上期总结","published":1,"updated":"2024-03-26T11:18:01.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3w1001hp4wv3doifply","content":"<p>来到大学的第一个学期，感觉挺好的。有一种自己掌握生活的感觉，虽然有的时候也因此而焦虑。但毕竟能干自己爱干的事情了。</p>\r\n<span id=\"more\"></span>\r\n<p>这学期的感觉总结下来就是兴奋和焦虑。兴奋是因为接触到了很多很多新鲜事情，有生活上的，专业学习上的，学生组织上的……这份新鲜感也让我乐于尝试很多事情。但就像拉封丹说的“耐心与持久胜于激烈的狂热”，我希望我能不仅仅乐于“尝试”很多事情，还需要坚持下来，去乐于深入学习这些事情。焦虑一方面则是因为大学的一些事让我浪费了很多时间在做无意义的事情上。但这也是无可厚非的，毕竟一个复杂庞大的社会的运行需要这些东西，我们已经享受了很多自由了。（所以希望之后的自己放平心态）另一方面，则是关于个人成长和未来规划。主要包括对未来方向的迷茫，对努力方向和意义的迷茫以及对无法把握的事情的无力感，当然还有被卷的焦虑。这些焦虑肯定不能完全解决，但还是希望有时间能多读点文章和书。总的来说感觉这学期确实挺充实的，不仅是事情上，也是精神上。</p>\r\n<p>下面来看看我都干了什么。</p>\r\n<p>数学学习上，我感觉这学期还挺轻松的。可能是因为有竞赛基础，所以上课大致还能听懂。但也不是那种没有输入的轻松，一直在费劲去理解一些东西，思考一些不会做的题。挺有收获的。但是看得出来数学确实难，我的兴趣也不在那里，所以我出来了。（但有些人确实挺费力的，希望我的前同学们能有一个正常的四年吧）数学的学习也让我学会去“沉淀”，去沉浸下来啃一些难骨头，希望在未来坚持。</p>\r\n<p>计算机学习上，我感觉确实学到了很多，但也看见了计算机体系之庞大。这学期在联创学习新人任务，在学长那里学到了很多关于前端的。（新人任务真是个好东西，人确实需要ddl和拷打）然后又看了无人机的内容，也大致知道怎么弄了。（我竟然在英语考试前一天看英语论文来复习英语，真的佩服自己的创意）然后自己也学了一些其他的东西，搞到了很多国外的优质网站，确实优质。（但网站在精不在多，还是不要再到处搜罗新的网站和工具为好，拿更多时间在学习上）</p>\r\n<p>生活上，我也学习到了很多东西，有了巨多的思考，第二段就是其中一部分。除此之外，我知道了大学（也是未来）是随机性巨多的东西（比如我的高代（大哭）），所以我们更要抛弃线性思维，提高自己的总体竞争力，也要找到自己的信仰，不被外界所操控。其他的暂时忘了。还有输入和输出的思想。</p>\r\n<p>看起来都是输入呢。但其实也有输出。比如这篇文章（doge），还有自己做到小网站，还有接下来的回母校的演讲（希望不要太紧张呢）。</p>\r\n<p>对于未来，我希望以后能多加入一些人际交往的东西。（毕竟这方面真的很差呢）然后就是多探索探索每个领域，找到自己的方向。加油！坚持下去！</p>\r\n<p>没时间写了，爬虫的书还一点都没翻过呢。</p>\r\n","site":{"data":{}},"excerpt":"<p>来到大学的第一个学期，感觉挺好的。有一种自己掌握生活的感觉，虽然有的时候也因此而焦虑。但毕竟能干自己爱干的事情了。</p>","more":"<p>这学期的感觉总结下来就是兴奋和焦虑。兴奋是因为接触到了很多很多新鲜事情，有生活上的，专业学习上的，学生组织上的……这份新鲜感也让我乐于尝试很多事情。但就像拉封丹说的“耐心与持久胜于激烈的狂热”，我希望我能不仅仅乐于“尝试”很多事情，还需要坚持下来，去乐于深入学习这些事情。焦虑一方面则是因为大学的一些事让我浪费了很多时间在做无意义的事情上。但这也是无可厚非的，毕竟一个复杂庞大的社会的运行需要这些东西，我们已经享受了很多自由了。（所以希望之后的自己放平心态）另一方面，则是关于个人成长和未来规划。主要包括对未来方向的迷茫，对努力方向和意义的迷茫以及对无法把握的事情的无力感，当然还有被卷的焦虑。这些焦虑肯定不能完全解决，但还是希望有时间能多读点文章和书。总的来说感觉这学期确实挺充实的，不仅是事情上，也是精神上。</p>\r\n<p>下面来看看我都干了什么。</p>\r\n<p>数学学习上，我感觉这学期还挺轻松的。可能是因为有竞赛基础，所以上课大致还能听懂。但也不是那种没有输入的轻松，一直在费劲去理解一些东西，思考一些不会做的题。挺有收获的。但是看得出来数学确实难，我的兴趣也不在那里，所以我出来了。（但有些人确实挺费力的，希望我的前同学们能有一个正常的四年吧）数学的学习也让我学会去“沉淀”，去沉浸下来啃一些难骨头，希望在未来坚持。</p>\r\n<p>计算机学习上，我感觉确实学到了很多，但也看见了计算机体系之庞大。这学期在联创学习新人任务，在学长那里学到了很多关于前端的。（新人任务真是个好东西，人确实需要ddl和拷打）然后又看了无人机的内容，也大致知道怎么弄了。（我竟然在英语考试前一天看英语论文来复习英语，真的佩服自己的创意）然后自己也学了一些其他的东西，搞到了很多国外的优质网站，确实优质。（但网站在精不在多，还是不要再到处搜罗新的网站和工具为好，拿更多时间在学习上）</p>\r\n<p>生活上，我也学习到了很多东西，有了巨多的思考，第二段就是其中一部分。除此之外，我知道了大学（也是未来）是随机性巨多的东西（比如我的高代（大哭）），所以我们更要抛弃线性思维，提高自己的总体竞争力，也要找到自己的信仰，不被外界所操控。其他的暂时忘了。还有输入和输出的思想。</p>\r\n<p>看起来都是输入呢。但其实也有输出。比如这篇文章（doge），还有自己做到小网站，还有接下来的回母校的演讲（希望不要太紧张呢）。</p>\r\n<p>对于未来，我希望以后能多加入一些人际交往的东西。（毕竟这方面真的很差呢）然后就是多探索探索每个领域，找到自己的方向。加油！坚持下去！</p>\r\n<p>没时间写了，爬虫的书还一点都没翻过呢。</p>"},{"title":"自传","date":"2024-01-21T09:53:05.000Z","hidden":true,"_content":"\n 大一写的自传，给辅导员看的，但也有一些真心话。修改部分发上来就当这18年的游记吧。 \n\n<!-- more -->\n\n小学我成绩还行，通过学校的活动广泛涉猎各方面，但都是跟着老师做一些东西，而但是并没有含有很多自己的创造与想法。也许也是因为当时没有具体化想法的能力。从那时起我就开始对数学感兴趣，喜欢研究数学思维和逻辑思考，数学也成为了我的长处。\n\n到了初中，我开始学习编程。那时我也保持这一些爱好。也当过科代表，虽然没有干什么事，也没有组织过活动，这些希望在大学补上。没有荒废学业，成绩有时名列前茅也有时一落千丈，起伏比较大，但是没有放弃努力，不算轻松也不算痛苦得度过了两年初中。\n\n初三以很好的直升高中。越来越复杂的数学也逐渐让我力不从心，特别是复杂的运算和无法想出的思维突破点。但凭着扎实的基础，数学仍然保持着中等的状态。我高中没有坚持什么兴趣爱好，因为我开始学信息学竞赛，很多空余时间被占满。此外，几个月的停课集训也让我的成绩起起伏伏，但是因为我的努力，成绩总体还是在上升，高二下期甚至稳定在了前三。但后来高三开始冲刺就冲不动了，落了下去，一直想努力冲上去却起不来了，高考也考了个还一般的成绩，但已经无所谓了。这样看来我的心理承受能力确实不是很好。\n\n我家庭经济状况良好，从小到大过得都还好。但是因为性格内敛，有时会比较叛逆，但大多数时候还好。我在高三的时候办理了走读。因为某些原因，早上经常迟到。老师也常常批评我，但我不以为意，屡教不改。后来也没有管我了。我认为经过年龄的增长和责任感的提升，我应该不会再因为自己的情绪长期影响到别人的任务。除此之外，大学自由的环境与高中截然不同，这里也许能容纳我的很多个性和选择。\n\n我高中开始打信息学竞赛，获得了还好的成绩。本来打算再冲一把进省队的（我不是大佬），但是还是因为发挥问题noip考砸了。其实我也真的不是走这条路的人，我不是天才，思维能力上差太多了。在这些比赛中，我学到了如何应对高强度的压力和竞争。虽然并不总是赢得比赛，但这些经历帮助我培养了勇气和冷静思考的能力。不论胜利或失败，我都能从中汲取宝贵的经验和教训。其次它还让我学会了独立思考和自学的习惯，让我在高中学习中没有形成死读书的思维，喜欢多思考自己的学习方式和做题方式。因此形成了一种自己的思维方式，有时不习惯跟着老师走。希望这些会在大学学习中有一些优势。竞赛经历也让我更了解了计算机的东西，让我对计算机有了更多的热爱。希望在大学期间能学习到更多计算机的知识，做一些自己想做的东西。\n\n我在学习方面还是一直比较努力的，毕竟能来这里的都不会多摆烂。但是希望不要有太大的学业压力，希望能用自己的筛选和动力学习到真正有用的东西，而不是一味拘泥于应试。希望大学的数学能再次激发我的兴趣，让我找到数学的快乐所在。同时，我也会参加一些竞赛，提高实践能力和知识水平。也希望能因此提高加权分，以此获得保研资格。\n\n我现在一个很大的困扰就是不知道未来的人生方向。很多人说确定了人生方向就会有努力的动力，但是确实对未来，对职业，对生活还没有一个了解。而且感觉现在的梦想会很难到达，人生有太多无法选择的东西了，比如高考志愿填报。所以希望在本科四年能去了解各方面，去感受各方面，形成自己的人生观和人生方向。同时我也会去尽力爱上自己在做的东西，用努力去做上自己所爱的东西。\n\n进入大学后，我希望能够更深入地了解计算机的各个领域，并且选择了一个更喜欢的领域继续研究。我相信通过不断努力和学习，我可以学到一些有用的真知识和能力，为自己的就业以及社会的发展做出贡献。此外，我也计划参与实践社团和项目，与志同道合的同学们一起进行研究和探索。\n\n除此之外，我也会积极参加社会实践和实习。这不仅是为了贡献自己的力量，帮助他人，也是为了自我成长和提升。我相信，通过参与社会实践和志愿活动，我可以更好地了解社会和工作，同时也能够发展自己的领导能力和人际交往技巧。除此之外，我可以了解各种行业和工作流程，这将有助于我更好地理解学习和工作中的各种问题和挑战。同时，通过与不同背景和领域的人交流和合作，我也可以扩展自己的人脉和人际关系，为未来的发展打下良好的基础。提高自己的能力和素质，同时也为社会做出自己的贡献。\n\n我希望能通过自己的努力，结交更多的朋友，发掘更多的可能性，更多得了解这个世界，了解社会趋势和科学发展，从而更加深入地探索世界，更加坚定地走向未来。\n\n总之，我会保持着对数学的热爱和对计算机的渴望面对大学学习。我相信这将是一个充满挑战和机遇的旅程，我期待着在这个学术氛围浓厚的大学里，与优秀的教师和同学们一起成长。\n\ntest$$\\sum$$test\n","source":"_posts/总结/自传.md","raw":"---\ntitle: 自传\ndate: 2024-01-21 17:53:05\ntags:\n  - 总结\n  - 生活\nhidden: true\n---\n\n 大一写的自传，给辅导员看的，但也有一些真心话。修改部分发上来就当这18年的游记吧。 \n\n<!-- more -->\n\n小学我成绩还行，通过学校的活动广泛涉猎各方面，但都是跟着老师做一些东西，而但是并没有含有很多自己的创造与想法。也许也是因为当时没有具体化想法的能力。从那时起我就开始对数学感兴趣，喜欢研究数学思维和逻辑思考，数学也成为了我的长处。\n\n到了初中，我开始学习编程。那时我也保持这一些爱好。也当过科代表，虽然没有干什么事，也没有组织过活动，这些希望在大学补上。没有荒废学业，成绩有时名列前茅也有时一落千丈，起伏比较大，但是没有放弃努力，不算轻松也不算痛苦得度过了两年初中。\n\n初三以很好的直升高中。越来越复杂的数学也逐渐让我力不从心，特别是复杂的运算和无法想出的思维突破点。但凭着扎实的基础，数学仍然保持着中等的状态。我高中没有坚持什么兴趣爱好，因为我开始学信息学竞赛，很多空余时间被占满。此外，几个月的停课集训也让我的成绩起起伏伏，但是因为我的努力，成绩总体还是在上升，高二下期甚至稳定在了前三。但后来高三开始冲刺就冲不动了，落了下去，一直想努力冲上去却起不来了，高考也考了个还一般的成绩，但已经无所谓了。这样看来我的心理承受能力确实不是很好。\n\n我家庭经济状况良好，从小到大过得都还好。但是因为性格内敛，有时会比较叛逆，但大多数时候还好。我在高三的时候办理了走读。因为某些原因，早上经常迟到。老师也常常批评我，但我不以为意，屡教不改。后来也没有管我了。我认为经过年龄的增长和责任感的提升，我应该不会再因为自己的情绪长期影响到别人的任务。除此之外，大学自由的环境与高中截然不同，这里也许能容纳我的很多个性和选择。\n\n我高中开始打信息学竞赛，获得了还好的成绩。本来打算再冲一把进省队的（我不是大佬），但是还是因为发挥问题noip考砸了。其实我也真的不是走这条路的人，我不是天才，思维能力上差太多了。在这些比赛中，我学到了如何应对高强度的压力和竞争。虽然并不总是赢得比赛，但这些经历帮助我培养了勇气和冷静思考的能力。不论胜利或失败，我都能从中汲取宝贵的经验和教训。其次它还让我学会了独立思考和自学的习惯，让我在高中学习中没有形成死读书的思维，喜欢多思考自己的学习方式和做题方式。因此形成了一种自己的思维方式，有时不习惯跟着老师走。希望这些会在大学学习中有一些优势。竞赛经历也让我更了解了计算机的东西，让我对计算机有了更多的热爱。希望在大学期间能学习到更多计算机的知识，做一些自己想做的东西。\n\n我在学习方面还是一直比较努力的，毕竟能来这里的都不会多摆烂。但是希望不要有太大的学业压力，希望能用自己的筛选和动力学习到真正有用的东西，而不是一味拘泥于应试。希望大学的数学能再次激发我的兴趣，让我找到数学的快乐所在。同时，我也会参加一些竞赛，提高实践能力和知识水平。也希望能因此提高加权分，以此获得保研资格。\n\n我现在一个很大的困扰就是不知道未来的人生方向。很多人说确定了人生方向就会有努力的动力，但是确实对未来，对职业，对生活还没有一个了解。而且感觉现在的梦想会很难到达，人生有太多无法选择的东西了，比如高考志愿填报。所以希望在本科四年能去了解各方面，去感受各方面，形成自己的人生观和人生方向。同时我也会去尽力爱上自己在做的东西，用努力去做上自己所爱的东西。\n\n进入大学后，我希望能够更深入地了解计算机的各个领域，并且选择了一个更喜欢的领域继续研究。我相信通过不断努力和学习，我可以学到一些有用的真知识和能力，为自己的就业以及社会的发展做出贡献。此外，我也计划参与实践社团和项目，与志同道合的同学们一起进行研究和探索。\n\n除此之外，我也会积极参加社会实践和实习。这不仅是为了贡献自己的力量，帮助他人，也是为了自我成长和提升。我相信，通过参与社会实践和志愿活动，我可以更好地了解社会和工作，同时也能够发展自己的领导能力和人际交往技巧。除此之外，我可以了解各种行业和工作流程，这将有助于我更好地理解学习和工作中的各种问题和挑战。同时，通过与不同背景和领域的人交流和合作，我也可以扩展自己的人脉和人际关系，为未来的发展打下良好的基础。提高自己的能力和素质，同时也为社会做出自己的贡献。\n\n我希望能通过自己的努力，结交更多的朋友，发掘更多的可能性，更多得了解这个世界，了解社会趋势和科学发展，从而更加深入地探索世界，更加坚定地走向未来。\n\n总之，我会保持着对数学的热爱和对计算机的渴望面对大学学习。我相信这将是一个充满挑战和机遇的旅程，我期待着在这个学术氛围浓厚的大学里，与优秀的教师和同学们一起成长。\n\ntest$$\\sum$$test\n","slug":"总结/自传","published":1,"updated":"2024-12-15T11:04:44.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3w2001kp4wv8tam3jam","content":"<p>大一写的自传，给辅导员看的，但也有一些真心话。修改部分发上来就当这18年的游记吧。</p>\r\n<span id=\"more\"></span>\r\n<p>小学我成绩还行，通过学校的活动广泛涉猎各方面，但都是跟着老师做一些东西，而但是并没有含有很多自己的创造与想法。也许也是因为当时没有具体化想法的能力。从那时起我就开始对数学感兴趣，喜欢研究数学思维和逻辑思考，数学也成为了我的长处。</p>\r\n<p>到了初中，我开始学习编程。那时我也保持这一些爱好。也当过科代表，虽然没有干什么事，也没有组织过活动，这些希望在大学补上。没有荒废学业，成绩有时名列前茅也有时一落千丈，起伏比较大，但是没有放弃努力，不算轻松也不算痛苦得度过了两年初中。</p>\r\n<p>初三以很好的直升高中。越来越复杂的数学也逐渐让我力不从心，特别是复杂的运算和无法想出的思维突破点。但凭着扎实的基础，数学仍然保持着中等的状态。我高中没有坚持什么兴趣爱好，因为我开始学信息学竞赛，很多空余时间被占满。此外，几个月的停课集训也让我的成绩起起伏伏，但是因为我的努力，成绩总体还是在上升，高二下期甚至稳定在了前三。但后来高三开始冲刺就冲不动了，落了下去，一直想努力冲上去却起不来了，高考也考了个还一般的成绩，但已经无所谓了。这样看来我的心理承受能力确实不是很好。</p>\r\n<p>我家庭经济状况良好，从小到大过得都还好。但是因为性格内敛，有时会比较叛逆，但大多数时候还好。我在高三的时候办理了走读。因为某些原因，早上经常迟到。老师也常常批评我，但我不以为意，屡教不改。后来也没有管我了。我认为经过年龄的增长和责任感的提升，我应该不会再因为自己的情绪长期影响到别人的任务。除此之外，大学自由的环境与高中截然不同，这里也许能容纳我的很多个性和选择。</p>\r\n<p>我高中开始打信息学竞赛，获得了还好的成绩。本来打算再冲一把进省队的（我不是大佬），但是还是因为发挥问题noip考砸了。其实我也真的不是走这条路的人，我不是天才，思维能力上差太多了。在这些比赛中，我学到了如何应对高强度的压力和竞争。虽然并不总是赢得比赛，但这些经历帮助我培养了勇气和冷静思考的能力。不论胜利或失败，我都能从中汲取宝贵的经验和教训。其次它还让我学会了独立思考和自学的习惯，让我在高中学习中没有形成死读书的思维，喜欢多思考自己的学习方式和做题方式。因此形成了一种自己的思维方式，有时不习惯跟着老师走。希望这些会在大学学习中有一些优势。竞赛经历也让我更了解了计算机的东西，让我对计算机有了更多的热爱。希望在大学期间能学习到更多计算机的知识，做一些自己想做的东西。</p>\r\n<p>我在学习方面还是一直比较努力的，毕竟能来这里的都不会多摆烂。但是希望不要有太大的学业压力，希望能用自己的筛选和动力学习到真正有用的东西，而不是一味拘泥于应试。希望大学的数学能再次激发我的兴趣，让我找到数学的快乐所在。同时，我也会参加一些竞赛，提高实践能力和知识水平。也希望能因此提高加权分，以此获得保研资格。</p>\r\n<p>我现在一个很大的困扰就是不知道未来的人生方向。很多人说确定了人生方向就会有努力的动力，但是确实对未来，对职业，对生活还没有一个了解。而且感觉现在的梦想会很难到达，人生有太多无法选择的东西了，比如高考志愿填报。所以希望在本科四年能去了解各方面，去感受各方面，形成自己的人生观和人生方向。同时我也会去尽力爱上自己在做的东西，用努力去做上自己所爱的东西。</p>\r\n<p>进入大学后，我希望能够更深入地了解计算机的各个领域，并且选择了一个更喜欢的领域继续研究。我相信通过不断努力和学习，我可以学到一些有用的真知识和能力，为自己的就业以及社会的发展做出贡献。此外，我也计划参与实践社团和项目，与志同道合的同学们一起进行研究和探索。</p>\r\n<p>除此之外，我也会积极参加社会实践和实习。这不仅是为了贡献自己的力量，帮助他人，也是为了自我成长和提升。我相信，通过参与社会实践和志愿活动，我可以更好地了解社会和工作，同时也能够发展自己的领导能力和人际交往技巧。除此之外，我可以了解各种行业和工作流程，这将有助于我更好地理解学习和工作中的各种问题和挑战。同时，通过与不同背景和领域的人交流和合作，我也可以扩展自己的人脉和人际关系，为未来的发展打下良好的基础。提高自己的能力和素质，同时也为社会做出自己的贡献。</p>\r\n<p>我希望能通过自己的努力，结交更多的朋友，发掘更多的可能性，更多得了解这个世界，了解社会趋势和科学发展，从而更加深入地探索世界，更加坚定地走向未来。</p>\r\n<p>总之，我会保持着对数学的热爱和对计算机的渴望面对大学学习。我相信这将是一个充满挑战和机遇的旅程，我期待着在这个学术氛围浓厚的大学里，与优秀的教师和同学们一起成长。</p>\r\n<p>test<span class=\"math display\">\\[\\sum\\]</span>test</p>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"<p>大一写的自传，给辅导员看的，但也有一些真心话。修改部分发上来就当这18年的游记吧。</p>","more":"<p>小学我成绩还行，通过学校的活动广泛涉猎各方面，但都是跟着老师做一些东西，而但是并没有含有很多自己的创造与想法。也许也是因为当时没有具体化想法的能力。从那时起我就开始对数学感兴趣，喜欢研究数学思维和逻辑思考，数学也成为了我的长处。</p>\r\n<p>到了初中，我开始学习编程。那时我也保持这一些爱好。也当过科代表，虽然没有干什么事，也没有组织过活动，这些希望在大学补上。没有荒废学业，成绩有时名列前茅也有时一落千丈，起伏比较大，但是没有放弃努力，不算轻松也不算痛苦得度过了两年初中。</p>\r\n<p>初三以很好的直升高中。越来越复杂的数学也逐渐让我力不从心，特别是复杂的运算和无法想出的思维突破点。但凭着扎实的基础，数学仍然保持着中等的状态。我高中没有坚持什么兴趣爱好，因为我开始学信息学竞赛，很多空余时间被占满。此外，几个月的停课集训也让我的成绩起起伏伏，但是因为我的努力，成绩总体还是在上升，高二下期甚至稳定在了前三。但后来高三开始冲刺就冲不动了，落了下去，一直想努力冲上去却起不来了，高考也考了个还一般的成绩，但已经无所谓了。这样看来我的心理承受能力确实不是很好。</p>\r\n<p>我家庭经济状况良好，从小到大过得都还好。但是因为性格内敛，有时会比较叛逆，但大多数时候还好。我在高三的时候办理了走读。因为某些原因，早上经常迟到。老师也常常批评我，但我不以为意，屡教不改。后来也没有管我了。我认为经过年龄的增长和责任感的提升，我应该不会再因为自己的情绪长期影响到别人的任务。除此之外，大学自由的环境与高中截然不同，这里也许能容纳我的很多个性和选择。</p>\r\n<p>我高中开始打信息学竞赛，获得了还好的成绩。本来打算再冲一把进省队的（我不是大佬），但是还是因为发挥问题noip考砸了。其实我也真的不是走这条路的人，我不是天才，思维能力上差太多了。在这些比赛中，我学到了如何应对高强度的压力和竞争。虽然并不总是赢得比赛，但这些经历帮助我培养了勇气和冷静思考的能力。不论胜利或失败，我都能从中汲取宝贵的经验和教训。其次它还让我学会了独立思考和自学的习惯，让我在高中学习中没有形成死读书的思维，喜欢多思考自己的学习方式和做题方式。因此形成了一种自己的思维方式，有时不习惯跟着老师走。希望这些会在大学学习中有一些优势。竞赛经历也让我更了解了计算机的东西，让我对计算机有了更多的热爱。希望在大学期间能学习到更多计算机的知识，做一些自己想做的东西。</p>\r\n<p>我在学习方面还是一直比较努力的，毕竟能来这里的都不会多摆烂。但是希望不要有太大的学业压力，希望能用自己的筛选和动力学习到真正有用的东西，而不是一味拘泥于应试。希望大学的数学能再次激发我的兴趣，让我找到数学的快乐所在。同时，我也会参加一些竞赛，提高实践能力和知识水平。也希望能因此提高加权分，以此获得保研资格。</p>\r\n<p>我现在一个很大的困扰就是不知道未来的人生方向。很多人说确定了人生方向就会有努力的动力，但是确实对未来，对职业，对生活还没有一个了解。而且感觉现在的梦想会很难到达，人生有太多无法选择的东西了，比如高考志愿填报。所以希望在本科四年能去了解各方面，去感受各方面，形成自己的人生观和人生方向。同时我也会去尽力爱上自己在做的东西，用努力去做上自己所爱的东西。</p>\r\n<p>进入大学后，我希望能够更深入地了解计算机的各个领域，并且选择了一个更喜欢的领域继续研究。我相信通过不断努力和学习，我可以学到一些有用的真知识和能力，为自己的就业以及社会的发展做出贡献。此外，我也计划参与实践社团和项目，与志同道合的同学们一起进行研究和探索。</p>\r\n<p>除此之外，我也会积极参加社会实践和实习。这不仅是为了贡献自己的力量，帮助他人，也是为了自我成长和提升。我相信，通过参与社会实践和志愿活动，我可以更好地了解社会和工作，同时也能够发展自己的领导能力和人际交往技巧。除此之外，我可以了解各种行业和工作流程，这将有助于我更好地理解学习和工作中的各种问题和挑战。同时，通过与不同背景和领域的人交流和合作，我也可以扩展自己的人脉和人际关系，为未来的发展打下良好的基础。提高自己的能力和素质，同时也为社会做出自己的贡献。</p>\r\n<p>我希望能通过自己的努力，结交更多的朋友，发掘更多的可能性，更多得了解这个世界，了解社会趋势和科学发展，从而更加深入地探索世界，更加坚定地走向未来。</p>\r\n<p>总之，我会保持着对数学的热爱和对计算机的渴望面对大学学习。我相信这将是一个充满挑战和机遇的旅程，我期待着在这个学术氛围浓厚的大学里，与优秀的教师和同学们一起成长。</p>\r\n<p>test<span class=\"math display\">\\[\\sum\\]</span>test</p>"},{"title":"ROS快速学习","date":"2024-02-22T16:00:00.000Z","_content":"\nNode节点：完成一个功能的一个模块\n\nPackage包：多个相关节点组成。节点不能独立于包存在\n\n头文件 `#include <ros/ros.h>`\n\n初始化 `ros::init(argc, argv, \"px4_pos_controller\");`\n\nNodeHandle对象 `ros::NodeHandle nh(\"~\");` 相当于一个管家，与ros通讯的关键\n\n## 循环及控制循环频率\n\n`while(ros::ok()){}` 才能响应外部信息（ctrl+c）\n\nros::Rate loop_rate(10);//括号内为每秒执行的次数\n\n```cpp\nwhile(ros::ok()){\n\t...\n    loop_rate.sleep();\n}\n```\n\n## ros节点通讯方式 Topic+Message\n### 定义\n- 创建一个话题Topic，在这个话题中进行持续通讯\n\n- 发布消息的是话题的发布者Publisher，接收消息的是话题的订阅者Subscriber\n\n- 通常按照一定频率持续不断发出，以保证消息的实时性\n\n- 就跟聊天群一样，一个话题可以同时有多个发布者和订阅者\n  - 传感器消息的话题一般只有一个发布者\n  \n  - 指令话题可能有多个发布者\n\n### 消息类型\n\n可以嵌套，相当于class\n\n用std_msgs包获得一些标准消息类型\n\n### 创建发布者及发布消息\n\n`ros::Publisher pub = nh.advertise<std_msgs::String>(\"test\", 10);`\n\n泛型函数，<>中定义参数（消息）的类型，第一个参数是话题名称，第二个参数是消息缓存长度（缓存里可以容纳的消息个数），之后用pub来往这个话题发布消息\n\n```cpp\nwhile (ros::ok()) {\n    std_msgs::String msg;\n    msg.data = \"hello world\";\n    pub.publish(msg);\n}\n```\n\n### rostopic查看话题信息\n\n`rostopic list` 列出活跃话题名称\n\n`rostopic echo /话题名称` 列出话题下的消息\n\n### 创建接收者及接收消息\n\n`ros::Subscriber pub = nh.subscribe<std_msgs::String>(\"test\", 10, func);`\n\nfunc为回调函数，是接收到消息后需要做的事情\n\n`void func(std_msgs::Sting msg){}`\n\n在订阅之后保持在运行状态:\n\n```cpp\nwhile (ros::ok()) {\n\tros::spinOnce();// 查看是否有消息包需要接收\n}\n```\n\n通讯网络的图形化显示\n\nrqt_graph\n\n","source":"_posts/无人机/ROS快速学习.md","raw":"---\ntitle: ROS快速学习\ndate: 2024-02-23 00:00:00\ntags:\n  - 无人机\n  - 嵌入式\n---\n\nNode节点：完成一个功能的一个模块\n\nPackage包：多个相关节点组成。节点不能独立于包存在\n\n头文件 `#include <ros/ros.h>`\n\n初始化 `ros::init(argc, argv, \"px4_pos_controller\");`\n\nNodeHandle对象 `ros::NodeHandle nh(\"~\");` 相当于一个管家，与ros通讯的关键\n\n## 循环及控制循环频率\n\n`while(ros::ok()){}` 才能响应外部信息（ctrl+c）\n\nros::Rate loop_rate(10);//括号内为每秒执行的次数\n\n```cpp\nwhile(ros::ok()){\n\t...\n    loop_rate.sleep();\n}\n```\n\n## ros节点通讯方式 Topic+Message\n### 定义\n- 创建一个话题Topic，在这个话题中进行持续通讯\n\n- 发布消息的是话题的发布者Publisher，接收消息的是话题的订阅者Subscriber\n\n- 通常按照一定频率持续不断发出，以保证消息的实时性\n\n- 就跟聊天群一样，一个话题可以同时有多个发布者和订阅者\n  - 传感器消息的话题一般只有一个发布者\n  \n  - 指令话题可能有多个发布者\n\n### 消息类型\n\n可以嵌套，相当于class\n\n用std_msgs包获得一些标准消息类型\n\n### 创建发布者及发布消息\n\n`ros::Publisher pub = nh.advertise<std_msgs::String>(\"test\", 10);`\n\n泛型函数，<>中定义参数（消息）的类型，第一个参数是话题名称，第二个参数是消息缓存长度（缓存里可以容纳的消息个数），之后用pub来往这个话题发布消息\n\n```cpp\nwhile (ros::ok()) {\n    std_msgs::String msg;\n    msg.data = \"hello world\";\n    pub.publish(msg);\n}\n```\n\n### rostopic查看话题信息\n\n`rostopic list` 列出活跃话题名称\n\n`rostopic echo /话题名称` 列出话题下的消息\n\n### 创建接收者及接收消息\n\n`ros::Subscriber pub = nh.subscribe<std_msgs::String>(\"test\", 10, func);`\n\nfunc为回调函数，是接收到消息后需要做的事情\n\n`void func(std_msgs::Sting msg){}`\n\n在订阅之后保持在运行状态:\n\n```cpp\nwhile (ros::ok()) {\n\tros::spinOnce();// 查看是否有消息包需要接收\n}\n```\n\n通讯网络的图形化显示\n\nrqt_graph\n\n","slug":"无人机/ROS快速学习","published":1,"updated":"2024-03-02T12:49:30.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3w2001mp4wv41z9e6q6","content":"<p>Node节点：完成一个功能的一个模块</p>\r\n<p>Package包：多个相关节点组成。节点不能独立于包存在</p>\r\n<p>头文件 <code>#include &lt;ros/ros.h&gt;</code></p>\r\n<p>初始化 <code>ros::init(argc, argv, \"px4_pos_controller\");</code></p>\r\n<p>NodeHandle对象 <code>ros::NodeHandle nh(\"~\");</code>\r\n相当于一个管家，与ros通讯的关键</p>\r\n<h2 id=\"循环及控制循环频率\"><a href=\"#循环及控制循环频率\" class=\"headerlink\" title=\"循环及控制循环频率\"></a>循环及控制循环频率</h2>\r\n<p><code>while(ros::ok())&#123;&#125;</code> 才能响应外部信息（ctrl+c）</p>\r\n<p>ros::Rate loop_rate(10);//括号内为每秒执行的次数</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(ros::<span class=\"hljs-built_in\">ok</span>())&#123;<br>\t...<br>    loop_rate.<span class=\"hljs-built_in\">sleep</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"ros节点通讯方式-topicmessage\"><a href=\"#ros节点通讯方式-topicmessage\" class=\"headerlink\" title=\"ros节点通讯方式-topicmessage\"></a>ros节点通讯方式 Topic+Message</h2>\r\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\r\n<ul>\r\n<li><p>创建一个话题Topic，在这个话题中进行持续通讯</p></li>\r\n<li><p>发布消息的是话题的发布者Publisher，接收消息的是话题的订阅者Subscriber</p></li>\r\n<li><p>通常按照一定频率持续不断发出，以保证消息的实时性</p></li>\r\n<li><p>就跟聊天群一样，一个话题可以同时有多个发布者和订阅者</p>\r\n<ul>\r\n<li><p>传感器消息的话题一般只有一个发布者</p></li>\r\n<li><p>指令话题可能有多个发布者</p></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"消息类型\"><a href=\"#消息类型\" class=\"headerlink\" title=\"消息类型\"></a>消息类型</h3>\r\n<p>可以嵌套，相当于class</p>\r\n<p>用std_msgs包获得一些标准消息类型</p>\r\n<h3 id=\"创建发布者及发布消息\"><a href=\"#创建发布者及发布消息\" class=\"headerlink\" title=\"创建发布者及发布消息\"></a>创建发布者及发布消息</h3>\r\n<p><code>ros::Publisher pub = nh.advertise&lt;std_msgs::String&gt;(\"test\", 10);</code></p>\r\n<p>泛型函数，&lt;&gt;中定义参数（消息）的类型，第一个参数是话题名称，第二个参数是消息缓存长度（缓存里可以容纳的消息个数），之后用pub来往这个话题发布消息</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span> (ros::<span class=\"hljs-built_in\">ok</span>()) &#123;<br>    std_msgs::String msg;<br>    msg.data = <span class=\"hljs-string\">&quot;hello world&quot;</span>;<br>    pub.<span class=\"hljs-built_in\">publish</span>(msg);<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"rostopic查看话题信息\"><a href=\"#rostopic查看话题信息\" class=\"headerlink\" title=\"rostopic查看话题信息\"></a>rostopic查看话题信息</h3>\r\n<p><code>rostopic list</code> 列出活跃话题名称</p>\r\n<p><code>rostopic echo /话题名称</code> 列出话题下的消息</p>\r\n<h3 id=\"创建接收者及接收消息\"><a href=\"#创建接收者及接收消息\" class=\"headerlink\" title=\"创建接收者及接收消息\"></a>创建接收者及接收消息</h3>\r\n<p><code>ros::Subscriber pub = nh.subscribe&lt;std_msgs::String&gt;(\"test\", 10, func);</code></p>\r\n<p>func为回调函数，是接收到消息后需要做的事情</p>\r\n<p><code>void func(std_msgs::Sting msg)&#123;&#125;</code></p>\r\n<p>在订阅之后保持在运行状态:</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span> (ros::<span class=\"hljs-built_in\">ok</span>()) &#123;<br>\tros::<span class=\"hljs-built_in\">spinOnce</span>();<span class=\"hljs-comment\">// 查看是否有消息包需要接收</span><br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>通讯网络的图形化显示</p>\r\n<p>rqt_graph</p>\r\n","site":{"data":{}},"excerpt":"","more":"<p>Node节点：完成一个功能的一个模块</p>\r\n<p>Package包：多个相关节点组成。节点不能独立于包存在</p>\r\n<p>头文件 <code>#include &lt;ros/ros.h&gt;</code></p>\r\n<p>初始化 <code>ros::init(argc, argv, \"px4_pos_controller\");</code></p>\r\n<p>NodeHandle对象 <code>ros::NodeHandle nh(\"~\");</code>\r\n相当于一个管家，与ros通讯的关键</p>\r\n<h2 id=\"循环及控制循环频率\"><a href=\"#循环及控制循环频率\" class=\"headerlink\" title=\"循环及控制循环频率\"></a>循环及控制循环频率</h2>\r\n<p><code>while(ros::ok())&#123;&#125;</code> 才能响应外部信息（ctrl+c）</p>\r\n<p>ros::Rate loop_rate(10);//括号内为每秒执行的次数</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(ros::<span class=\"hljs-built_in\">ok</span>())&#123;<br>\t...<br>    loop_rate.<span class=\"hljs-built_in\">sleep</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"ros节点通讯方式-topicmessage\"><a href=\"#ros节点通讯方式-topicmessage\" class=\"headerlink\" title=\"ros节点通讯方式-topicmessage\"></a>ros节点通讯方式 Topic+Message</h2>\r\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\r\n<ul>\r\n<li><p>创建一个话题Topic，在这个话题中进行持续通讯</p></li>\r\n<li><p>发布消息的是话题的发布者Publisher，接收消息的是话题的订阅者Subscriber</p></li>\r\n<li><p>通常按照一定频率持续不断发出，以保证消息的实时性</p></li>\r\n<li><p>就跟聊天群一样，一个话题可以同时有多个发布者和订阅者</p>\r\n<ul>\r\n<li><p>传感器消息的话题一般只有一个发布者</p></li>\r\n<li><p>指令话题可能有多个发布者</p></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"消息类型\"><a href=\"#消息类型\" class=\"headerlink\" title=\"消息类型\"></a>消息类型</h3>\r\n<p>可以嵌套，相当于class</p>\r\n<p>用std_msgs包获得一些标准消息类型</p>\r\n<h3 id=\"创建发布者及发布消息\"><a href=\"#创建发布者及发布消息\" class=\"headerlink\" title=\"创建发布者及发布消息\"></a>创建发布者及发布消息</h3>\r\n<p><code>ros::Publisher pub = nh.advertise&lt;std_msgs::String&gt;(\"test\", 10);</code></p>\r\n<p>泛型函数，&lt;&gt;中定义参数（消息）的类型，第一个参数是话题名称，第二个参数是消息缓存长度（缓存里可以容纳的消息个数），之后用pub来往这个话题发布消息</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span> (ros::<span class=\"hljs-built_in\">ok</span>()) &#123;<br>    std_msgs::String msg;<br>    msg.data = <span class=\"hljs-string\">&quot;hello world&quot;</span>;<br>    pub.<span class=\"hljs-built_in\">publish</span>(msg);<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"rostopic查看话题信息\"><a href=\"#rostopic查看话题信息\" class=\"headerlink\" title=\"rostopic查看话题信息\"></a>rostopic查看话题信息</h3>\r\n<p><code>rostopic list</code> 列出活跃话题名称</p>\r\n<p><code>rostopic echo /话题名称</code> 列出话题下的消息</p>\r\n<h3 id=\"创建接收者及接收消息\"><a href=\"#创建接收者及接收消息\" class=\"headerlink\" title=\"创建接收者及接收消息\"></a>创建接收者及接收消息</h3>\r\n<p><code>ros::Subscriber pub = nh.subscribe&lt;std_msgs::String&gt;(\"test\", 10, func);</code></p>\r\n<p>func为回调函数，是接收到消息后需要做的事情</p>\r\n<p><code>void func(std_msgs::Sting msg)&#123;&#125;</code></p>\r\n<p>在订阅之后保持在运行状态:</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span> (ros::<span class=\"hljs-built_in\">ok</span>()) &#123;<br>\tros::<span class=\"hljs-built_in\">spinOnce</span>();<span class=\"hljs-comment\">// 查看是否有消息包需要接收</span><br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>通讯网络的图形化显示</p>\r\n<p>rqt_graph</p>\r\n"},{"title":"无人机笔记","date":"2024-02-22T16:00:00.000Z","_content":"## 函数\n## \n- `void rotation_yaw(float yaw_angle, float input[2], float output[2]);`\n\n  坐标系旋转函数- 机体系到enu系\n\n  input是机体系,output是惯性系，yaw_angle是当前偏航角\n- `void collision_avoidance(float target_x, float target_y)`\n\n\t避障的同时到(target_x, target_y)\n\n## 雷达\n\n- `Laser.ranges[i]` ：range_min到range_max的距离\n- distance_c，angle_c：最小距离和所对角\n\n## 位置\n\n- pos_drone.pose.position.x或y\n\n- Euler_fcu：欧拉角（Euler angles）是一种用于描述物体在三维空间中旋转的方法。它由三个角  度组成，通常表示为 α、β 和 γ，也被称为滚转（roll）、俯仰（pitch）和偏航（yaw）。\n\t- 滚转角（Roll）表示物体绕其自身坐标系的 X 轴旋转的角度。\n  - 俯仰角（Pitch）表示物体绕其自身坐标系的 Y 轴旋转的角度。\n\t- 偏航角（Yaw）表示物体绕其自身坐标系的 Z 轴旋转的角度。\n\n## 命令（出口）\n\ncommand_pub\n### 悬停\n\n```cpp\nfor (int i = 0; i < 5; i++)\n{\n    Command_now.command = Hold;\n    Command_now.sub_mode = 0x00;\n    command_pub.publish(Command_now);\n    rate.sleep();\n}\n```\n\n### 移动\n\n```cpp\nCommand_now.command = Move_ENU; // 机体系下移动\nCommand_now.comid = comid;\ncomid++;\nCommand_now.sub_mode = 2; // xy 速度控制模式 z 位置控制模式\nCommand_now.vel_sp[0] = vel_sp_ENU[0]; // collision_avoidance()里设置的\nCommand_now.vel_sp[1] = vel_sp_ENU[1]; // ENU frame\nCommand_now.pos_sp[2] = fly_height;\nCommand_now.yaw_sp = 0;\ncommand_pub.publish(Command_now);\n```\n\n## 视觉\n\n- 来使 `darknet_boxes` 存储各个图片的信息，用 `detect_num` 存储相机共检测到的图片数目  \n\n- `darknet_boxes.bounding_boxes[i]`的类型是 `darknet_ros_msgs` 中的 `BoundingBox` 消息类型中，通常包含以下字段：\n- `header`：消息头，包含了时间戳和坐标系信息。\n\t\n- `Class`：检测到的目标的类别或标签。\n\t\n- `xmin`：边界框的左上角 x 坐标。\n\t\n- `ymin`：边界框的左上角 y 坐标。\n\t\n- `xmax`：边界框的右下角 x 坐标。\n\t\n- `ymax`：边界框的右下角 y 坐标。\n\t\n- `probability`：目标的检测置信度或概率。\n\n```cpp\ndarknet_ros_msgs::BoundingBox fire_box = darknet_boxes.bounding_boxes[i];\nif (fire_box.Class != \"person\")\n    continue;\nfloat dx = Laser.ranges[0] * cos(Euler_fcu[2]);\nfloat dy = -dx * ((fire_box.xmin + fire_box.xmax) / 2 - cx) / fx;\nfloat fire_center_x = pos_drone.pose.position.x + dx;\nfloat fire_center_y = pos_drone.pose.position.y + dy;\n```\n\n​\t\n\n\n## 路径规划算法\n\n[参考](https://zhuanlan.zhihu.com/p/51372134)\n### 构型空间\n机器人的所有状态（构型）的集合\n比如 $\\{(无人机的x坐标,y坐标,所朝方向\\theta)\\}$\n\n### PRM\n1. 在图中随机采样一定数量（如50个）的无碰撞点。\n2. 对每一个点，取其领域（相邻区域）内（例如直线距离在200以内）的所有点进行连线，对连线进行碰撞检测（如果连线与碰撞点有相交就删除连线），将结果存放在[邻接矩阵](https://link.zhihu.com/?target=https%3A//blog.csdn.net/qq_30796379/article/details/80152406%23)中。\n### RRT\n在每次选择生长方向时，有一定的概率会向着目标点延伸，也有一定的概率会随机在地图内选择一个方向延伸一段距离\n假设我们采样了空间中随机一个点，接下来从现有的RRT树中选择离采样点最近的一个点，并向采样点延伸一段距离。假如在这段延伸中没有发生碰撞（碰撞检测），而且新点与现有的所有点的距离大于某个判断阈值（防止生长到RRT已经探索过的位置），则将这个新点也加入RRT树。\n假如本次延伸的新点与终点的距离小于这个阈值，我们就认为已经规划成功。\n\n这里利用统计学中回归分析生成新节点，将RRT算法探索未知空间的能力进一步增强以避免因启发估价因子导致的局部极小。其思想是探索以前到过的空间是无用的，而且容易陷入局部极小。引进回归分析(regression analysis)是考察新节点与其他节点之间关系，利用回归函数约束，使得随机树不探索以前到过的空间，因此避免了局部极小。\n\n### 滚动RRT\n滚动窗口状态空间进行K次采样后，遍历随机树，根据启发估价思想寻找滚动窗口子目标 $X_{sub}$。 $X_{sub}$ 是当前滚动窗口中的子树中估价函数最小的点。确定子目标后，机器人前进到子目标点，进行下一轮的滚动RRT规划。如此反复，直到到达目标点 G。\n\n### 人工势场\n但是复杂的势场环境可能在目标点之外产生局部极小点导致机器人无法到达目标。遇到局部极小点后结合其他的方法使机器人离开局部极小点。沿墙行走法使机器人在遇到局部极小点后参照类似BUG算法的环绕行为绕过产生局部极小点的障碍物继续前进。这种方法可靠性高，不依赖环境的先验信息和障碍物形状。\n\n为了使机器人从局部极小点中逃离，在人工势场法的基础上引入应激行为，即增加绕行行为。当机器人遇到局部极小点时，忽略目标引力势的作用，沿着斥力势的等势面方向移动，直到机器人离开局部极小区域。\n\n1. 根据传感器信息计算当前位置的引力和斥力；\n2. 判断是否处于绕行行为，若是，执行3；若否，执行4；\n3. 判断是否离开局部极小区域，若是，机器人沿着合力方向运动，结束绕行行为；若否，机器人沿着斥力场等势线运动，继续绕行行为；\n4. 判断是否遇到局部极小点，若是，机器人沿着斥力场等势线运动，开始绕行行为；若否，机器人沿着合力方向运动；\n5. 判断是否到达目标，若是，退出算法；若否，继续1；\n\n$\\left| f_{att}+\\sum_{j=1}^{n}{f_{rep,j}} \\right|<\\varepsilon$\n$\\left| x-x_A \\right|<\\alpha s_A$\n当条件1或者条件2出现时，就认为机器人遇到了局部极小点。条件1中 $\\varepsilon$ 是一个很小的正数，其含义是机器人受到的虚拟合力接近0。这是最直接局部极小点判断方法。条件2中 $\\alpha$ 为0,1之间某一正数， x_A 为机器人运动过程中某一状态， s_A 表示机器人从 x_A 到达当前位置 x 的总路程，条件2成立意味着机器人在运动很长路程后，位移很小。用来检测机器人在局部极小点附近发生的振动和圆周运动。\n\n### BUG算法\nBUG算法是一种完全应激的机器人避障算法。其算法原理类似昆虫爬行的运动决策策略。在未遇到障碍物时，沿直线向目标运动；在遇到障碍物后，沿着障碍物边界绕行，并利用一定的判断准则离开障碍物继续直行。这种应激式的算法计算简便，不需要获知全局地图和障碍物形状，具备完备性。但是其生成的路径平滑性不够好，对机器人的各种微分约束适应性比较差。\n\n\n<img src=\"https://pic2.zhimg.com/80/v2-e1b1151d534417b77c3d3b7cf639b6c5_1440w.webp\" alt=\"图片\" width=\"400\" height=\"300\">\n\n（沿着障碍物绕一圈）\n\n<img src=\"https://pic1.zhimg.com/v2-355b0b36503ab0670f69fc0efc41a95c_r.jpg\" alt=\"bug2\" width=\"400\" height=\"300\">\nbug2 直到碰到直线\n\n### TangentBUG算法\n- 雷达扫描 找到距离的间断点（角度）\n- 选择一个角度，用 从当前位置经过此角度上的交点到目标点的折线长度 判断走哪个角度\n- 探索距离不再减小时，就停止向目标运动行为，切换到环绕边界行为\n- 如下图所示，当机器人探索到障碍物上的 M 点后，探索距离就不再减小，即 � 点是机器人探索距离在障碍物边界上的局部极小点。机器人开始沿着障碍物边界进行环绕，图中虚线路径就是机器人环绕障碍物时所走的路径。当机器人探测到与目标距离相比 � 点更近的点时，重新开始接近目标的运动。\n\t- <img src=\"https://pic3.zhimg.com/80/v2-17e78d950a31cf318019178eea797d5a_1440w.webp\" alt=\"bug2\" width=\"400\" >\n\n## [卡尔曼滤波](https://blog.csdn.net/u010720661/article/details/63253509)\n- 高斯分布：卡尔曼滤波假设两个变量（位置和速度，在这个例子中）都是随机的，并且**服从高斯分布**。每个变量都有一个均值 μ，表示随机分布的中心（最可能的状态），以及方差 $\\sigma^2$，表示不确定性。\n- **[协方差矩阵](https://en.wikipedia.org/wiki/Covariance_matrix)**\n\t- ![[Pasted image 20240302153643.png]]\n\t- 矩阵中的每个元素 $\\Sigma_{i,j}$ 表示第 i 个和第 j 个状态变量之间的相关度\n- \n\t![[Pasted image 20240228133157.png|200]]\n- \n\t![[Pasted image 20240228134002.png|200]]\n- 控制变量和控制矩阵\n\t![[Pasted image 20240228134327.png|200]]\n- 外部干扰\n\t![[Pasted image 20240228134545.png|200]]\n- 传感器检测\n\t![[Pasted image 20240228162415.png|400]]\n\t![[Pasted image 20240228162527.png|300]]\n\t其中 $H_k$ 把预测数据转化为相对应的传感器数据\n\t![[Pasted image 20240228163108.png]]\n- [总结与应用](https://www.zhihu.com/column/c_1116805280528334848) 用于建图时定位\n\n## 杂记\n\n- NED系（North-East-Down）ENU：East-North-Up","source":"_posts/无人机/无人机笔记.md","raw":"---\ntitle: 无人机笔记\ndate: 2024-02-23 00:00:00\ntags:\n  - 无人机\n---\n## 函数\n## \n- `void rotation_yaw(float yaw_angle, float input[2], float output[2]);`\n\n  坐标系旋转函数- 机体系到enu系\n\n  input是机体系,output是惯性系，yaw_angle是当前偏航角\n- `void collision_avoidance(float target_x, float target_y)`\n\n\t避障的同时到(target_x, target_y)\n\n## 雷达\n\n- `Laser.ranges[i]` ：range_min到range_max的距离\n- distance_c，angle_c：最小距离和所对角\n\n## 位置\n\n- pos_drone.pose.position.x或y\n\n- Euler_fcu：欧拉角（Euler angles）是一种用于描述物体在三维空间中旋转的方法。它由三个角  度组成，通常表示为 α、β 和 γ，也被称为滚转（roll）、俯仰（pitch）和偏航（yaw）。\n\t- 滚转角（Roll）表示物体绕其自身坐标系的 X 轴旋转的角度。\n  - 俯仰角（Pitch）表示物体绕其自身坐标系的 Y 轴旋转的角度。\n\t- 偏航角（Yaw）表示物体绕其自身坐标系的 Z 轴旋转的角度。\n\n## 命令（出口）\n\ncommand_pub\n### 悬停\n\n```cpp\nfor (int i = 0; i < 5; i++)\n{\n    Command_now.command = Hold;\n    Command_now.sub_mode = 0x00;\n    command_pub.publish(Command_now);\n    rate.sleep();\n}\n```\n\n### 移动\n\n```cpp\nCommand_now.command = Move_ENU; // 机体系下移动\nCommand_now.comid = comid;\ncomid++;\nCommand_now.sub_mode = 2; // xy 速度控制模式 z 位置控制模式\nCommand_now.vel_sp[0] = vel_sp_ENU[0]; // collision_avoidance()里设置的\nCommand_now.vel_sp[1] = vel_sp_ENU[1]; // ENU frame\nCommand_now.pos_sp[2] = fly_height;\nCommand_now.yaw_sp = 0;\ncommand_pub.publish(Command_now);\n```\n\n## 视觉\n\n- 来使 `darknet_boxes` 存储各个图片的信息，用 `detect_num` 存储相机共检测到的图片数目  \n\n- `darknet_boxes.bounding_boxes[i]`的类型是 `darknet_ros_msgs` 中的 `BoundingBox` 消息类型中，通常包含以下字段：\n- `header`：消息头，包含了时间戳和坐标系信息。\n\t\n- `Class`：检测到的目标的类别或标签。\n\t\n- `xmin`：边界框的左上角 x 坐标。\n\t\n- `ymin`：边界框的左上角 y 坐标。\n\t\n- `xmax`：边界框的右下角 x 坐标。\n\t\n- `ymax`：边界框的右下角 y 坐标。\n\t\n- `probability`：目标的检测置信度或概率。\n\n```cpp\ndarknet_ros_msgs::BoundingBox fire_box = darknet_boxes.bounding_boxes[i];\nif (fire_box.Class != \"person\")\n    continue;\nfloat dx = Laser.ranges[0] * cos(Euler_fcu[2]);\nfloat dy = -dx * ((fire_box.xmin + fire_box.xmax) / 2 - cx) / fx;\nfloat fire_center_x = pos_drone.pose.position.x + dx;\nfloat fire_center_y = pos_drone.pose.position.y + dy;\n```\n\n​\t\n\n\n## 路径规划算法\n\n[参考](https://zhuanlan.zhihu.com/p/51372134)\n### 构型空间\n机器人的所有状态（构型）的集合\n比如 $\\{(无人机的x坐标,y坐标,所朝方向\\theta)\\}$\n\n### PRM\n1. 在图中随机采样一定数量（如50个）的无碰撞点。\n2. 对每一个点，取其领域（相邻区域）内（例如直线距离在200以内）的所有点进行连线，对连线进行碰撞检测（如果连线与碰撞点有相交就删除连线），将结果存放在[邻接矩阵](https://link.zhihu.com/?target=https%3A//blog.csdn.net/qq_30796379/article/details/80152406%23)中。\n### RRT\n在每次选择生长方向时，有一定的概率会向着目标点延伸，也有一定的概率会随机在地图内选择一个方向延伸一段距离\n假设我们采样了空间中随机一个点，接下来从现有的RRT树中选择离采样点最近的一个点，并向采样点延伸一段距离。假如在这段延伸中没有发生碰撞（碰撞检测），而且新点与现有的所有点的距离大于某个判断阈值（防止生长到RRT已经探索过的位置），则将这个新点也加入RRT树。\n假如本次延伸的新点与终点的距离小于这个阈值，我们就认为已经规划成功。\n\n这里利用统计学中回归分析生成新节点，将RRT算法探索未知空间的能力进一步增强以避免因启发估价因子导致的局部极小。其思想是探索以前到过的空间是无用的，而且容易陷入局部极小。引进回归分析(regression analysis)是考察新节点与其他节点之间关系，利用回归函数约束，使得随机树不探索以前到过的空间，因此避免了局部极小。\n\n### 滚动RRT\n滚动窗口状态空间进行K次采样后，遍历随机树，根据启发估价思想寻找滚动窗口子目标 $X_{sub}$。 $X_{sub}$ 是当前滚动窗口中的子树中估价函数最小的点。确定子目标后，机器人前进到子目标点，进行下一轮的滚动RRT规划。如此反复，直到到达目标点 G。\n\n### 人工势场\n但是复杂的势场环境可能在目标点之外产生局部极小点导致机器人无法到达目标。遇到局部极小点后结合其他的方法使机器人离开局部极小点。沿墙行走法使机器人在遇到局部极小点后参照类似BUG算法的环绕行为绕过产生局部极小点的障碍物继续前进。这种方法可靠性高，不依赖环境的先验信息和障碍物形状。\n\n为了使机器人从局部极小点中逃离，在人工势场法的基础上引入应激行为，即增加绕行行为。当机器人遇到局部极小点时，忽略目标引力势的作用，沿着斥力势的等势面方向移动，直到机器人离开局部极小区域。\n\n1. 根据传感器信息计算当前位置的引力和斥力；\n2. 判断是否处于绕行行为，若是，执行3；若否，执行4；\n3. 判断是否离开局部极小区域，若是，机器人沿着合力方向运动，结束绕行行为；若否，机器人沿着斥力场等势线运动，继续绕行行为；\n4. 判断是否遇到局部极小点，若是，机器人沿着斥力场等势线运动，开始绕行行为；若否，机器人沿着合力方向运动；\n5. 判断是否到达目标，若是，退出算法；若否，继续1；\n\n$\\left| f_{att}+\\sum_{j=1}^{n}{f_{rep,j}} \\right|<\\varepsilon$\n$\\left| x-x_A \\right|<\\alpha s_A$\n当条件1或者条件2出现时，就认为机器人遇到了局部极小点。条件1中 $\\varepsilon$ 是一个很小的正数，其含义是机器人受到的虚拟合力接近0。这是最直接局部极小点判断方法。条件2中 $\\alpha$ 为0,1之间某一正数， x_A 为机器人运动过程中某一状态， s_A 表示机器人从 x_A 到达当前位置 x 的总路程，条件2成立意味着机器人在运动很长路程后，位移很小。用来检测机器人在局部极小点附近发生的振动和圆周运动。\n\n### BUG算法\nBUG算法是一种完全应激的机器人避障算法。其算法原理类似昆虫爬行的运动决策策略。在未遇到障碍物时，沿直线向目标运动；在遇到障碍物后，沿着障碍物边界绕行，并利用一定的判断准则离开障碍物继续直行。这种应激式的算法计算简便，不需要获知全局地图和障碍物形状，具备完备性。但是其生成的路径平滑性不够好，对机器人的各种微分约束适应性比较差。\n\n\n<img src=\"https://pic2.zhimg.com/80/v2-e1b1151d534417b77c3d3b7cf639b6c5_1440w.webp\" alt=\"图片\" width=\"400\" height=\"300\">\n\n（沿着障碍物绕一圈）\n\n<img src=\"https://pic1.zhimg.com/v2-355b0b36503ab0670f69fc0efc41a95c_r.jpg\" alt=\"bug2\" width=\"400\" height=\"300\">\nbug2 直到碰到直线\n\n### TangentBUG算法\n- 雷达扫描 找到距离的间断点（角度）\n- 选择一个角度，用 从当前位置经过此角度上的交点到目标点的折线长度 判断走哪个角度\n- 探索距离不再减小时，就停止向目标运动行为，切换到环绕边界行为\n- 如下图所示，当机器人探索到障碍物上的 M 点后，探索距离就不再减小，即 � 点是机器人探索距离在障碍物边界上的局部极小点。机器人开始沿着障碍物边界进行环绕，图中虚线路径就是机器人环绕障碍物时所走的路径。当机器人探测到与目标距离相比 � 点更近的点时，重新开始接近目标的运动。\n\t- <img src=\"https://pic3.zhimg.com/80/v2-17e78d950a31cf318019178eea797d5a_1440w.webp\" alt=\"bug2\" width=\"400\" >\n\n## [卡尔曼滤波](https://blog.csdn.net/u010720661/article/details/63253509)\n- 高斯分布：卡尔曼滤波假设两个变量（位置和速度，在这个例子中）都是随机的，并且**服从高斯分布**。每个变量都有一个均值 μ，表示随机分布的中心（最可能的状态），以及方差 $\\sigma^2$，表示不确定性。\n- **[协方差矩阵](https://en.wikipedia.org/wiki/Covariance_matrix)**\n\t- ![[Pasted image 20240302153643.png]]\n\t- 矩阵中的每个元素 $\\Sigma_{i,j}$ 表示第 i 个和第 j 个状态变量之间的相关度\n- \n\t![[Pasted image 20240228133157.png|200]]\n- \n\t![[Pasted image 20240228134002.png|200]]\n- 控制变量和控制矩阵\n\t![[Pasted image 20240228134327.png|200]]\n- 外部干扰\n\t![[Pasted image 20240228134545.png|200]]\n- 传感器检测\n\t![[Pasted image 20240228162415.png|400]]\n\t![[Pasted image 20240228162527.png|300]]\n\t其中 $H_k$ 把预测数据转化为相对应的传感器数据\n\t![[Pasted image 20240228163108.png]]\n- [总结与应用](https://www.zhihu.com/column/c_1116805280528334848) 用于建图时定位\n\n## 杂记\n\n- NED系（North-East-Down）ENU：East-North-Up","slug":"无人机/无人机笔记","published":1,"updated":"2024-03-02T15:07:56.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3w3001op4wvf2ie29bi","content":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2>\r\n<h2 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a></h2>\r\n<ul>\r\n<li><p><code>void rotation_yaw(float yaw_angle, float input[2], float output[2]);</code></p>\r\n<p>坐标系旋转函数- 机体系到enu系</p>\r\n<p>input是机体系,output是惯性系，yaw_angle是当前偏航角</p></li>\r\n<li><p><code>void collision_avoidance(float target_x, float target_y)</code></p>\r\n<p>避障的同时到(target_x, target_y)</p></li>\r\n</ul>\r\n<h2 id=\"雷达\"><a href=\"#雷达\" class=\"headerlink\" title=\"雷达\"></a>雷达</h2>\r\n<ul>\r\n<li><code>Laser.ranges[i]</code> ：range_min到range_max的距离</li>\r\n<li>distance_c，angle_c：最小距离和所对角</li>\r\n</ul>\r\n<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2>\r\n<ul>\r\n<li><p>pos_drone.pose.position.x或y</p></li>\r\n<li><p>Euler_fcu：欧拉角（Euler\r\nangles）是一种用于描述物体在三维空间中旋转的方法。它由三个角\r\n度组成，通常表示为 α、β 和\r\nγ，也被称为滚转（roll）、俯仰（pitch）和偏航（yaw）。</p>\r\n<ul>\r\n<li>滚转角（Roll）表示物体绕其自身坐标系的 X 轴旋转的角度。</li>\r\n<li>俯仰角（Pitch）表示物体绕其自身坐标系的 Y 轴旋转的角度。\r\n<ul>\r\n<li>偏航角（Yaw）表示物体绕其自身坐标系的 Z 轴旋转的角度。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"命令出口\"><a href=\"#命令出口\" class=\"headerlink\" title=\"命令出口\"></a>命令（出口）</h2>\r\n<p>command_pub ### 悬停</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<br>&#123;<br>    Command_now.command = Hold;<br>    Command_now.sub_mode = <span class=\"hljs-number\">0x00</span>;<br>    command_pub.<span class=\"hljs-built_in\">publish</span>(Command_now);<br>    rate.<span class=\"hljs-built_in\">sleep</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">Command_now.command = Move_ENU; <span class=\"hljs-comment\">// 机体系下移动</span><br>Command_now.comid = comid;<br>comid++;<br>Command_now.sub_mode = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// xy 速度控制模式 z 位置控制模式</span><br>Command_now.vel_sp[<span class=\"hljs-number\">0</span>] = vel_sp_ENU[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// collision_avoidance()里设置的</span><br>Command_now.vel_sp[<span class=\"hljs-number\">1</span>] = vel_sp_ENU[<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// ENU frame</span><br>Command_now.pos_sp[<span class=\"hljs-number\">2</span>] = fly_height;<br>Command_now.yaw_sp = <span class=\"hljs-number\">0</span>;<br>command_pub.<span class=\"hljs-built_in\">publish</span>(Command_now);<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"视觉\"><a href=\"#视觉\" class=\"headerlink\" title=\"视觉\"></a>视觉</h2>\r\n<ul>\r\n<li><p>来使 <code>darknet_boxes</code> 存储各个图片的信息，用\r\n<code>detect_num</code> 存储相机共检测到的图片数目</p></li>\r\n<li><p><code>darknet_boxes.bounding_boxes[i]</code>的类型是\r\n<code>darknet_ros_msgs</code> 中的 <code>BoundingBox</code>\r\n消息类型中，通常包含以下字段：</p></li>\r\n<li><p><code>header</code>：消息头，包含了时间戳和坐标系信息。</p></li>\r\n<li><p><code>Class</code>：检测到的目标的类别或标签。</p></li>\r\n<li><p><code>xmin</code>：边界框的左上角 x 坐标。</p></li>\r\n<li><p><code>ymin</code>：边界框的左上角 y 坐标。</p></li>\r\n<li><p><code>xmax</code>：边界框的右下角 x 坐标。</p></li>\r\n<li><p><code>ymax</code>：边界框的右下角 y 坐标。</p></li>\r\n<li><p><code>probability</code>：目标的检测置信度或概率。</p></li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">darknet_ros_msgs::BoundingBox fire_box = darknet_boxes.bounding_boxes[i];<br><span class=\"hljs-keyword\">if</span> (fire_box.Class != <span class=\"hljs-string\">&quot;person&quot;</span>)<br>    <span class=\"hljs-keyword\">continue</span>;<br><span class=\"hljs-type\">float</span> dx = Laser.ranges[<span class=\"hljs-number\">0</span>] * <span class=\"hljs-built_in\">cos</span>(Euler_fcu[<span class=\"hljs-number\">2</span>]);<br><span class=\"hljs-type\">float</span> dy = -dx * ((fire_box.xmin + fire_box.xmax) / <span class=\"hljs-number\">2</span> - cx) / fx;<br><span class=\"hljs-type\">float</span> fire_center_x = pos_drone.pose.position.x + dx;<br><span class=\"hljs-type\">float</span> fire_center_y = pos_drone.pose.position.y + dy;<br></code></pre></td></tr></table></figure>\r\n<p>​</p>\r\n<h2 id=\"路径规划算法\"><a href=\"#路径规划算法\" class=\"headerlink\" title=\"路径规划算法\"></a>路径规划算法</h2>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/51372134\">参考</a> ### 构型空间\r\n机器人的所有状态（构型）的集合 比如 <span\r\nclass=\"math inline\">\\(\\{(无人机的x坐标,y坐标,所朝方向\\theta)\\}\\)</span></p>\r\n<h3 id=\"prm\"><a href=\"#prm\" class=\"headerlink\" title=\"prm\"></a>PRM</h3>\r\n<ol type=\"1\">\r\n<li>在图中随机采样一定数量（如50个）的无碰撞点。</li>\r\n<li>对每一个点，取其领域（相邻区域）内（例如直线距离在200以内）的所有点进行连线，对连线进行碰撞检测（如果连线与碰撞点有相交就删除连线），将结果存放在<a\r\nhref=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/qq_30796379/article/details/80152406%23\">邻接矩阵</a>中。\r\n### RRT\r\n在每次选择生长方向时，有一定的概率会向着目标点延伸，也有一定的概率会随机在地图内选择一个方向延伸一段距离\r\n假设我们采样了空间中随机一个点，接下来从现有的RRT树中选择离采样点最近的一个点，并向采样点延伸一段距离。假如在这段延伸中没有发生碰撞（碰撞检测），而且新点与现有的所有点的距离大于某个判断阈值（防止生长到RRT已经探索过的位置），则将这个新点也加入RRT树。\r\n假如本次延伸的新点与终点的距离小于这个阈值，我们就认为已经规划成功。</li>\r\n</ol>\r\n<p>这里利用统计学中回归分析生成新节点，将RRT算法探索未知空间的能力进一步增强以避免因启发估价因子导致的局部极小。其思想是探索以前到过的空间是无用的，而且容易陷入局部极小。引进回归分析(regression\r\nanalysis)是考察新节点与其他节点之间关系，利用回归函数约束，使得随机树不探索以前到过的空间，因此避免了局部极小。</p>\r\n<h3 id=\"滚动rrt\"><a href=\"#滚动rrt\" class=\"headerlink\" title=\"滚动rrt\"></a>滚动RRT</h3>\r\n<p>滚动窗口状态空间进行K次采样后，遍历随机树，根据启发估价思想寻找滚动窗口子目标 <span\r\nclass=\"math inline\">\\(X_{sub}\\)</span>。 <span\r\nclass=\"math inline\">\\(X_{sub}\\)</span> 是当前滚动窗口中的子树中估价函数最小的点。确定子目标后，机器人前进到子目标点，进行下一轮的滚动RRT规划。如此反复，直到到达目标点\r\nG。</p>\r\n<h3 id=\"人工势场\"><a href=\"#人工势场\" class=\"headerlink\" title=\"人工势场\"></a>人工势场</h3>\r\n<p>但是复杂的势场环境可能在目标点之外产生局部极小点导致机器人无法到达目标。遇到局部极小点后结合其他的方法使机器人离开局部极小点。沿墙行走法使机器人在遇到局部极小点后参照类似BUG算法的环绕行为绕过产生局部极小点的障碍物继续前进。这种方法可靠性高，不依赖环境的先验信息和障碍物形状。</p>\r\n<p>为了使机器人从局部极小点中逃离，在人工势场法的基础上引入应激行为，即增加绕行行为。当机器人遇到局部极小点时，忽略目标引力势的作用，沿着斥力势的等势面方向移动，直到机器人离开局部极小区域。</p>\r\n<ol type=\"1\">\r\n<li>根据传感器信息计算当前位置的引力和斥力；</li>\r\n<li>判断是否处于绕行行为，若是，执行3；若否，执行4；</li>\r\n<li>判断是否离开局部极小区域，若是，机器人沿着合力方向运动，结束绕行行为；若否，机器人沿着斥力场等势线运动，继续绕行行为；</li>\r\n<li>判断是否遇到局部极小点，若是，机器人沿着斥力场等势线运动，开始绕行行为；若否，机器人沿着合力方向运动；</li>\r\n<li>判断是否到达目标，若是，退出算法；若否，继续1；</li>\r\n</ol>\r\n<p><span class=\"math inline\">\\(\\left| f_{att}+\\sum_{j=1}^{n}{f_{rep,j}}\r\n\\right|&lt;\\varepsilon\\)</span> <span class=\"math inline\">\\(\\left| x-x_A\r\n\\right|&lt;\\alpha s_A\\)</span>\r\n当条件1或者条件2出现时，就认为机器人遇到了局部极小点。条件1中 <span\r\nclass=\"math inline\">\\(\\varepsilon\\)</span>\r\n是一个很小的正数，其含义是机器人受到的虚拟合力接近0。这是最直接局部极小点判断方法。条件2中 <span\r\nclass=\"math inline\">\\(\\alpha\\)</span>\r\n为0,1之间某一正数， x_A 为机器人运动过程中某一状态， s_A 表示机器人从 x_A 到达当前位置 x 的总路程，条件2成立意味着机器人在运动很长路程后，位移很小。用来检测机器人在局部极小点附近发生的振动和圆周运动。</p>\r\n<h3 id=\"bug算法\"><a href=\"#bug算法\" class=\"headerlink\" title=\"bug算法\"></a>BUG算法</h3>\r\n<p>BUG算法是一种完全应激的机器人避障算法。其算法原理类似昆虫爬行的运动决策策略。在未遇到障碍物时，沿直线向目标运动；在遇到障碍物后，沿着障碍物边界绕行，并利用一定的判断准则离开障碍物继续直行。这种应激式的算法计算简便，不需要获知全局地图和障碍物形状，具备完备性。但是其生成的路径平滑性不够好，对机器人的各种微分约束适应性比较差。</p>\r\n<p class='item-img' data-src='https://pic2.zhimg.com/80/v2-e1b1151d534417b77c3d3b7cf639b6c5_1440w.webp'><img src=\"https://pic2.zhimg.com/80/v2-e1b1151d534417b77c3d3b7cf639b6c5_1440w.webp\" alt=\"图片\" width=\"400\" height=\"300\"></p>\r\n<p>（沿着障碍物绕一圈）</p>\r\n<p class='item-img' data-src='https://pic1.zhimg.com/v2-355b0b36503ab0670f69fc0efc41a95c_r.jpg'><img src=\"https://pic1.zhimg.com/v2-355b0b36503ab0670f69fc0efc41a95c_r.jpg\" alt=\"bug2\" width=\"400\" height=\"300\">\r\nbug2 直到碰到直线</p>\r\n<h3 id=\"tangentbug算法\"><a href=\"#tangentbug算法\" class=\"headerlink\" title=\"tangentbug算法\"></a>TangentBUG算法</h3>\r\n<ul>\r\n<li>雷达扫描 找到距离的间断点（角度）</li>\r\n<li>选择一个角度，用 从当前位置经过此角度上的交点到目标点的折线长度\r\n判断走哪个角度</li>\r\n<li>探索距离不再减小时，就停止向目标运动行为，切换到环绕边界行为</li>\r\n<li>如下图所示，当机器人探索到障碍物上的 M 点后，探索距离就不再减小，即 � 点是机器人探索距离在障碍物边界上的局部极小点。机器人开始沿着障碍物边界进行环绕，图中虚线路径就是机器人环绕障碍物时所走的路径。当机器人探测到与目标距离相比 � 点更近的点时，重新开始接近目标的运动。\r\n<ul>\r\n<li class='item-img' data-src='https://pic3.zhimg.com/80/v2-17e78d950a31cf318019178eea797d5a_1440w.webp'><img src=\"https://pic3.zhimg.com/80/v2-17e78d950a31cf318019178eea797d5a_1440w.webp\" alt=\"bug2\" width=\"400\" ></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"卡尔曼滤波\"><a\r\nhref=\"https://blog.csdn.net/u010720661/article/details/63253509\">卡尔曼滤波</a></h2>\r\n<ul>\r\n<li>高斯分布：卡尔曼滤波假设两个变量（位置和速度，在这个例子中）都是随机的，并且<strong>服从高斯分布</strong>。每个变量都有一个均值 μ，表示随机分布的中心（最可能的状态），以及方差\r\n<span class=\"math inline\">\\(\\sigma^2\\)</span>，表示不确定性。</li>\r\n<li><strong><a\r\nhref=\"https://en.wikipedia.org/wiki/Covariance_matrix\">协方差矩阵</a></strong>\r\n<ul>\r\n<li>![[Pasted image 20240302153643.png]]</li>\r\n<li>矩阵中的每个元素 <span\r\nclass=\"math inline\">\\(\\Sigma_{i,j}\\)</span> 表示第 i 个和第 j\r\n个状态变量之间的相关度</li>\r\n</ul></li>\r\n<li>![[Pasted image 20240228133157.png|200]]</li>\r\n<li>![[Pasted image 20240228134002.png|200]]</li>\r\n<li>控制变量和控制矩阵 ![[Pasted image 20240228134327.png|200]]</li>\r\n<li>外部干扰 ![[Pasted image 20240228134545.png|200]]</li>\r\n<li>传感器检测 ![[Pasted image 20240228162415.png|400]] ![[Pasted image\r\n20240228162527.png|300]] 其中 <span class=\"math inline\">\\(H_k\\)</span>\r\n把预测数据转化为相对应的传感器数据 ![[Pasted image\r\n20240228163108.png]]</li>\r\n<li><a\r\nhref=\"https://www.zhihu.com/column/c_1116805280528334848\">总结与应用</a>\r\n用于建图时定位</li>\r\n</ul>\r\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2>\r\n<ul>\r\n<li>NED系（North-East-Down）ENU：East-North-Up</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2>\r\n<h2 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a></h2>\r\n<ul>\r\n<li><p><code>void rotation_yaw(float yaw_angle, float input[2], float output[2]);</code></p>\r\n<p>坐标系旋转函数- 机体系到enu系</p>\r\n<p>input是机体系,output是惯性系，yaw_angle是当前偏航角</p></li>\r\n<li><p><code>void collision_avoidance(float target_x, float target_y)</code></p>\r\n<p>避障的同时到(target_x, target_y)</p></li>\r\n</ul>\r\n<h2 id=\"雷达\"><a href=\"#雷达\" class=\"headerlink\" title=\"雷达\"></a>雷达</h2>\r\n<ul>\r\n<li><code>Laser.ranges[i]</code> ：range_min到range_max的距离</li>\r\n<li>distance_c，angle_c：最小距离和所对角</li>\r\n</ul>\r\n<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2>\r\n<ul>\r\n<li><p>pos_drone.pose.position.x或y</p></li>\r\n<li><p>Euler_fcu：欧拉角（Euler\r\nangles）是一种用于描述物体在三维空间中旋转的方法。它由三个角\r\n度组成，通常表示为 α、β 和\r\nγ，也被称为滚转（roll）、俯仰（pitch）和偏航（yaw）。</p>\r\n<ul>\r\n<li>滚转角（Roll）表示物体绕其自身坐标系的 X 轴旋转的角度。</li>\r\n<li>俯仰角（Pitch）表示物体绕其自身坐标系的 Y 轴旋转的角度。\r\n<ul>\r\n<li>偏航角（Yaw）表示物体绕其自身坐标系的 Z 轴旋转的角度。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"命令出口\"><a href=\"#命令出口\" class=\"headerlink\" title=\"命令出口\"></a>命令（出口）</h2>\r\n<p>command_pub ### 悬停</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<br>&#123;<br>    Command_now.command = Hold;<br>    Command_now.sub_mode = <span class=\"hljs-number\">0x00</span>;<br>    command_pub.<span class=\"hljs-built_in\">publish</span>(Command_now);<br>    rate.<span class=\"hljs-built_in\">sleep</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">Command_now.command = Move_ENU; <span class=\"hljs-comment\">// 机体系下移动</span><br>Command_now.comid = comid;<br>comid++;<br>Command_now.sub_mode = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// xy 速度控制模式 z 位置控制模式</span><br>Command_now.vel_sp[<span class=\"hljs-number\">0</span>] = vel_sp_ENU[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// collision_avoidance()里设置的</span><br>Command_now.vel_sp[<span class=\"hljs-number\">1</span>] = vel_sp_ENU[<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// ENU frame</span><br>Command_now.pos_sp[<span class=\"hljs-number\">2</span>] = fly_height;<br>Command_now.yaw_sp = <span class=\"hljs-number\">0</span>;<br>command_pub.<span class=\"hljs-built_in\">publish</span>(Command_now);<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"视觉\"><a href=\"#视觉\" class=\"headerlink\" title=\"视觉\"></a>视觉</h2>\r\n<ul>\r\n<li><p>来使 <code>darknet_boxes</code> 存储各个图片的信息，用\r\n<code>detect_num</code> 存储相机共检测到的图片数目</p></li>\r\n<li><p><code>darknet_boxes.bounding_boxes[i]</code>的类型是\r\n<code>darknet_ros_msgs</code> 中的 <code>BoundingBox</code>\r\n消息类型中，通常包含以下字段：</p></li>\r\n<li><p><code>header</code>：消息头，包含了时间戳和坐标系信息。</p></li>\r\n<li><p><code>Class</code>：检测到的目标的类别或标签。</p></li>\r\n<li><p><code>xmin</code>：边界框的左上角 x 坐标。</p></li>\r\n<li><p><code>ymin</code>：边界框的左上角 y 坐标。</p></li>\r\n<li><p><code>xmax</code>：边界框的右下角 x 坐标。</p></li>\r\n<li><p><code>ymax</code>：边界框的右下角 y 坐标。</p></li>\r\n<li><p><code>probability</code>：目标的检测置信度或概率。</p></li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">darknet_ros_msgs::BoundingBox fire_box = darknet_boxes.bounding_boxes[i];<br><span class=\"hljs-keyword\">if</span> (fire_box.Class != <span class=\"hljs-string\">&quot;person&quot;</span>)<br>    <span class=\"hljs-keyword\">continue</span>;<br><span class=\"hljs-type\">float</span> dx = Laser.ranges[<span class=\"hljs-number\">0</span>] * <span class=\"hljs-built_in\">cos</span>(Euler_fcu[<span class=\"hljs-number\">2</span>]);<br><span class=\"hljs-type\">float</span> dy = -dx * ((fire_box.xmin + fire_box.xmax) / <span class=\"hljs-number\">2</span> - cx) / fx;<br><span class=\"hljs-type\">float</span> fire_center_x = pos_drone.pose.position.x + dx;<br><span class=\"hljs-type\">float</span> fire_center_y = pos_drone.pose.position.y + dy;<br></code></pre></td></tr></table></figure>\r\n<p>​</p>\r\n<h2 id=\"路径规划算法\"><a href=\"#路径规划算法\" class=\"headerlink\" title=\"路径规划算法\"></a>路径规划算法</h2>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/51372134\">参考</a> ### 构型空间\r\n机器人的所有状态（构型）的集合 比如 <span\r\nclass=\"math inline\">\\(\\{(无人机的x坐标,y坐标,所朝方向\\theta)\\}\\)</span></p>\r\n<h3 id=\"prm\"><a href=\"#prm\" class=\"headerlink\" title=\"prm\"></a>PRM</h3>\r\n<ol type=\"1\">\r\n<li>在图中随机采样一定数量（如50个）的无碰撞点。</li>\r\n<li>对每一个点，取其领域（相邻区域）内（例如直线距离在200以内）的所有点进行连线，对连线进行碰撞检测（如果连线与碰撞点有相交就删除连线），将结果存放在<a\r\nhref=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/qq_30796379/article/details/80152406%23\">邻接矩阵</a>中。\r\n### RRT\r\n在每次选择生长方向时，有一定的概率会向着目标点延伸，也有一定的概率会随机在地图内选择一个方向延伸一段距离\r\n假设我们采样了空间中随机一个点，接下来从现有的RRT树中选择离采样点最近的一个点，并向采样点延伸一段距离。假如在这段延伸中没有发生碰撞（碰撞检测），而且新点与现有的所有点的距离大于某个判断阈值（防止生长到RRT已经探索过的位置），则将这个新点也加入RRT树。\r\n假如本次延伸的新点与终点的距离小于这个阈值，我们就认为已经规划成功。</li>\r\n</ol>\r\n<p>这里利用统计学中回归分析生成新节点，将RRT算法探索未知空间的能力进一步增强以避免因启发估价因子导致的局部极小。其思想是探索以前到过的空间是无用的，而且容易陷入局部极小。引进回归分析(regression\r\nanalysis)是考察新节点与其他节点之间关系，利用回归函数约束，使得随机树不探索以前到过的空间，因此避免了局部极小。</p>\r\n<h3 id=\"滚动rrt\"><a href=\"#滚动rrt\" class=\"headerlink\" title=\"滚动rrt\"></a>滚动RRT</h3>\r\n<p>滚动窗口状态空间进行K次采样后，遍历随机树，根据启发估价思想寻找滚动窗口子目标 <span\r\nclass=\"math inline\">\\(X_{sub}\\)</span>。 <span\r\nclass=\"math inline\">\\(X_{sub}\\)</span> 是当前滚动窗口中的子树中估价函数最小的点。确定子目标后，机器人前进到子目标点，进行下一轮的滚动RRT规划。如此反复，直到到达目标点\r\nG。</p>\r\n<h3 id=\"人工势场\"><a href=\"#人工势场\" class=\"headerlink\" title=\"人工势场\"></a>人工势场</h3>\r\n<p>但是复杂的势场环境可能在目标点之外产生局部极小点导致机器人无法到达目标。遇到局部极小点后结合其他的方法使机器人离开局部极小点。沿墙行走法使机器人在遇到局部极小点后参照类似BUG算法的环绕行为绕过产生局部极小点的障碍物继续前进。这种方法可靠性高，不依赖环境的先验信息和障碍物形状。</p>\r\n<p>为了使机器人从局部极小点中逃离，在人工势场法的基础上引入应激行为，即增加绕行行为。当机器人遇到局部极小点时，忽略目标引力势的作用，沿着斥力势的等势面方向移动，直到机器人离开局部极小区域。</p>\r\n<ol type=\"1\">\r\n<li>根据传感器信息计算当前位置的引力和斥力；</li>\r\n<li>判断是否处于绕行行为，若是，执行3；若否，执行4；</li>\r\n<li>判断是否离开局部极小区域，若是，机器人沿着合力方向运动，结束绕行行为；若否，机器人沿着斥力场等势线运动，继续绕行行为；</li>\r\n<li>判断是否遇到局部极小点，若是，机器人沿着斥力场等势线运动，开始绕行行为；若否，机器人沿着合力方向运动；</li>\r\n<li>判断是否到达目标，若是，退出算法；若否，继续1；</li>\r\n</ol>\r\n<p><span class=\"math inline\">\\(\\left| f_{att}+\\sum_{j=1}^{n}{f_{rep,j}}\r\n\\right|&lt;\\varepsilon\\)</span> <span class=\"math inline\">\\(\\left| x-x_A\r\n\\right|&lt;\\alpha s_A\\)</span>\r\n当条件1或者条件2出现时，就认为机器人遇到了局部极小点。条件1中 <span\r\nclass=\"math inline\">\\(\\varepsilon\\)</span>\r\n是一个很小的正数，其含义是机器人受到的虚拟合力接近0。这是最直接局部极小点判断方法。条件2中 <span\r\nclass=\"math inline\">\\(\\alpha\\)</span>\r\n为0,1之间某一正数， x_A 为机器人运动过程中某一状态， s_A 表示机器人从 x_A 到达当前位置 x 的总路程，条件2成立意味着机器人在运动很长路程后，位移很小。用来检测机器人在局部极小点附近发生的振动和圆周运动。</p>\r\n<h3 id=\"bug算法\"><a href=\"#bug算法\" class=\"headerlink\" title=\"bug算法\"></a>BUG算法</h3>\r\n<p>BUG算法是一种完全应激的机器人避障算法。其算法原理类似昆虫爬行的运动决策策略。在未遇到障碍物时，沿直线向目标运动；在遇到障碍物后，沿着障碍物边界绕行，并利用一定的判断准则离开障碍物继续直行。这种应激式的算法计算简便，不需要获知全局地图和障碍物形状，具备完备性。但是其生成的路径平滑性不够好，对机器人的各种微分约束适应性比较差。</p>\r\n<p><img src=\"https://pic2.zhimg.com/80/v2-e1b1151d534417b77c3d3b7cf639b6c5_1440w.webp\" alt=\"图片\" width=\"400\" height=\"300\"></p>\r\n<p>（沿着障碍物绕一圈）</p>\r\n<p><img src=\"https://pic1.zhimg.com/v2-355b0b36503ab0670f69fc0efc41a95c_r.jpg\" alt=\"bug2\" width=\"400\" height=\"300\">\r\nbug2 直到碰到直线</p>\r\n<h3 id=\"tangentbug算法\"><a href=\"#tangentbug算法\" class=\"headerlink\" title=\"tangentbug算法\"></a>TangentBUG算法</h3>\r\n<ul>\r\n<li>雷达扫描 找到距离的间断点（角度）</li>\r\n<li>选择一个角度，用 从当前位置经过此角度上的交点到目标点的折线长度\r\n判断走哪个角度</li>\r\n<li>探索距离不再减小时，就停止向目标运动行为，切换到环绕边界行为</li>\r\n<li>如下图所示，当机器人探索到障碍物上的 M 点后，探索距离就不再减小，即 � 点是机器人探索距离在障碍物边界上的局部极小点。机器人开始沿着障碍物边界进行环绕，图中虚线路径就是机器人环绕障碍物时所走的路径。当机器人探测到与目标距离相比 � 点更近的点时，重新开始接近目标的运动。\r\n<ul>\r\n<li><img src=\"https://pic3.zhimg.com/80/v2-17e78d950a31cf318019178eea797d5a_1440w.webp\" alt=\"bug2\" width=\"400\" ></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"卡尔曼滤波\"><a\r\nhref=\"https://blog.csdn.net/u010720661/article/details/63253509\">卡尔曼滤波</a></h2>\r\n<ul>\r\n<li>高斯分布：卡尔曼滤波假设两个变量（位置和速度，在这个例子中）都是随机的，并且<strong>服从高斯分布</strong>。每个变量都有一个均值 μ，表示随机分布的中心（最可能的状态），以及方差\r\n<span class=\"math inline\">\\(\\sigma^2\\)</span>，表示不确定性。</li>\r\n<li><strong><a\r\nhref=\"https://en.wikipedia.org/wiki/Covariance_matrix\">协方差矩阵</a></strong>\r\n<ul>\r\n<li>![[Pasted image 20240302153643.png]]</li>\r\n<li>矩阵中的每个元素 <span\r\nclass=\"math inline\">\\(\\Sigma_{i,j}\\)</span> 表示第 i 个和第 j\r\n个状态变量之间的相关度</li>\r\n</ul></li>\r\n<li>![[Pasted image 20240228133157.png|200]]</li>\r\n<li>![[Pasted image 20240228134002.png|200]]</li>\r\n<li>控制变量和控制矩阵 ![[Pasted image 20240228134327.png|200]]</li>\r\n<li>外部干扰 ![[Pasted image 20240228134545.png|200]]</li>\r\n<li>传感器检测 ![[Pasted image 20240228162415.png|400]] ![[Pasted image\r\n20240228162527.png|300]] 其中 <span class=\"math inline\">\\(H_k\\)</span>\r\n把预测数据转化为相对应的传感器数据 ![[Pasted image\r\n20240228163108.png]]</li>\r\n<li><a\r\nhref=\"https://www.zhihu.com/column/c_1116805280528334848\">总结与应用</a>\r\n用于建图时定位</li>\r\n</ul>\r\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2>\r\n<ul>\r\n<li>NED系（North-East-Down）ENU：East-North-Up</li>\r\n</ul>\r\n"},{"title":"无人机理论知识（元启发式）","date":"2024-02-22T16:00:00.000Z","_content":"\nMVO（Multi-Verse Optimization）\n\n- 多宇宙 => 不同的参数组合和解决方案\n- 评估每个宇宙的适应度函数（更优or更劣）\n- MVO通过交换宇宙之间的信息来改进解决方案。更优秀的宇宙将共享其参数值和解决方案，以便其他宇宙可以受益并在下一代中生成更好的解。\n- 多次迭代从而达到最优解\n- 适用于多重参数问题但是时间复杂度较高\n\n\n\nBresenham算法\n\n- 一种在光栅显示器或网格上绘制直线的高效方法，可以在基于像素的显示器上高效地绘制直线\n- 一步一步移动对于沿直线的每个后续像素，更新决策参数（初始设置为2 \\* Δy - Δx）并进行水平或对角线移动。\n-----\n要避免过早收敛和次优结果\n\n","source":"_posts/无人机/无人机理论知识（元启发式）.md","raw":"---\ntitle: 无人机理论知识（元启发式）\ndate: 2024-02-23 00:00:00\ntags:\n  - 无人机\n---\n\nMVO（Multi-Verse Optimization）\n\n- 多宇宙 => 不同的参数组合和解决方案\n- 评估每个宇宙的适应度函数（更优or更劣）\n- MVO通过交换宇宙之间的信息来改进解决方案。更优秀的宇宙将共享其参数值和解决方案，以便其他宇宙可以受益并在下一代中生成更好的解。\n- 多次迭代从而达到最优解\n- 适用于多重参数问题但是时间复杂度较高\n\n\n\nBresenham算法\n\n- 一种在光栅显示器或网格上绘制直线的高效方法，可以在基于像素的显示器上高效地绘制直线\n- 一步一步移动对于沿直线的每个后续像素，更新决策参数（初始设置为2 \\* Δy - Δx）并进行水平或对角线移动。\n-----\n要避免过早收敛和次优结果\n\n","slug":"无人机/无人机理论知识（元启发式）","published":1,"updated":"2024-02-23T07:19:29.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3w3001pp4wvegcbfnyn","content":"<p>MVO（Multi-Verse Optimization）</p>\r\n<ul>\r\n<li>多宇宙 =&gt; 不同的参数组合和解决方案</li>\r\n<li>评估每个宇宙的适应度函数（更优or更劣）</li>\r\n<li>MVO通过交换宇宙之间的信息来改进解决方案。更优秀的宇宙将共享其参数值和解决方案，以便其他宇宙可以受益并在下一代中生成更好的解。</li>\r\n<li>多次迭代从而达到最优解</li>\r\n<li>适用于多重参数问题但是时间复杂度较高</li>\r\n</ul>\r\n<p>Bresenham算法</p>\r\n<ul>\r\n<li>一种在光栅显示器或网格上绘制直线的高效方法，可以在基于像素的显示器上高效地绘制直线</li>\r\n<li><h2\r\nid=\"一步一步移动对于沿直线的每个后续像素更新决策参数初始设置为2-δy---δx并进行水平或对角线移动\">一步一步移动对于沿直线的每个后续像素，更新决策参数（初始设置为2\r\n* Δy - Δx）并进行水平或对角线移动。</h2>\r\n要避免过早收敛和次优结果</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<p>MVO（Multi-Verse Optimization）</p>\r\n<ul>\r\n<li>多宇宙 =&gt; 不同的参数组合和解决方案</li>\r\n<li>评估每个宇宙的适应度函数（更优or更劣）</li>\r\n<li>MVO通过交换宇宙之间的信息来改进解决方案。更优秀的宇宙将共享其参数值和解决方案，以便其他宇宙可以受益并在下一代中生成更好的解。</li>\r\n<li>多次迭代从而达到最优解</li>\r\n<li>适用于多重参数问题但是时间复杂度较高</li>\r\n</ul>\r\n<p>Bresenham算法</p>\r\n<ul>\r\n<li>一种在光栅显示器或网格上绘制直线的高效方法，可以在基于像素的显示器上高效地绘制直线</li>\r\n<li><h2\r\nid=\"一步一步移动对于沿直线的每个后续像素更新决策参数初始设置为2-δy---δx并进行水平或对角线移动\">一步一步移动对于沿直线的每个后续像素，更新决策参数（初始设置为2\r\n* Δy - Δx）并进行水平或对角线移动。</h2>\r\n要避免过早收敛和次优结果</li>\r\n</ul>\r\n"},{"title":"路径规划计划","date":"2024-03-01T16:00:00.000Z","_content":"\nplanA\n比赛前一天手动规划路径（快速提取绘画坐标程序）（多重路径？）\n手绘路径作为目标点\n使用改进人工势场 or TangentBUG算法避障\n\nplanB\nslam + 改进人工势场 or TangentBUG算法避障\n\nplanC\n雷达数据手动重合+TangentBUG算法\n","source":"_posts/无人机/路径规划计划.md","raw":"---\ntitle: 路径规划计划\ntags:\n  - 无人机\ndate: 2024-3-2\n---\n\nplanA\n比赛前一天手动规划路径（快速提取绘画坐标程序）（多重路径？）\n手绘路径作为目标点\n使用改进人工势场 or TangentBUG算法避障\n\nplanB\nslam + 改进人工势场 or TangentBUG算法避障\n\nplanC\n雷达数据手动重合+TangentBUG算法\n","slug":"无人机/路径规划计划","published":1,"updated":"2024-03-02T13:45:33.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3w4001rp4wv2tie120t","content":"<p>planA 比赛前一天手动规划路径（快速提取绘画坐标程序）（多重路径？）\r\n手绘路径作为目标点 使用改进人工势场 or TangentBUG算法避障</p>\r\n<p>planB slam + 改进人工势场 or TangentBUG算法避障</p>\r\n<p>planC 雷达数据手动重合+TangentBUG算法</p>\r\n","site":{"data":{}},"excerpt":"","more":"<p>planA 比赛前一天手动规划路径（快速提取绘画坐标程序）（多重路径？）\r\n手绘路径作为目标点 使用改进人工势场 or TangentBUG算法避障</p>\r\n<p>planB slam + 改进人工势场 or TangentBUG算法避障</p>\r\n<p>planC 雷达数据手动重合+TangentBUG算法</p>\r\n"},{"title":"BLOG阅读笔记","data":"2024-03-25T16:00:00.000Z","hidden":true,"_content":"# DNS（[# 从理论到实践，全方位认识DNS（理论篇）](https://selfboot.cn/2015/11/05/dns_theory/)）\n![DNS](https://slefboot-1251736664.file.myqcloud.com/20151105_dns_concept.png/webp)\n域名层次结构 groups.google.com\n\n通常并非只记录其IP地址，还可能需要一些其他种类的记录，一些常见的记录类型如下：\n\n| 记录类型  | 含义               |\n| ----- | ---------------- |\n| A     | 主机的IPv4地址        |\n| AAAA  | 主机的IPv6地址        |\n| NS    | 该域名所在域的权威域名服务器   |\n| MX    | 接受特定域名电子邮件的服务器域名 |\n| CNAME | 当前域名的一个别名        |\n然后将每个区域与多个域名服务器（其中一个是master，其他slave服务器则用来提供数据备份、加快解析速度、保证服务可用性）关联起来，称这些域名服务器为该区域的`权威域名服务器(Authoritative Name Servers )`。[根域名服务器](https://en.wikipedia.org/wiki/Root_name_server)，它保存了所有顶级区域的权威域名服务器记录\n\n本地域名服务器。其实域名服务器启动的时候，就会加载一个配置文件，里面保存了根域名服务器的NS记录。为了使缓存机制适应这两类情况，我们在域名资源记录里面添加一个`Time_to_live`字段\n\n于是有些流氓的域名服务器故意更改一些域名的解析结果，将用户引向一个错误的目标地址。这就叫作 DNS 劫持，\nDNS 欺骗简单来说就是用一个假的 DNS 应答来欺骗用户计算机，让其相信这个假的地址，并且抛弃真正的 DNS 应答。在一台主机发出 DNS 请求后，它就开始等待应答，如果此时有一个看起来正确（拥有和DNS请求一样的序列号）的应答包，它就会信以为真，并且丢弃稍晚一点到达的应答。\n\n\n\n","source":"_posts/阅读笔记/BLOG阅读笔记.md","raw":"---\ntitle: BLOG阅读笔记\ndata: 2024-03-26\ntags:\n  - 学习笔记\nhidden: true\n---\n# DNS（[# 从理论到实践，全方位认识DNS（理论篇）](https://selfboot.cn/2015/11/05/dns_theory/)）\n![DNS](https://slefboot-1251736664.file.myqcloud.com/20151105_dns_concept.png/webp)\n域名层次结构 groups.google.com\n\n通常并非只记录其IP地址，还可能需要一些其他种类的记录，一些常见的记录类型如下：\n\n| 记录类型  | 含义               |\n| ----- | ---------------- |\n| A     | 主机的IPv4地址        |\n| AAAA  | 主机的IPv6地址        |\n| NS    | 该域名所在域的权威域名服务器   |\n| MX    | 接受特定域名电子邮件的服务器域名 |\n| CNAME | 当前域名的一个别名        |\n然后将每个区域与多个域名服务器（其中一个是master，其他slave服务器则用来提供数据备份、加快解析速度、保证服务可用性）关联起来，称这些域名服务器为该区域的`权威域名服务器(Authoritative Name Servers )`。[根域名服务器](https://en.wikipedia.org/wiki/Root_name_server)，它保存了所有顶级区域的权威域名服务器记录\n\n本地域名服务器。其实域名服务器启动的时候，就会加载一个配置文件，里面保存了根域名服务器的NS记录。为了使缓存机制适应这两类情况，我们在域名资源记录里面添加一个`Time_to_live`字段\n\n于是有些流氓的域名服务器故意更改一些域名的解析结果，将用户引向一个错误的目标地址。这就叫作 DNS 劫持，\nDNS 欺骗简单来说就是用一个假的 DNS 应答来欺骗用户计算机，让其相信这个假的地址，并且抛弃真正的 DNS 应答。在一台主机发出 DNS 请求后，它就开始等待应答，如果此时有一个看起来正确（拥有和DNS请求一样的序列号）的应答包，它就会信以为真，并且丢弃稍晚一点到达的应答。\n\n\n\n","slug":"阅读笔记/BLOG阅读笔记","published":1,"date":"2024-03-14T08:04:35.473Z","updated":"2024-09-23T03:40:43.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3wd0030p4wv8mjr20hc","content":"<h1 id=\"dns-从理论到实践全方位认识dns理论篇\">DNS（<a\r\nhref=\"https://selfboot.cn/2015/11/05/dns_theory/\">#\r\n从理论到实践，全方位认识DNS（理论篇）</a>）</h1>\r\n<p><img\r\nsrc=\"https://slefboot-1251736664.file.myqcloud.com/20151105_dns_concept.png/webp\"\r\nalt=\"DNS\" /> 域名层次结构 groups.google.com</p>\r\n<p>通常并非只记录其IP地址，还可能需要一些其他种类的记录，一些常见的记录类型如下：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>记录类型</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>A</td>\r\n<td>主机的IPv4地址</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>AAAA</td>\r\n<td>主机的IPv6地址</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>NS</td>\r\n<td>该域名所在域的权威域名服务器</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>MX</td>\r\n<td>接受特定域名电子邮件的服务器域名</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>CNAME</td>\r\n<td>当前域名的一个别名</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>然后将每个区域与多个域名服务器（其中一个是master，其他slave服务器则用来提供数据备份、加快解析速度、保证服务可用性）关联起来，称这些域名服务器为该区域的<code>权威域名服务器(Authoritative Name Servers )</code>。<a\r\nhref=\"https://en.wikipedia.org/wiki/Root_name_server\">根域名服务器</a>，它保存了所有顶级区域的权威域名服务器记录</p>\r\n<p>本地域名服务器。其实域名服务器启动的时候，就会加载一个配置文件，里面保存了根域名服务器的NS记录。为了使缓存机制适应这两类情况，我们在域名资源记录里面添加一个<code>Time_to_live</code>字段</p>\r\n<p>于是有些流氓的域名服务器故意更改一些域名的解析结果，将用户引向一个错误的目标地址。这就叫作\r\nDNS 劫持， DNS 欺骗简单来说就是用一个假的 DNS\r\n应答来欺骗用户计算机，让其相信这个假的地址，并且抛弃真正的 DNS\r\n应答。在一台主机发出 DNS\r\n请求后，它就开始等待应答，如果此时有一个看起来正确（拥有和DNS请求一样的序列号）的应答包，它就会信以为真，并且丢弃稍晚一点到达的应答。</p>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dns-从理论到实践全方位认识dns理论篇\">DNS（<a\r\nhref=\"https://selfboot.cn/2015/11/05/dns_theory/\">#\r\n从理论到实践，全方位认识DNS（理论篇）</a>）</h1>\r\n<p><img\r\nsrc=\"https://slefboot-1251736664.file.myqcloud.com/20151105_dns_concept.png/webp\"\r\nalt=\"DNS\" /> 域名层次结构 groups.google.com</p>\r\n<p>通常并非只记录其IP地址，还可能需要一些其他种类的记录，一些常见的记录类型如下：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>记录类型</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>A</td>\r\n<td>主机的IPv4地址</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>AAAA</td>\r\n<td>主机的IPv6地址</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>NS</td>\r\n<td>该域名所在域的权威域名服务器</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>MX</td>\r\n<td>接受特定域名电子邮件的服务器域名</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>CNAME</td>\r\n<td>当前域名的一个别名</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>然后将每个区域与多个域名服务器（其中一个是master，其他slave服务器则用来提供数据备份、加快解析速度、保证服务可用性）关联起来，称这些域名服务器为该区域的<code>权威域名服务器(Authoritative Name Servers )</code>。<a\r\nhref=\"https://en.wikipedia.org/wiki/Root_name_server\">根域名服务器</a>，它保存了所有顶级区域的权威域名服务器记录</p>\r\n<p>本地域名服务器。其实域名服务器启动的时候，就会加载一个配置文件，里面保存了根域名服务器的NS记录。为了使缓存机制适应这两类情况，我们在域名资源记录里面添加一个<code>Time_to_live</code>字段</p>\r\n<p>于是有些流氓的域名服务器故意更改一些域名的解析结果，将用户引向一个错误的目标地址。这就叫作\r\nDNS 劫持， DNS 欺骗简单来说就是用一个假的 DNS\r\n应答来欺骗用户计算机，让其相信这个假的地址，并且抛弃真正的 DNS\r\n应答。在一台主机发出 DNS\r\n请求后，它就开始等待应答，如果此时有一个看起来正确（拥有和DNS请求一样的序列号）的应答包，它就会信以为真，并且丢弃稍晚一点到达的应答。</p>\r\n"},{"title":"CSAPP","data":"2024-03-25T16:00:00.000Z","hidden":true,"_content":"![0D82FC63D006C709937288F5D8487A94](0D82FC63D006C709937288F5D8487A94.jpg)\n![F0B429B06B52D63FC70221996AB409DD](F0B429B06B52D63FC70221996AB409DD.jpg)\n![](4ADE439FC2CFA75C043F2CFE652259DF.jpg)\n![](4EF5B13F3EC7336657E1FB9DEBC4A7EB.jpg)\n- TODO 124 / 775 第二章家庭作业\n- 一字16位\n- ![](Pasted%20image%2020240315210238.png)\n\n## 虚拟内存\n虚拟内存地址 -> { TLB（对PTE的缓存）（CPU里） -> PTE（多重页表来减少空间，B+树）（内存or缓存里）} （找PPN）->  {  缓存or内存 -> 缺页（磁盘）}（通过PPN+PPO找data）\n","source":"_posts/阅读笔记/CSAPP.md","raw":"---\ntitle: CSAPP\ndata: 2024-03-26\ntags:\n  - 底层原理\nhidden: true\n---\n![0D82FC63D006C709937288F5D8487A94](0D82FC63D006C709937288F5D8487A94.jpg)\n![F0B429B06B52D63FC70221996AB409DD](F0B429B06B52D63FC70221996AB409DD.jpg)\n![](4ADE439FC2CFA75C043F2CFE652259DF.jpg)\n![](4EF5B13F3EC7336657E1FB9DEBC4A7EB.jpg)\n- TODO 124 / 775 第二章家庭作业\n- 一字16位\n- ![](Pasted%20image%2020240315210238.png)\n\n## 虚拟内存\n虚拟内存地址 -> { TLB（对PTE的缓存）（CPU里） -> PTE（多重页表来减少空间，B+树）（内存or缓存里）} （找PPN）->  {  缓存or内存 -> 缺页（磁盘）}（通过PPN+PPO找data）\n","slug":"阅读笔记/CSAPP","published":1,"date":"2024-03-15T12:19:22.290Z","updated":"2024-09-23T03:40:48.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3we0031p4wv7a5s3xau","content":"<p><img src=\"0D82FC63D006C709937288F5D8487A94.jpg\"\r\nalt=\"0D82FC63D006C709937288F5D8487A94\" /> <img\r\nsrc=\"F0B429B06B52D63FC70221996AB409DD.jpg\"\r\nalt=\"F0B429B06B52D63FC70221996AB409DD\" /> <img\r\nsrc=\"4ADE439FC2CFA75C043F2CFE652259DF.jpg\" /> <img\r\nsrc=\"4EF5B13F3EC7336657E1FB9DEBC4A7EB.jpg\" /> - TODO 124 / 775\r\n第二章家庭作业 - 一字16位 - <img\r\nsrc=\"Pasted%20image%2020240315210238.png\" /></p>\r\n<h2 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h2>\r\n<p>虚拟内存地址 -&gt; { TLB（对PTE的缓存）（CPU里） -&gt;\r\nPTE（多重页表来减少空间，B+树）（内存or缓存里）} （找PPN）-&gt; {\r\n缓存or内存 -&gt; 缺页（磁盘）}（通过PPN+PPO找data）</p>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<p><img src=\"0D82FC63D006C709937288F5D8487A94.jpg\"\r\nalt=\"0D82FC63D006C709937288F5D8487A94\" /> <img\r\nsrc=\"F0B429B06B52D63FC70221996AB409DD.jpg\"\r\nalt=\"F0B429B06B52D63FC70221996AB409DD\" /> <img\r\nsrc=\"4ADE439FC2CFA75C043F2CFE652259DF.jpg\" /> <img\r\nsrc=\"4EF5B13F3EC7336657E1FB9DEBC4A7EB.jpg\" /> - TODO 124 / 775\r\n第二章家庭作业 - 一字16位 - <img\r\nsrc=\"Pasted%20image%2020240315210238.png\" /></p>\r\n<h2 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h2>\r\n<p>虚拟内存地址 -&gt; { TLB（对PTE的缓存）（CPU里） -&gt;\r\nPTE（多重页表来减少空间，B+树）（内存or缓存里）} （找PPN）-&gt; {\r\n缓存or内存 -&gt; 缺页（磁盘）}（通过PPN+PPO找data）</p>\r\n"},{"title":"《做最好的自己》","data":"2024-03-25T16:00:00.000Z","_content":"## 自信\n\n永远相信自己有足够的潜能, 并因此尊重和鼓励自己. \n\n不要因为一些挫折就否定自己, 坚定相信只是暂时的问题, 只要积极改正就是做好.\n\n用具体事例反复 `训练` 你的大脑, 经过潜意识的每一次思维, 告诉自己你是值得信任的, 你应当为自己自豪, 你必须成为自己最好的啦啦队. ( 赛前回忆法 : 赛前回忆最得意的比赛, 和一个特定动作 )\n\n1. 不要因为在乎别人的意见而失去自己的想法, \"不同人有不同想法\" 这件事是很正常的, 不一定是谁更对更高级, 记得考虑自己的立场.\n2. 有自己的想法和主见. 找到自己的原则, 底线. 当觉得自己对某件事可以 \"不在乎\" 的时候, 那也许正是开始逐渐丧失自我, 丧失自信的时候.\n3. 有想法一定要表达出来. 自我表现是对自己最好的鼓励, 看到自己的影响力. 要训练自己形成主见和自信的能力.\n4. 学习有自信的人的说话的语气 :\n\t- 多用 \"我认为\" \"我希望\", 少用拖泥带水的词（如也许、可能、会不会、如果\n\t- 讲话清晰, 用语调音量停顿等强调信息\n\t- 主动和对方目光接触\n\t- 表述时不让他人随意打断\n\t- 不担心听众不尊重自己\n\n了解一个人一般只需要 10 秒钟, 凭直觉.\n\n自信的人总能不断地从自己身上找到前进的动力, 总能发挥出自己的潜能.\n\n## 勇气\n\n对于一个毕业生来说，机会远比安稳更重要，事业远比金钱更重要，未来远比今天更重要。过早地固定在一个职业上也许才是人生的最大不幸。继续学习, 为了理想和兴趣, 为了充分面对这个迅速变化的世界, 不要害怕犯错.\n\n## 宽容\n\n值得为了别人的过失, 而付出自己不快乐的代价吗\n\n\"我不同意你, 但我支持你\"\n\n## 自律和自觉\n\n自觉不只是认识自己的潜能、素质，还包括认识自己的感情、态度。自觉的人知道自己何时会有喜、怒、哀、乐的表现，也明白喜、怒、哀、乐的宣泄会造成怎样的后果。\n\n人的感情是最富有感染力的，你完全可以用有建设性的、宽容的态度与他人沟通并影响他人。\n\n每个人对别人的判断都会受到自己主观因素的影响，不一定完全公正.\n\n## 计划\n\n一套要有明确的远期、中期和近期目标, 还有拥有一个稳定的、鼓舞人心的价值观或信念.\n\n可度量, 结果导向, 时间限制\n\n不要轻易改变自己的目标，不要因为困惑和犹豫与一个又一个成功的机会失之交臂！\n\n- 保护自己的时间, 不要被破事分割\n- 利用高效时间, 要把握一天中20％的精华时间\n- 给自己一个合理的最后期限\n\n## 理想\n\n只有那些从事真心喜爱的人，才会得到真正的财富（Money comes to those who do it for love)\n\n\"影响力\"\n\n## 兴趣\n\n在工作中找到兴趣:\n\n- 今天有没有哪一点比昨天做得更好？\n- 你的技能有没有新的提高？有没有学到新东西？\n- 你的工作或专业对别人有没有帮助？\n- 你周围的人有没有夸奖你？\n\n阿兰·巴迪欧在《何为真正生活》中说，\"第一个是当下生活的激情——追求娱乐、快感、一晌贪欢。第二个似乎恰恰相反：追求成功的激情——让自己变得富有，获得权力。这两个内在敌人让他们远离了真正的生活, 让他们认识不到他们自己创造真正的价值. \"\n\n## 选择\n\n\"我在大时代的潮流里漂来漂去，每一步都是大时代的结果，个人选择很少。新一代年轻人对大时代的起伏与波折感知越来越弱。但在这样的“小时代＇中，其实有丰富多彩的选择. 内卷、躺平、追求自己喜欢的事都是选项，也很精彩。我曾作为特邀嘉宾在斯里兰卡莫拉图瓦大学毕业典礼致辞，演讲的题目是“Development is the right to choose”。我羡慕年轻人拥有“选择＇的权利，这是时代的进步。”\n\n对于已经做出的选择, 与其把时间花在无谓的焦虑上，倒不如把这些东西“轻轻”放下，然后一身轻松地去做自己应该做的事。不能陷入纠结.\n\n- 把影响你抉择的因素罗列成一张“利弊对照表”. 咨询他人的时候也带上这张表.\n- 学会用概率论的方法看问题, 做概率分析时，可以列出“最好的可能”和“最坏的打算”的概率，以帮助自己综合考量。\n\n## 沟通\n\n### 不同意的艺术 :\n\n1. start with \"你有这种感觉，我一点也不奇怪。如果我是你，毫无疑问，我的想法也会跟你的一样. \"\n2. 讨论的目的是推动双方的认识和议题的进展，而不是互争输赢的辩论。\n3. 保持自信 : 当一个人遇到不同意见最多的时候，也恰恰是他收获最多的时候。\n\n[建设性意见](https://zh.wikipedia.org/wiki/Wikipedia:%E5%BB%BA%E8%AE%BE%E6%80%A7%E6%84%8F%E8%A7%81)\n\n### 如何更加外向\n\n- 接受并庆幸你拥有内向的性格\n- 尽量找机会，给自己一些“较外向但又不带来太大压力”的改变。\"可衡量的目标\" (开会发一次言, 一个月主动交一个朋友)\n- 主动和别人分享有趣的事, 让自己有价值\n- 主动找人讲话时，不要那么在乎“面子”。如果一个人不理睬你，你不会有任何的损失.\n\n## 学习\n\n就算你已经大学毕业，你仍然应该分配相当多的时间来学习，尤其是当你工作在发展得特别快的领域时。\n\n## 毅力\n\n暂时的挫折会给人极大的困扰和打击。但是，几乎每个行业、每件事情都有大大小小的困难和挫折。如果因此转移兴趣，那么你永远也找不到自己的兴趣。相反，如果能够克服困难，取得进步。那么你就会使兴趣升华，让兴趣不仅包含好奇, 还包含巨大的满足感.\n","source":"_posts/阅读笔记/《做最好的自己》.md","raw":"---\ntitle: 《做最好的自己》\ndata: 2024-03-26\ntags:\n  - 阅读笔记\n  - 学习笔记\n---\n## 自信\n\n永远相信自己有足够的潜能, 并因此尊重和鼓励自己. \n\n不要因为一些挫折就否定自己, 坚定相信只是暂时的问题, 只要积极改正就是做好.\n\n用具体事例反复 `训练` 你的大脑, 经过潜意识的每一次思维, 告诉自己你是值得信任的, 你应当为自己自豪, 你必须成为自己最好的啦啦队. ( 赛前回忆法 : 赛前回忆最得意的比赛, 和一个特定动作 )\n\n1. 不要因为在乎别人的意见而失去自己的想法, \"不同人有不同想法\" 这件事是很正常的, 不一定是谁更对更高级, 记得考虑自己的立场.\n2. 有自己的想法和主见. 找到自己的原则, 底线. 当觉得自己对某件事可以 \"不在乎\" 的时候, 那也许正是开始逐渐丧失自我, 丧失自信的时候.\n3. 有想法一定要表达出来. 自我表现是对自己最好的鼓励, 看到自己的影响力. 要训练自己形成主见和自信的能力.\n4. 学习有自信的人的说话的语气 :\n\t- 多用 \"我认为\" \"我希望\", 少用拖泥带水的词（如也许、可能、会不会、如果\n\t- 讲话清晰, 用语调音量停顿等强调信息\n\t- 主动和对方目光接触\n\t- 表述时不让他人随意打断\n\t- 不担心听众不尊重自己\n\n了解一个人一般只需要 10 秒钟, 凭直觉.\n\n自信的人总能不断地从自己身上找到前进的动力, 总能发挥出自己的潜能.\n\n## 勇气\n\n对于一个毕业生来说，机会远比安稳更重要，事业远比金钱更重要，未来远比今天更重要。过早地固定在一个职业上也许才是人生的最大不幸。继续学习, 为了理想和兴趣, 为了充分面对这个迅速变化的世界, 不要害怕犯错.\n\n## 宽容\n\n值得为了别人的过失, 而付出自己不快乐的代价吗\n\n\"我不同意你, 但我支持你\"\n\n## 自律和自觉\n\n自觉不只是认识自己的潜能、素质，还包括认识自己的感情、态度。自觉的人知道自己何时会有喜、怒、哀、乐的表现，也明白喜、怒、哀、乐的宣泄会造成怎样的后果。\n\n人的感情是最富有感染力的，你完全可以用有建设性的、宽容的态度与他人沟通并影响他人。\n\n每个人对别人的判断都会受到自己主观因素的影响，不一定完全公正.\n\n## 计划\n\n一套要有明确的远期、中期和近期目标, 还有拥有一个稳定的、鼓舞人心的价值观或信念.\n\n可度量, 结果导向, 时间限制\n\n不要轻易改变自己的目标，不要因为困惑和犹豫与一个又一个成功的机会失之交臂！\n\n- 保护自己的时间, 不要被破事分割\n- 利用高效时间, 要把握一天中20％的精华时间\n- 给自己一个合理的最后期限\n\n## 理想\n\n只有那些从事真心喜爱的人，才会得到真正的财富（Money comes to those who do it for love)\n\n\"影响力\"\n\n## 兴趣\n\n在工作中找到兴趣:\n\n- 今天有没有哪一点比昨天做得更好？\n- 你的技能有没有新的提高？有没有学到新东西？\n- 你的工作或专业对别人有没有帮助？\n- 你周围的人有没有夸奖你？\n\n阿兰·巴迪欧在《何为真正生活》中说，\"第一个是当下生活的激情——追求娱乐、快感、一晌贪欢。第二个似乎恰恰相反：追求成功的激情——让自己变得富有，获得权力。这两个内在敌人让他们远离了真正的生活, 让他们认识不到他们自己创造真正的价值. \"\n\n## 选择\n\n\"我在大时代的潮流里漂来漂去，每一步都是大时代的结果，个人选择很少。新一代年轻人对大时代的起伏与波折感知越来越弱。但在这样的“小时代＇中，其实有丰富多彩的选择. 内卷、躺平、追求自己喜欢的事都是选项，也很精彩。我曾作为特邀嘉宾在斯里兰卡莫拉图瓦大学毕业典礼致辞，演讲的题目是“Development is the right to choose”。我羡慕年轻人拥有“选择＇的权利，这是时代的进步。”\n\n对于已经做出的选择, 与其把时间花在无谓的焦虑上，倒不如把这些东西“轻轻”放下，然后一身轻松地去做自己应该做的事。不能陷入纠结.\n\n- 把影响你抉择的因素罗列成一张“利弊对照表”. 咨询他人的时候也带上这张表.\n- 学会用概率论的方法看问题, 做概率分析时，可以列出“最好的可能”和“最坏的打算”的概率，以帮助自己综合考量。\n\n## 沟通\n\n### 不同意的艺术 :\n\n1. start with \"你有这种感觉，我一点也不奇怪。如果我是你，毫无疑问，我的想法也会跟你的一样. \"\n2. 讨论的目的是推动双方的认识和议题的进展，而不是互争输赢的辩论。\n3. 保持自信 : 当一个人遇到不同意见最多的时候，也恰恰是他收获最多的时候。\n\n[建设性意见](https://zh.wikipedia.org/wiki/Wikipedia:%E5%BB%BA%E8%AE%BE%E6%80%A7%E6%84%8F%E8%A7%81)\n\n### 如何更加外向\n\n- 接受并庆幸你拥有内向的性格\n- 尽量找机会，给自己一些“较外向但又不带来太大压力”的改变。\"可衡量的目标\" (开会发一次言, 一个月主动交一个朋友)\n- 主动和别人分享有趣的事, 让自己有价值\n- 主动找人讲话时，不要那么在乎“面子”。如果一个人不理睬你，你不会有任何的损失.\n\n## 学习\n\n就算你已经大学毕业，你仍然应该分配相当多的时间来学习，尤其是当你工作在发展得特别快的领域时。\n\n## 毅力\n\n暂时的挫折会给人极大的困扰和打击。但是，几乎每个行业、每件事情都有大大小小的困难和挫折。如果因此转移兴趣，那么你永远也找不到自己的兴趣。相反，如果能够克服困难，取得进步。那么你就会使兴趣升华，让兴趣不仅包含好奇, 还包含巨大的满足感.\n","slug":"阅读笔记/《做最好的自己》","published":1,"date":"2024-11-08T14:22:04.609Z","updated":"2024-11-10T06:20:34.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3wf0033p4wv4ov3cv01","content":"<h2 id=\"自信\"><a href=\"#自信\" class=\"headerlink\" title=\"自信\"></a>自信</h2>\r\n<p>永远相信自己有足够的潜能, 并因此尊重和鼓励自己.</p>\r\n<p>不要因为一些挫折就否定自己, 坚定相信只是暂时的问题,\r\n只要积极改正就是做好.</p>\r\n<p>用具体事例反复 <code>训练</code> 你的大脑, 经过潜意识的每一次思维,\r\n告诉自己你是值得信任的, 你应当为自己自豪, 你必须成为自己最好的啦啦队. (\r\n赛前回忆法 : 赛前回忆最得意的比赛, 和一个特定动作 )</p>\r\n<ol type=\"1\">\r\n<li>不要因为在乎别人的意见而失去自己的想法, \"不同人有不同想法\"\r\n这件事是很正常的, 不一定是谁更对更高级, 记得考虑自己的立场.</li>\r\n<li>有自己的想法和主见. 找到自己的原则, 底线. 当觉得自己对某件事可以\r\n\"不在乎\" 的时候, 那也许正是开始逐渐丧失自我, 丧失自信的时候.</li>\r\n<li>有想法一定要表达出来. 自我表现是对自己最好的鼓励, 看到自己的影响力.\r\n要训练自己形成主见和自信的能力.</li>\r\n<li>学习有自信的人的说话的语气 :\r\n<ul>\r\n<li>多用 \"我认为\" \"我希望\",\r\n少用拖泥带水的词（如也许、可能、会不会、如果</li>\r\n<li>讲话清晰, 用语调音量停顿等强调信息</li>\r\n<li>主动和对方目光接触</li>\r\n<li>表述时不让他人随意打断</li>\r\n<li>不担心听众不尊重自己</li>\r\n</ul></li>\r\n</ol>\r\n<p>了解一个人一般只需要 10 秒钟, 凭直觉.</p>\r\n<p>自信的人总能不断地从自己身上找到前进的动力, 总能发挥出自己的潜能.</p>\r\n<h2 id=\"勇气\"><a href=\"#勇气\" class=\"headerlink\" title=\"勇气\"></a>勇气</h2>\r\n<p>对于一个毕业生来说，机会远比安稳更重要，事业远比金钱更重要，未来远比今天更重要。过早地固定在一个职业上也许才是人生的最大不幸。继续学习,\r\n为了理想和兴趣, 为了充分面对这个迅速变化的世界, 不要害怕犯错.</p>\r\n<h2 id=\"宽容\"><a href=\"#宽容\" class=\"headerlink\" title=\"宽容\"></a>宽容</h2>\r\n<p>值得为了别人的过失, 而付出自己不快乐的代价吗</p>\r\n<p>\"我不同意你, 但我支持你\"</p>\r\n<h2 id=\"自律和自觉\"><a href=\"#自律和自觉\" class=\"headerlink\" title=\"自律和自觉\"></a>自律和自觉</h2>\r\n<p>自觉不只是认识自己的潜能、素质，还包括认识自己的感情、态度。自觉的人知道自己何时会有喜、怒、哀、乐的表现，也明白喜、怒、哀、乐的宣泄会造成怎样的后果。</p>\r\n<p>人的感情是最富有感染力的，你完全可以用有建设性的、宽容的态度与他人沟通并影响他人。</p>\r\n<p>每个人对别人的判断都会受到自己主观因素的影响，不一定完全公正.</p>\r\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2>\r\n<p>一套要有明确的远期、中期和近期目标,\r\n还有拥有一个稳定的、鼓舞人心的价值观或信念.</p>\r\n<p>可度量, 结果导向, 时间限制</p>\r\n<p>不要轻易改变自己的目标，不要因为困惑和犹豫与一个又一个成功的机会失之交臂！</p>\r\n<ul>\r\n<li>保护自己的时间, 不要被破事分割</li>\r\n<li>利用高效时间, 要把握一天中20％的精华时间</li>\r\n<li>给自己一个合理的最后期限</li>\r\n</ul>\r\n<h2 id=\"理想\"><a href=\"#理想\" class=\"headerlink\" title=\"理想\"></a>理想</h2>\r\n<p>只有那些从事真心喜爱的人，才会得到真正的财富（Money comes to those\r\nwho do it for love)</p>\r\n<p>\"影响力\"</p>\r\n<h2 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣\"></a>兴趣</h2>\r\n<p>在工作中找到兴趣:</p>\r\n<ul>\r\n<li>今天有没有哪一点比昨天做得更好？</li>\r\n<li>你的技能有没有新的提高？有没有学到新东西？</li>\r\n<li>你的工作或专业对别人有没有帮助？</li>\r\n<li>你周围的人有没有夸奖你？</li>\r\n</ul>\r\n<p>阿兰·巴迪欧在《何为真正生活》中说，\"第一个是当下生活的激情——追求娱乐、快感、一晌贪欢。第二个似乎恰恰相反：追求成功的激情——让自己变得富有，获得权力。这两个内在敌人让他们远离了真正的生活,\r\n让他们认识不到他们自己创造真正的价值. \"</p>\r\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2>\r\n<p>\"我在大时代的潮流里漂来漂去，每一步都是大时代的结果，个人选择很少。新一代年轻人对大时代的起伏与波折感知越来越弱。但在这样的“小时代＇中，其实有丰富多彩的选择.\r\n内卷、躺平、追求自己喜欢的事都是选项，也很精彩。我曾作为特邀嘉宾在斯里兰卡莫拉图瓦大学毕业典礼致辞，演讲的题目是“Development\r\nis the right to\r\nchoose”。我羡慕年轻人拥有“选择＇的权利，这是时代的进步。”</p>\r\n<p>对于已经做出的选择,\r\n与其把时间花在无谓的焦虑上，倒不如把这些东西“轻轻”放下，然后一身轻松地去做自己应该做的事。不能陷入纠结.</p>\r\n<ul>\r\n<li>把影响你抉择的因素罗列成一张“利弊对照表”.\r\n咨询他人的时候也带上这张表.</li>\r\n<li>学会用概率论的方法看问题,\r\n做概率分析时，可以列出“最好的可能”和“最坏的打算”的概率，以帮助自己综合考量。</li>\r\n</ul>\r\n<h2 id=\"沟通\"><a href=\"#沟通\" class=\"headerlink\" title=\"沟通\"></a>沟通</h2>\r\n<h3 id=\"不同意的艺术\"><a href=\"#不同意的艺术\" class=\"headerlink\" title=\"不同意的艺术\"></a>不同意的艺术 :</h3>\r\n<ol type=\"1\">\r\n<li>start with\r\n\"你有这种感觉，我一点也不奇怪。如果我是你，毫无疑问，我的想法也会跟你的一样.\r\n\"</li>\r\n<li>讨论的目的是推动双方的认识和议题的进展，而不是互争输赢的辩论。</li>\r\n<li>保持自信 :\r\n当一个人遇到不同意见最多的时候，也恰恰是他收获最多的时候。</li>\r\n</ol>\r\n<p><a\r\nhref=\"https://zh.wikipedia.org/wiki/Wikipedia:%E5%BB%BA%E8%AE%BE%E6%80%A7%E6%84%8F%E8%A7%81\">建设性意见</a></p>\r\n<h3 id=\"如何更加外向\"><a href=\"#如何更加外向\" class=\"headerlink\" title=\"如何更加外向\"></a>如何更加外向</h3>\r\n<ul>\r\n<li>接受并庆幸你拥有内向的性格</li>\r\n<li>尽量找机会，给自己一些“较外向但又不带来太大压力”的改变。\"可衡量的目标\"\r\n(开会发一次言, 一个月主动交一个朋友)</li>\r\n<li>主动和别人分享有趣的事, 让自己有价值</li>\r\n<li>主动找人讲话时，不要那么在乎“面子”。如果一个人不理睬你，你不会有任何的损失.</li>\r\n</ul>\r\n<h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2>\r\n<p>就算你已经大学毕业，你仍然应该分配相当多的时间来学习，尤其是当你工作在发展得特别快的领域时。</p>\r\n<h2 id=\"毅力\"><a href=\"#毅力\" class=\"headerlink\" title=\"毅力\"></a>毅力</h2>\r\n<p>暂时的挫折会给人极大的困扰和打击。但是，几乎每个行业、每件事情都有大大小小的困难和挫折。如果因此转移兴趣，那么你永远也找不到自己的兴趣。相反，如果能够克服困难，取得进步。那么你就会使兴趣升华，让兴趣不仅包含好奇,\r\n还包含巨大的满足感.</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"自信\"><a href=\"#自信\" class=\"headerlink\" title=\"自信\"></a>自信</h2>\r\n<p>永远相信自己有足够的潜能, 并因此尊重和鼓励自己.</p>\r\n<p>不要因为一些挫折就否定自己, 坚定相信只是暂时的问题,\r\n只要积极改正就是做好.</p>\r\n<p>用具体事例反复 <code>训练</code> 你的大脑, 经过潜意识的每一次思维,\r\n告诉自己你是值得信任的, 你应当为自己自豪, 你必须成为自己最好的啦啦队. (\r\n赛前回忆法 : 赛前回忆最得意的比赛, 和一个特定动作 )</p>\r\n<ol type=\"1\">\r\n<li>不要因为在乎别人的意见而失去自己的想法, \"不同人有不同想法\"\r\n这件事是很正常的, 不一定是谁更对更高级, 记得考虑自己的立场.</li>\r\n<li>有自己的想法和主见. 找到自己的原则, 底线. 当觉得自己对某件事可以\r\n\"不在乎\" 的时候, 那也许正是开始逐渐丧失自我, 丧失自信的时候.</li>\r\n<li>有想法一定要表达出来. 自我表现是对自己最好的鼓励, 看到自己的影响力.\r\n要训练自己形成主见和自信的能力.</li>\r\n<li>学习有自信的人的说话的语气 :\r\n<ul>\r\n<li>多用 \"我认为\" \"我希望\",\r\n少用拖泥带水的词（如也许、可能、会不会、如果</li>\r\n<li>讲话清晰, 用语调音量停顿等强调信息</li>\r\n<li>主动和对方目光接触</li>\r\n<li>表述时不让他人随意打断</li>\r\n<li>不担心听众不尊重自己</li>\r\n</ul></li>\r\n</ol>\r\n<p>了解一个人一般只需要 10 秒钟, 凭直觉.</p>\r\n<p>自信的人总能不断地从自己身上找到前进的动力, 总能发挥出自己的潜能.</p>\r\n<h2 id=\"勇气\"><a href=\"#勇气\" class=\"headerlink\" title=\"勇气\"></a>勇气</h2>\r\n<p>对于一个毕业生来说，机会远比安稳更重要，事业远比金钱更重要，未来远比今天更重要。过早地固定在一个职业上也许才是人生的最大不幸。继续学习,\r\n为了理想和兴趣, 为了充分面对这个迅速变化的世界, 不要害怕犯错.</p>\r\n<h2 id=\"宽容\"><a href=\"#宽容\" class=\"headerlink\" title=\"宽容\"></a>宽容</h2>\r\n<p>值得为了别人的过失, 而付出自己不快乐的代价吗</p>\r\n<p>\"我不同意你, 但我支持你\"</p>\r\n<h2 id=\"自律和自觉\"><a href=\"#自律和自觉\" class=\"headerlink\" title=\"自律和自觉\"></a>自律和自觉</h2>\r\n<p>自觉不只是认识自己的潜能、素质，还包括认识自己的感情、态度。自觉的人知道自己何时会有喜、怒、哀、乐的表现，也明白喜、怒、哀、乐的宣泄会造成怎样的后果。</p>\r\n<p>人的感情是最富有感染力的，你完全可以用有建设性的、宽容的态度与他人沟通并影响他人。</p>\r\n<p>每个人对别人的判断都会受到自己主观因素的影响，不一定完全公正.</p>\r\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2>\r\n<p>一套要有明确的远期、中期和近期目标,\r\n还有拥有一个稳定的、鼓舞人心的价值观或信念.</p>\r\n<p>可度量, 结果导向, 时间限制</p>\r\n<p>不要轻易改变自己的目标，不要因为困惑和犹豫与一个又一个成功的机会失之交臂！</p>\r\n<ul>\r\n<li>保护自己的时间, 不要被破事分割</li>\r\n<li>利用高效时间, 要把握一天中20％的精华时间</li>\r\n<li>给自己一个合理的最后期限</li>\r\n</ul>\r\n<h2 id=\"理想\"><a href=\"#理想\" class=\"headerlink\" title=\"理想\"></a>理想</h2>\r\n<p>只有那些从事真心喜爱的人，才会得到真正的财富（Money comes to those\r\nwho do it for love)</p>\r\n<p>\"影响力\"</p>\r\n<h2 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣\"></a>兴趣</h2>\r\n<p>在工作中找到兴趣:</p>\r\n<ul>\r\n<li>今天有没有哪一点比昨天做得更好？</li>\r\n<li>你的技能有没有新的提高？有没有学到新东西？</li>\r\n<li>你的工作或专业对别人有没有帮助？</li>\r\n<li>你周围的人有没有夸奖你？</li>\r\n</ul>\r\n<p>阿兰·巴迪欧在《何为真正生活》中说，\"第一个是当下生活的激情——追求娱乐、快感、一晌贪欢。第二个似乎恰恰相反：追求成功的激情——让自己变得富有，获得权力。这两个内在敌人让他们远离了真正的生活,\r\n让他们认识不到他们自己创造真正的价值. \"</p>\r\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2>\r\n<p>\"我在大时代的潮流里漂来漂去，每一步都是大时代的结果，个人选择很少。新一代年轻人对大时代的起伏与波折感知越来越弱。但在这样的“小时代＇中，其实有丰富多彩的选择.\r\n内卷、躺平、追求自己喜欢的事都是选项，也很精彩。我曾作为特邀嘉宾在斯里兰卡莫拉图瓦大学毕业典礼致辞，演讲的题目是“Development\r\nis the right to\r\nchoose”。我羡慕年轻人拥有“选择＇的权利，这是时代的进步。”</p>\r\n<p>对于已经做出的选择,\r\n与其把时间花在无谓的焦虑上，倒不如把这些东西“轻轻”放下，然后一身轻松地去做自己应该做的事。不能陷入纠结.</p>\r\n<ul>\r\n<li>把影响你抉择的因素罗列成一张“利弊对照表”.\r\n咨询他人的时候也带上这张表.</li>\r\n<li>学会用概率论的方法看问题,\r\n做概率分析时，可以列出“最好的可能”和“最坏的打算”的概率，以帮助自己综合考量。</li>\r\n</ul>\r\n<h2 id=\"沟通\"><a href=\"#沟通\" class=\"headerlink\" title=\"沟通\"></a>沟通</h2>\r\n<h3 id=\"不同意的艺术\"><a href=\"#不同意的艺术\" class=\"headerlink\" title=\"不同意的艺术\"></a>不同意的艺术 :</h3>\r\n<ol type=\"1\">\r\n<li>start with\r\n\"你有这种感觉，我一点也不奇怪。如果我是你，毫无疑问，我的想法也会跟你的一样.\r\n\"</li>\r\n<li>讨论的目的是推动双方的认识和议题的进展，而不是互争输赢的辩论。</li>\r\n<li>保持自信 :\r\n当一个人遇到不同意见最多的时候，也恰恰是他收获最多的时候。</li>\r\n</ol>\r\n<p><a\r\nhref=\"https://zh.wikipedia.org/wiki/Wikipedia:%E5%BB%BA%E8%AE%BE%E6%80%A7%E6%84%8F%E8%A7%81\">建设性意见</a></p>\r\n<h3 id=\"如何更加外向\"><a href=\"#如何更加外向\" class=\"headerlink\" title=\"如何更加外向\"></a>如何更加外向</h3>\r\n<ul>\r\n<li>接受并庆幸你拥有内向的性格</li>\r\n<li>尽量找机会，给自己一些“较外向但又不带来太大压力”的改变。\"可衡量的目标\"\r\n(开会发一次言, 一个月主动交一个朋友)</li>\r\n<li>主动和别人分享有趣的事, 让自己有价值</li>\r\n<li>主动找人讲话时，不要那么在乎“面子”。如果一个人不理睬你，你不会有任何的损失.</li>\r\n</ul>\r\n<h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2>\r\n<p>就算你已经大学毕业，你仍然应该分配相当多的时间来学习，尤其是当你工作在发展得特别快的领域时。</p>\r\n<h2 id=\"毅力\"><a href=\"#毅力\" class=\"headerlink\" title=\"毅力\"></a>毅力</h2>\r\n<p>暂时的挫折会给人极大的困扰和打击。但是，几乎每个行业、每件事情都有大大小小的困难和挫折。如果因此转移兴趣，那么你永远也找不到自己的兴趣。相反，如果能够克服困难，取得进步。那么你就会使兴趣升华，让兴趣不仅包含好奇,\r\n还包含巨大的满足感.</p>\r\n"},{"title":"How Google Works","data":"2025-01-19T16:00:00.000Z","hidden":false,"_content":"\n- 求突破，而非渐变\n- 创业精英 -> 独立项目的首席执行官\n- 如果某行业产品的主要要素的成本曲线下降，那么该行业必将会出现剧变。 ->  提供出类拔萃的产品 > 掌握信息，垄断渠道，强力营销\n- 创业精英不拘泥于特定的任务，也不惧怕冒险，多领域能力 -> 自由发挥\n- 乐于说“好”\n- 只看平台（流量），不看产品（当前的收入）\n- 不要被竞争对手牵着鼻子走，”如果你的工作只是击败那些和你套路基本相当的公司，那又何谈乐趣呢“\n- 以科技洞见为基础\n- 对招聘的重视\n- 为了让员工大展身手，公司情愿自我调整\n- 人才流失会造成连锁反应\n- 把内推作为员工考核的一项\n- 电梯演讲\n- 如果都想得一样，那就是有人没有思考。\n- 改变他人需要让他感觉到观点得到倾听和重视，给予情感支持\n- 马背原则：不要为1%的风险停留太久（创新企业只有50%符合规范），把马勒住（而不是下马）打量周围情况\n- OKR基本目标+重点指标\n- 共享一切，保证员工对公司的总体了解\n- 当面谈话是最重要的沟通方式，增加共同话题来引起谈话\n- 一件事需要重复大约20遍才能让人认真听进去，不同的表述方法，新鲜的例子\n- 第一追随者原则，做一件事，有第一个追随者后，其他追随者就会蜂拥而上，增加追随者出现的概率\n- 你想得不够大\n- 修改创意而不是放弃创意，许多伟大的发明的最终用途与最初设想都天差地别\n","source":"_posts/阅读笔记/How Google Works.md","raw":"---\ntitle: How Google Works\ndata: 2025-01-20\ntags:\n  - 阅读笔记\nhidden: false\n---\n\n- 求突破，而非渐变\n- 创业精英 -> 独立项目的首席执行官\n- 如果某行业产品的主要要素的成本曲线下降，那么该行业必将会出现剧变。 ->  提供出类拔萃的产品 > 掌握信息，垄断渠道，强力营销\n- 创业精英不拘泥于特定的任务，也不惧怕冒险，多领域能力 -> 自由发挥\n- 乐于说“好”\n- 只看平台（流量），不看产品（当前的收入）\n- 不要被竞争对手牵着鼻子走，”如果你的工作只是击败那些和你套路基本相当的公司，那又何谈乐趣呢“\n- 以科技洞见为基础\n- 对招聘的重视\n- 为了让员工大展身手，公司情愿自我调整\n- 人才流失会造成连锁反应\n- 把内推作为员工考核的一项\n- 电梯演讲\n- 如果都想得一样，那就是有人没有思考。\n- 改变他人需要让他感觉到观点得到倾听和重视，给予情感支持\n- 马背原则：不要为1%的风险停留太久（创新企业只有50%符合规范），把马勒住（而不是下马）打量周围情况\n- OKR基本目标+重点指标\n- 共享一切，保证员工对公司的总体了解\n- 当面谈话是最重要的沟通方式，增加共同话题来引起谈话\n- 一件事需要重复大约20遍才能让人认真听进去，不同的表述方法，新鲜的例子\n- 第一追随者原则，做一件事，有第一个追随者后，其他追随者就会蜂拥而上，增加追随者出现的概率\n- 你想得不够大\n- 修改创意而不是放弃创意，许多伟大的发明的最终用途与最初设想都天差地别\n","slug":"阅读笔记/How Google Works","published":1,"date":"2025-01-07T15:17:59.779Z","updated":"2025-01-20T04:55:16.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3wg0035p4wvalez14q1","content":"<ul>\r\n<li>求突破，而非渐变</li>\r\n<li>创业精英 -&gt; 独立项目的首席执行官</li>\r\n<li>如果某行业产品的主要要素的成本曲线下降，那么该行业必将会出现剧变。\r\n-&gt; 提供出类拔萃的产品 &gt; 掌握信息，垄断渠道，强力营销</li>\r\n<li>创业精英不拘泥于特定的任务，也不惧怕冒险，多领域能力 -&gt;\r\n自由发挥</li>\r\n<li>乐于说“好”</li>\r\n<li>只看平台（流量），不看产品（当前的收入）</li>\r\n<li>不要被竞争对手牵着鼻子走，”如果你的工作只是击败那些和你套路基本相当的公司，那又何谈乐趣呢“</li>\r\n<li>以科技洞见为基础</li>\r\n<li>对招聘的重视</li>\r\n<li>为了让员工大展身手，公司情愿自我调整</li>\r\n<li>人才流失会造成连锁反应</li>\r\n<li>把内推作为员工考核的一项</li>\r\n<li>电梯演讲</li>\r\n<li>如果都想得一样，那就是有人没有思考。</li>\r\n<li>改变他人需要让他感觉到观点得到倾听和重视，给予情感支持</li>\r\n<li>马背原则：不要为1%的风险停留太久（创新企业只有50%符合规范），把马勒住（而不是下马）打量周围情况</li>\r\n<li>OKR基本目标+重点指标</li>\r\n<li>共享一切，保证员工对公司的总体了解</li>\r\n<li>当面谈话是最重要的沟通方式，增加共同话题来引起谈话</li>\r\n<li>一件事需要重复大约20遍才能让人认真听进去，不同的表述方法，新鲜的例子</li>\r\n<li>第一追随者原则，做一件事，有第一个追随者后，其他追随者就会蜂拥而上，增加追随者出现的概率</li>\r\n<li>你想得不够大</li>\r\n<li>修改创意而不是放弃创意，许多伟大的发明的最终用途与最初设想都天差地别</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<ul>\r\n<li>求突破，而非渐变</li>\r\n<li>创业精英 -&gt; 独立项目的首席执行官</li>\r\n<li>如果某行业产品的主要要素的成本曲线下降，那么该行业必将会出现剧变。\r\n-&gt; 提供出类拔萃的产品 &gt; 掌握信息，垄断渠道，强力营销</li>\r\n<li>创业精英不拘泥于特定的任务，也不惧怕冒险，多领域能力 -&gt;\r\n自由发挥</li>\r\n<li>乐于说“好”</li>\r\n<li>只看平台（流量），不看产品（当前的收入）</li>\r\n<li>不要被竞争对手牵着鼻子走，”如果你的工作只是击败那些和你套路基本相当的公司，那又何谈乐趣呢“</li>\r\n<li>以科技洞见为基础</li>\r\n<li>对招聘的重视</li>\r\n<li>为了让员工大展身手，公司情愿自我调整</li>\r\n<li>人才流失会造成连锁反应</li>\r\n<li>把内推作为员工考核的一项</li>\r\n<li>电梯演讲</li>\r\n<li>如果都想得一样，那就是有人没有思考。</li>\r\n<li>改变他人需要让他感觉到观点得到倾听和重视，给予情感支持</li>\r\n<li>马背原则：不要为1%的风险停留太久（创新企业只有50%符合规范），把马勒住（而不是下马）打量周围情况</li>\r\n<li>OKR基本目标+重点指标</li>\r\n<li>共享一切，保证员工对公司的总体了解</li>\r\n<li>当面谈话是最重要的沟通方式，增加共同话题来引起谈话</li>\r\n<li>一件事需要重复大约20遍才能让人认真听进去，不同的表述方法，新鲜的例子</li>\r\n<li>第一追随者原则，做一件事，有第一个追随者后，其他追随者就会蜂拥而上，增加追随者出现的概率</li>\r\n<li>你想得不够大</li>\r\n<li>修改创意而不是放弃创意，许多伟大的发明的最终用途与最初设想都天差地别</li>\r\n</ul>\r\n"},{"title":"Go","data":"2024-04-30T16:00:00.000Z","_content":"## Todo\n### 1. 游标，文档流\n\n```go\n// 查找多个文档返回一个光标\n// 遍历游标允许我们一次解码一个文档\nfor cur.Next(context.TODO()) {\n\t// 创建一个值，将单个文档解码为该值\n\tvar elem Student\n\terr := cur.Decode(&elem)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tresults = append(results, &elem)\n}\n```\n\n### 2. 池化技术\n### 3. 数据库\n### 4. google论文\nthe tail at scale\n\n## 基本语法\n### itoa\nhttps://www.jb51.net/article/257413.htm\n行计数器\n### 数组\n可以直接通过\\==比较运算符来比较两个数组\n### 切片\nt:=x[m:n]的t的地址还是原x的地址\n因为slice值包含指向第一个slice元素的指针，因此向函数传递slice将允许在函数内部修改底层数组的元素。换句话说，复制一个slice只是对底层的数组创建了一个新的slice别名（§2.3.2）\n容量和长度\n```\nfmt.Println(summer[:20]) // panic: out of range \nendlessSummer := summer[:5] // extend a slice (within capacity) and the value is original slice\n```\n我们不能确认append时在原先的slice上的操作是否会影响到新的slice。因此，通常是将append返回的结果直接赋值给输入的slice变量：\n\n`runes = append(runes, r) // avoid changing original slice, so we change original variable` \n\n因为我们一开始就知道names的最终大小，因此给slice分配一个合适的大小将会更有效。下面的代码创建了一个空的slice，但是slice的容量刚好可以放下map中全部的key：\n\n`names := make([]string, 0, len(ages))`\n\n### for range 中赋值问题\n如果要改变其中的结构，要用t[i]\n```go\ntype T struct {\n  A int\n  B string\n}\nfunc main() {\n  t := []T{{1, \"a\"}, {2, \"b\"}}\n  fmt.Println(t)\n  for i, v := range t {\n    fmt.Printf(\"%p %p\\n\", &v, &t[i]) // 地址不同\n    v.A = 3\n  }\n}\n```\n### rune\n在Go中，`rune` 是一个内置类型，代表一个 Unicode 码点，也就是一个 Unicode 字符。\n\n### map\n`if age, ok := ages[\"bob\"]; !ok { /* ... */ }`\nok 键是否真的存在于map中\n\n### struct\n点操作符也可以和指向结构体的指针一起工作\n\n如果结构体成员名字是以大写字母开头的，那么该成员就是导出的\n\n如果要在函数内部修改结构体成员的话，用指针传入是必须的；因为在Go语言中，所有的函数参数都是值拷贝传入的，函数参数将不再是函数调用时的原始变量。slice是因为它的值就是指针。\n\n需要注意的是Printf函数中%v参数包含的#副词，它表示用和Go语言类似的语法打印值。对于结构体类型来说，将包含每个成员的名字。\n\n`json.Marshal(movies)`\n`data, err := json.MarshalIndent(movies, \"\", \" \")`\n\n结构体的成员Tag可以是任意的字符串面值，但是通常是一系列用空格分隔的key:\"value\"键值对序列；\n`Year int\" \"json:\\\"released\\\"\"` \n`Color bool \"json:\\\"color,omitempty\\\"\"`\n`json.Unmarshal(data, &titles)`\n\n## 错误处理\n### 传播错误到父亲函数\n\n```go\nif err != nil { return nil, fmt.Errorf(\"parsing %s as HTML: %v\", url,err) }\n```\n由于错误信息经常是以链式组合在一起的，所以错误信息中应避免大写和换行符。\n\n在Go中，错误处理有一套独特的编码风格。检查某个子函数是否失败后，我们通常将处理失败的逻辑代码放在处理成功的代码之前。如果某个错误会导致函数返回，那么成功时的逻辑代码不应放在else语句块中，而应直接放在函数体中。Go中大部分函数的代码结构几乎相同，首先是一系列的初始检查，防止错误发生，之后是函数的实际逻辑。\n\n## defer\n所以，对匿名函数采用defer机制，可以使其观察函数的返回值。\n`func double(x int) (result int) { defer func() { fmt.Printf(\"double(%d) = %d\\n\", x,result) }() return x + x }`\n被延迟执行的匿名函数可以修改函数返回给调用者的所有返回值：\n\n## 包和文件\n默认的包名就是包导入路径名的最后一段，因此即使两个包的导入路径不同，它们依然可能有一个相同的包名。\n```\nimport (\n    \"crypto/rand\"\n    mrand \"math/rand\" // alternative name mrand avoids conflict\n)\n```\n\n指定当前工作目录 GOPATH\n```\n$ export GOPATH=$HOME/gobook\n$ go get gopl.io/...\n```\n\npkg子目录用于保存编译后的包的目标文件，bin子目录用于保存编译后的可执行程序，例如helloworld可执行程序。\n## 读整个文件\n```\nioutil.ReadFile(filename)\n```\n`ReadFile`函数返回一个字节切片（byte slice），必须把它转换为`string`\n## 接口\n接口的动态类型和动态值\n非空接口可能类型不空而值为nil，可能在一个函数内外变量为nil的定义不同\n```go\nvar p *int\nfmt.Println(p==nil)\nf(p) //func f(p interface{}) {fmt.Println(p==nil)}\n```\n\n### 接口与方法\n问题：cannot convert v (variable of type data.Up) to type data.Vgroup: data.Up does not implement data.Vgroup (method GetVideo has pointer receiver) 方法不能是指针\nhttps://chenhe.me/post/pointer-and-interface-in-go#%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%9C%AC%E8%B4%A8\n- `Book` 与 `*Book` 是两个完全不同的类型。\n- 值接收器的方法隐式地同时被声明为指针类型的方法。反之**不**成立。\n- 接口的实现不一定是结构体，而可能是任意类型。\n- 可以认为接口的值相当于接口的一个实例。把一个接口的实现赋值给接口变量，接口的值不是实现的值，是类型和实现值的指针\n\n断言：\n- 一个类型断言检查它操作对象的动态类型是否和断言的类型匹配\n- 一个接口类型的类型断言改变了类型的表述方式，改变了可以获取的方法集合（通常更大），但是它保留了接口值内部的动态类型和值的部分。\n## json解析\n结构的属性名必须大写\n```go\nvar data struct {\n\tCode int `json:\"code\"`\n\t// not: code int\n}\nerr := json.Unmarshal([]byte(`{ \"code\": 901 }`), &data)\nfmt.Printf(\"%#v\\n%v\", data, err)\n```\n\n## 测试\n### 单元测试\nhttps://juejin.cn/post/7172037988950474759\n- 以 `_test.go` 为后缀名， 单独通过 go test 来编译并执行\n- `func TestName(t *testing.T)`\n- `{source_filename}_test.go`\n- `t.Error, t.Errorf, t.Fatal(+f), t.Fail, t.Log(+f)`\n- `--cover` 代码覆盖率\n### Mock\n对有调库，文件输入，网络传输的代码的单元测试\n打桩：函数替换\n![](Pasted%20image%2020241104185053.png|)\n### 性能测试\n![](Pasted%20image%2020241104185451.png)\n\n## string和int转换\n- strconv.Atoi(strval)\n- strconv.Itoa(intval)\n## 判断类型\n```go\nfunc justifyType(x interface{}) {\n    switch v := x.(type) {\n    case string:\n        fmt.Printf(\"x is a string，value is %v\\n\", v)\n    case int:\n        fmt.Printf(\"x is a int is %v\\n\", v)\n    case bool:\n        fmt.Printf(\"x is a bool is %v\\n\", v)\n    default:\n        fmt.Println(\"unsupport type！\")\n    }\n}\n```\n## 编译\nmain包里的所有用到的文件都要编译运行\n\n## 匿名函数引用外部变量\n```go\nfor _, f := range filenames {\n\tgo func(f string) {\n\t\tthumbnail.ImageFile(f) // NOTE: ignoring errors \n\t}(f)\n}\n\n// 错误！\nfor _, f := range filenames {\n\tgo func() {\n\t\tthumbnail.ImageFile(f) // NOTE: incorrect! // ... \n\t}() \n}\n// gorutine执行函数时 f 可能已经变了\n```\n## Go 版本管理\ngopath 此电脑/用户下载依赖的位置\n`go mod init` 初始化此模块，用于定位此项目，包括包与包之间的引用\n`go mod tidy` 下载所需，删除不需\ngo proxy 把github等上的包拉取下来，作为备份和缓存\n\nstruct{}类型当占位符\n\n## 性能优化\n### pprof\n```\nimport ( \n\t_ \"net/http/pprof\" \n\t// 会自动注册 handler 到 http server，方便通过 http 接口获取程序运行采样报告\n)\nfunc main() { \n\truntime.GOMAXPROCS(1) // 限制 CPU 使用数，避免过载\n\truntime.SetMutexProfileFraction(1) // 开启对锁调用的跟踪 \n\truntime.SetBlockProfileRate(1) // 开启对阻塞操作的跟踪 \n\tgo func() { \n\t\t// 启动一个 http server，注意 pprof 相关的 handler 已经自动注册过了 \n\t\tif err := http.ListenAndServe(\":6060\", nil); err != nil { \n\t\t\tlog.Fatal(err) \n\t\t} \n\t\tos.Exit(0) \n\t}() \n}\n```\n\n基本命令：\n`go tool pprof -http=:8080 \"http://localhost:6060/debug/pprof/XXX\"`\n\nXXX改为：\n- profile ：cpu占用，火焰图等\n- heap：内存\n- allocs：申请内存，可能引起频繁 GC\n- goroutine：申请协程过多\n- mutex：锁的争用的阻塞\n- block：阻塞\n\n优化之后 -> 改动前后响应数据diff\nhttps://farmerchillax.github.io/2023/07/04/Go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/\n\n## 火焰图\nhttps://www.ruanyifeng.com/blog/2017/09/flame-graph.html\ny轴调用栈\n平顶 -> 性能问题\n\n## GC\nhttps://zhuanlan.zhihu.com/p/334999060\n三色标记法：同bfs，黑色是已经遍历，灰色是在队列中，白色是未遍历（可能不可达）\n弱三色不变式：不允许“从灰色对象出发，到达白色对象的、未经访问过的路径被赋值器破坏”，允许“赋值器修改对象图，导致某一黑色对象引用白色对象“\n插入屏障：在A对象引用B对象的时候，B对象被标记为灰色。\n删除屏障：被删除的对象，如果自身为灰色或者白色，那么被标记为灰色。\n混合写屏障：为了消除栈的重扫过程（栈上的很容易被删除），一旦栈被扫描变为黑色，则它会继续保持黑色， 并要求将对象分配为黑色。\n- GC 开始将栈上的对象全部扫描并标记为黑色；\n- GC 期间，任何在栈上创建的新对象，均为黑色；\n- 被删除的堆对象标记为灰色；\n- 被添加的堆对象标记为灰色；\n## [逃逸分析](https://geektutu.com/post/hpg-escape-analysis.html)\n逃逸分析：分析这个变量需不需要放到堆上，降低效率但是保证函数ret后还在\n情况有：指针逃逸，interface{}动态类型逃逸，栈空间不足，闭包\n\n## GMP模型\nG：goroutine\nM：工作线程（OS thread），它直接对应于操作系统的线程。M负责实际执行Go代码。一个M可以执行多个Goroutine，但同一时间只能执行一个Goroutine\nP：执行Go代码所需的资源\n\n## DataBase\n![](Pasted%20image%2020241106215030.png)\n![](Pasted%20image%2020241106225845.png)\n\n## 指针切片\n```\nusers := []*User{\n\t{Name: \"Jinzhu\", Age: 18, Birthday: time.Now()},\n\t{Name: \"Jackson\", Age: 19, Birthday: time.Now()},\n}\n```\n\n","source":"_posts/语言/Go.md","raw":"---\ntitle: Go\ndata: 2024-05-01\ntags:\n  - 后端\n  - Go\n  - 语言学习\n---\n## Todo\n### 1. 游标，文档流\n\n```go\n// 查找多个文档返回一个光标\n// 遍历游标允许我们一次解码一个文档\nfor cur.Next(context.TODO()) {\n\t// 创建一个值，将单个文档解码为该值\n\tvar elem Student\n\terr := cur.Decode(&elem)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tresults = append(results, &elem)\n}\n```\n\n### 2. 池化技术\n### 3. 数据库\n### 4. google论文\nthe tail at scale\n\n## 基本语法\n### itoa\nhttps://www.jb51.net/article/257413.htm\n行计数器\n### 数组\n可以直接通过\\==比较运算符来比较两个数组\n### 切片\nt:=x[m:n]的t的地址还是原x的地址\n因为slice值包含指向第一个slice元素的指针，因此向函数传递slice将允许在函数内部修改底层数组的元素。换句话说，复制一个slice只是对底层的数组创建了一个新的slice别名（§2.3.2）\n容量和长度\n```\nfmt.Println(summer[:20]) // panic: out of range \nendlessSummer := summer[:5] // extend a slice (within capacity) and the value is original slice\n```\n我们不能确认append时在原先的slice上的操作是否会影响到新的slice。因此，通常是将append返回的结果直接赋值给输入的slice变量：\n\n`runes = append(runes, r) // avoid changing original slice, so we change original variable` \n\n因为我们一开始就知道names的最终大小，因此给slice分配一个合适的大小将会更有效。下面的代码创建了一个空的slice，但是slice的容量刚好可以放下map中全部的key：\n\n`names := make([]string, 0, len(ages))`\n\n### for range 中赋值问题\n如果要改变其中的结构，要用t[i]\n```go\ntype T struct {\n  A int\n  B string\n}\nfunc main() {\n  t := []T{{1, \"a\"}, {2, \"b\"}}\n  fmt.Println(t)\n  for i, v := range t {\n    fmt.Printf(\"%p %p\\n\", &v, &t[i]) // 地址不同\n    v.A = 3\n  }\n}\n```\n### rune\n在Go中，`rune` 是一个内置类型，代表一个 Unicode 码点，也就是一个 Unicode 字符。\n\n### map\n`if age, ok := ages[\"bob\"]; !ok { /* ... */ }`\nok 键是否真的存在于map中\n\n### struct\n点操作符也可以和指向结构体的指针一起工作\n\n如果结构体成员名字是以大写字母开头的，那么该成员就是导出的\n\n如果要在函数内部修改结构体成员的话，用指针传入是必须的；因为在Go语言中，所有的函数参数都是值拷贝传入的，函数参数将不再是函数调用时的原始变量。slice是因为它的值就是指针。\n\n需要注意的是Printf函数中%v参数包含的#副词，它表示用和Go语言类似的语法打印值。对于结构体类型来说，将包含每个成员的名字。\n\n`json.Marshal(movies)`\n`data, err := json.MarshalIndent(movies, \"\", \" \")`\n\n结构体的成员Tag可以是任意的字符串面值，但是通常是一系列用空格分隔的key:\"value\"键值对序列；\n`Year int\" \"json:\\\"released\\\"\"` \n`Color bool \"json:\\\"color,omitempty\\\"\"`\n`json.Unmarshal(data, &titles)`\n\n## 错误处理\n### 传播错误到父亲函数\n\n```go\nif err != nil { return nil, fmt.Errorf(\"parsing %s as HTML: %v\", url,err) }\n```\n由于错误信息经常是以链式组合在一起的，所以错误信息中应避免大写和换行符。\n\n在Go中，错误处理有一套独特的编码风格。检查某个子函数是否失败后，我们通常将处理失败的逻辑代码放在处理成功的代码之前。如果某个错误会导致函数返回，那么成功时的逻辑代码不应放在else语句块中，而应直接放在函数体中。Go中大部分函数的代码结构几乎相同，首先是一系列的初始检查，防止错误发生，之后是函数的实际逻辑。\n\n## defer\n所以，对匿名函数采用defer机制，可以使其观察函数的返回值。\n`func double(x int) (result int) { defer func() { fmt.Printf(\"double(%d) = %d\\n\", x,result) }() return x + x }`\n被延迟执行的匿名函数可以修改函数返回给调用者的所有返回值：\n\n## 包和文件\n默认的包名就是包导入路径名的最后一段，因此即使两个包的导入路径不同，它们依然可能有一个相同的包名。\n```\nimport (\n    \"crypto/rand\"\n    mrand \"math/rand\" // alternative name mrand avoids conflict\n)\n```\n\n指定当前工作目录 GOPATH\n```\n$ export GOPATH=$HOME/gobook\n$ go get gopl.io/...\n```\n\npkg子目录用于保存编译后的包的目标文件，bin子目录用于保存编译后的可执行程序，例如helloworld可执行程序。\n## 读整个文件\n```\nioutil.ReadFile(filename)\n```\n`ReadFile`函数返回一个字节切片（byte slice），必须把它转换为`string`\n## 接口\n接口的动态类型和动态值\n非空接口可能类型不空而值为nil，可能在一个函数内外变量为nil的定义不同\n```go\nvar p *int\nfmt.Println(p==nil)\nf(p) //func f(p interface{}) {fmt.Println(p==nil)}\n```\n\n### 接口与方法\n问题：cannot convert v (variable of type data.Up) to type data.Vgroup: data.Up does not implement data.Vgroup (method GetVideo has pointer receiver) 方法不能是指针\nhttps://chenhe.me/post/pointer-and-interface-in-go#%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%9C%AC%E8%B4%A8\n- `Book` 与 `*Book` 是两个完全不同的类型。\n- 值接收器的方法隐式地同时被声明为指针类型的方法。反之**不**成立。\n- 接口的实现不一定是结构体，而可能是任意类型。\n- 可以认为接口的值相当于接口的一个实例。把一个接口的实现赋值给接口变量，接口的值不是实现的值，是类型和实现值的指针\n\n断言：\n- 一个类型断言检查它操作对象的动态类型是否和断言的类型匹配\n- 一个接口类型的类型断言改变了类型的表述方式，改变了可以获取的方法集合（通常更大），但是它保留了接口值内部的动态类型和值的部分。\n## json解析\n结构的属性名必须大写\n```go\nvar data struct {\n\tCode int `json:\"code\"`\n\t// not: code int\n}\nerr := json.Unmarshal([]byte(`{ \"code\": 901 }`), &data)\nfmt.Printf(\"%#v\\n%v\", data, err)\n```\n\n## 测试\n### 单元测试\nhttps://juejin.cn/post/7172037988950474759\n- 以 `_test.go` 为后缀名， 单独通过 go test 来编译并执行\n- `func TestName(t *testing.T)`\n- `{source_filename}_test.go`\n- `t.Error, t.Errorf, t.Fatal(+f), t.Fail, t.Log(+f)`\n- `--cover` 代码覆盖率\n### Mock\n对有调库，文件输入，网络传输的代码的单元测试\n打桩：函数替换\n![](Pasted%20image%2020241104185053.png|)\n### 性能测试\n![](Pasted%20image%2020241104185451.png)\n\n## string和int转换\n- strconv.Atoi(strval)\n- strconv.Itoa(intval)\n## 判断类型\n```go\nfunc justifyType(x interface{}) {\n    switch v := x.(type) {\n    case string:\n        fmt.Printf(\"x is a string，value is %v\\n\", v)\n    case int:\n        fmt.Printf(\"x is a int is %v\\n\", v)\n    case bool:\n        fmt.Printf(\"x is a bool is %v\\n\", v)\n    default:\n        fmt.Println(\"unsupport type！\")\n    }\n}\n```\n## 编译\nmain包里的所有用到的文件都要编译运行\n\n## 匿名函数引用外部变量\n```go\nfor _, f := range filenames {\n\tgo func(f string) {\n\t\tthumbnail.ImageFile(f) // NOTE: ignoring errors \n\t}(f)\n}\n\n// 错误！\nfor _, f := range filenames {\n\tgo func() {\n\t\tthumbnail.ImageFile(f) // NOTE: incorrect! // ... \n\t}() \n}\n// gorutine执行函数时 f 可能已经变了\n```\n## Go 版本管理\ngopath 此电脑/用户下载依赖的位置\n`go mod init` 初始化此模块，用于定位此项目，包括包与包之间的引用\n`go mod tidy` 下载所需，删除不需\ngo proxy 把github等上的包拉取下来，作为备份和缓存\n\nstruct{}类型当占位符\n\n## 性能优化\n### pprof\n```\nimport ( \n\t_ \"net/http/pprof\" \n\t// 会自动注册 handler 到 http server，方便通过 http 接口获取程序运行采样报告\n)\nfunc main() { \n\truntime.GOMAXPROCS(1) // 限制 CPU 使用数，避免过载\n\truntime.SetMutexProfileFraction(1) // 开启对锁调用的跟踪 \n\truntime.SetBlockProfileRate(1) // 开启对阻塞操作的跟踪 \n\tgo func() { \n\t\t// 启动一个 http server，注意 pprof 相关的 handler 已经自动注册过了 \n\t\tif err := http.ListenAndServe(\":6060\", nil); err != nil { \n\t\t\tlog.Fatal(err) \n\t\t} \n\t\tos.Exit(0) \n\t}() \n}\n```\n\n基本命令：\n`go tool pprof -http=:8080 \"http://localhost:6060/debug/pprof/XXX\"`\n\nXXX改为：\n- profile ：cpu占用，火焰图等\n- heap：内存\n- allocs：申请内存，可能引起频繁 GC\n- goroutine：申请协程过多\n- mutex：锁的争用的阻塞\n- block：阻塞\n\n优化之后 -> 改动前后响应数据diff\nhttps://farmerchillax.github.io/2023/07/04/Go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/\n\n## 火焰图\nhttps://www.ruanyifeng.com/blog/2017/09/flame-graph.html\ny轴调用栈\n平顶 -> 性能问题\n\n## GC\nhttps://zhuanlan.zhihu.com/p/334999060\n三色标记法：同bfs，黑色是已经遍历，灰色是在队列中，白色是未遍历（可能不可达）\n弱三色不变式：不允许“从灰色对象出发，到达白色对象的、未经访问过的路径被赋值器破坏”，允许“赋值器修改对象图，导致某一黑色对象引用白色对象“\n插入屏障：在A对象引用B对象的时候，B对象被标记为灰色。\n删除屏障：被删除的对象，如果自身为灰色或者白色，那么被标记为灰色。\n混合写屏障：为了消除栈的重扫过程（栈上的很容易被删除），一旦栈被扫描变为黑色，则它会继续保持黑色， 并要求将对象分配为黑色。\n- GC 开始将栈上的对象全部扫描并标记为黑色；\n- GC 期间，任何在栈上创建的新对象，均为黑色；\n- 被删除的堆对象标记为灰色；\n- 被添加的堆对象标记为灰色；\n## [逃逸分析](https://geektutu.com/post/hpg-escape-analysis.html)\n逃逸分析：分析这个变量需不需要放到堆上，降低效率但是保证函数ret后还在\n情况有：指针逃逸，interface{}动态类型逃逸，栈空间不足，闭包\n\n## GMP模型\nG：goroutine\nM：工作线程（OS thread），它直接对应于操作系统的线程。M负责实际执行Go代码。一个M可以执行多个Goroutine，但同一时间只能执行一个Goroutine\nP：执行Go代码所需的资源\n\n## DataBase\n![](Pasted%20image%2020241106215030.png)\n![](Pasted%20image%2020241106225845.png)\n\n## 指针切片\n```\nusers := []*User{\n\t{Name: \"Jinzhu\", Age: 18, Birthday: time.Now()},\n\t{Name: \"Jackson\", Age: 19, Birthday: time.Now()},\n}\n```\n\n","slug":"语言/Go","published":1,"date":"2024-05-15T21:31:31.719Z","updated":"2024-11-10T06:19:29.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3wg0036p4wv49bw300y","content":"<h2 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>Todo</h2>\r\n<h3 id=\"游标文档流\"><a href=\"#游标文档流\" class=\"headerlink\" title=\"游标文档流\"></a>1. 游标，文档流</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 查找多个文档返回一个光标</span><br><span class=\"hljs-comment\">// 遍历游标允许我们一次解码一个文档</span><br><span class=\"hljs-keyword\">for</span> cur.Next(context.TODO()) &#123;<br>\t<span class=\"hljs-comment\">// 创建一个值，将单个文档解码为该值</span><br>\t<span class=\"hljs-keyword\">var</span> elem Student<br>\terr := cur.Decode(&amp;elem)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatal(err)<br>\t&#125;<br>\tresults = <span class=\"hljs-built_in\">append</span>(results, &amp;elem)<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"池化技术\"><a href=\"#池化技术\" class=\"headerlink\" title=\"池化技术\"></a>2. 池化技术</h3>\r\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>3. 数据库</h3>\r\n<h3 id=\"google论文\"><a href=\"#google论文\" class=\"headerlink\" title=\"google论文\"></a>4. google论文</h3>\r\n<p>the tail at scale</p>\r\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2>\r\n<h3 id=\"itoa\"><a href=\"#itoa\" class=\"headerlink\" title=\"itoa\"></a>itoa</h3>\r\n<p>https://www.jb51.net/article/257413.htm 行计数器 ### 数组\r\n可以直接通过==比较运算符来比较两个数组 ### 切片\r\nt:=x[m:n]的t的地址还是原x的地址\r\n因为slice值包含指向第一个slice元素的指针，因此向函数传递slice将允许在函数内部修改底层数组的元素。换句话说，复制一个slice只是对底层的数组创建了一个新的slice别名（§2.3.2）\r\n容量和长度 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">fmt.Println(summer[:20]) // panic: out of range <br>endlessSummer := summer[:5] // extend a slice (within capacity) and the value is original slice<br></code></pre></td></tr></table></figure>\r\n我们不能确认append时在原先的slice上的操作是否会影响到新的slice。因此，通常是将append返回的结果直接赋值给输入的slice变量：</p>\r\n<p><code>runes = append(runes, r) // avoid changing original slice, so we change original variable</code></p>\r\n<p>因为我们一开始就知道names的最终大小，因此给slice分配一个合适的大小将会更有效。下面的代码创建了一个空的slice，但是slice的容量刚好可以放下map中全部的key：</p>\r\n<p><code>names := make([]string, 0, len(ages))</code></p>\r\n<h3 id=\"for-range-中赋值问题\"><a href=\"#for-range-中赋值问题\" class=\"headerlink\" title=\"for-range-中赋值问题\"></a>for range 中赋值问题</h3>\r\n<p>如果要改变其中的结构，要用t[i] <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> T <span class=\"hljs-keyword\">struct</span> &#123;<br>  A <span class=\"hljs-type\">int</span><br>  B <span class=\"hljs-type\">string</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>  t := []T&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;a&quot;</span>&#125;, &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;b&quot;</span>&#125;&#125;<br>  fmt.Println(t)<br>  <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> t &#123;<br>    fmt.Printf(<span class=\"hljs-string\">&quot;%p %p\\n&quot;</span>, &amp;v, &amp;t[i]) <span class=\"hljs-comment\">// 地址不同</span><br>    v.A = <span class=\"hljs-number\">3</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure> ### rune\r\n在Go中，<code>rune</code> 是一个内置类型，代表一个 Unicode\r\n码点，也就是一个 Unicode 字符。</p>\r\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3>\r\n<p><code>if age, ok := ages[\"bob\"]; !ok &#123; /* ... */ &#125;</code> ok\r\n键是否真的存在于map中</p>\r\n<h3 id=\"struct\"><a href=\"#struct\" class=\"headerlink\" title=\"struct\"></a>struct</h3>\r\n<p>点操作符也可以和指向结构体的指针一起工作</p>\r\n<p>如果结构体成员名字是以大写字母开头的，那么该成员就是导出的</p>\r\n<p>如果要在函数内部修改结构体成员的话，用指针传入是必须的；因为在Go语言中，所有的函数参数都是值拷贝传入的，函数参数将不再是函数调用时的原始变量。slice是因为它的值就是指针。</p>\r\n<p>需要注意的是Printf函数中%v参数包含的#副词，它表示用和Go语言类似的语法打印值。对于结构体类型来说，将包含每个成员的名字。</p>\r\n<p><code>json.Marshal(movies)</code>\r\n<code>data, err := json.MarshalIndent(movies, \"\", \" \")</code></p>\r\n<p>结构体的成员Tag可以是任意的字符串面值，但是通常是一系列用空格分隔的key:\"value\"键值对序列；\r\n<code>Year int\" \"json:\\\"released\\\"\"</code>\r\n<code>Color bool \"json:\\\"color,omitempty\\\"\"</code>\r\n<code>json.Unmarshal(data, &amp;titles)</code></p>\r\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2>\r\n<h3 id=\"传播错误到父亲函数\"><a href=\"#传播错误到父亲函数\" class=\"headerlink\" title=\"传播错误到父亲函数\"></a>传播错误到父亲函数</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;parsing %s as HTML: %v&quot;</span>, url,err) &#125;<br></code></pre></td></tr></table></figure>\r\n<p>由于错误信息经常是以链式组合在一起的，所以错误信息中应避免大写和换行符。</p>\r\n<p>在Go中，错误处理有一套独特的编码风格。检查某个子函数是否失败后，我们通常将处理失败的逻辑代码放在处理成功的代码之前。如果某个错误会导致函数返回，那么成功时的逻辑代码不应放在else语句块中，而应直接放在函数体中。Go中大部分函数的代码结构几乎相同，首先是一系列的初始检查，防止错误发生，之后是函数的实际逻辑。</p>\r\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2>\r\n<p>所以，对匿名函数采用defer机制，可以使其观察函数的返回值。\r\n<code>func double(x int) (result int) &#123; defer func() &#123; fmt.Printf(\"double(%d) = %d\\n\", x,result) &#125;() return x + x &#125;</code>\r\n被延迟执行的匿名函数可以修改函数返回给调用者的所有返回值：</p>\r\n<h2 id=\"包和文件\"><a href=\"#包和文件\" class=\"headerlink\" title=\"包和文件\"></a>包和文件</h2>\r\n<p>默认的包名就是包导入路径名的最后一段，因此即使两个包的导入路径不同，它们依然可能有一个相同的包名。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">import (<br>    &quot;crypto/rand&quot;<br>    mrand &quot;math/rand&quot; // alternative name mrand avoids conflict<br>)<br></code></pre></td></tr></table></figure></p>\r\n<p>指定当前工作目录 GOPATH <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ export GOPATH=$HOME/gobook<br>$ go get gopl.io/...<br></code></pre></td></tr></table></figure></p>\r\n<p>pkg子目录用于保存编译后的包的目标文件，bin子目录用于保存编译后的可执行程序，例如helloworld可执行程序。\r\n## 读整个文件 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">ioutil.ReadFile(filename)<br></code></pre></td></tr></table></figure>\r\n<code>ReadFile</code>函数返回一个字节切片（byte\r\nslice），必须把它转换为<code>string</code> ## 接口\r\n接口的动态类型和动态值\r\n非空接口可能类型不空而值为nil，可能在一个函数内外变量为nil的定义不同\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> p *<span class=\"hljs-type\">int</span><br>fmt.Println(p==<span class=\"hljs-literal\">nil</span>)<br>f(p) <span class=\"hljs-comment\">//func f(p interface&#123;&#125;) &#123;fmt.Println(p==nil)&#125;</span><br></code></pre></td></tr></table></figure></p>\r\n<h3 id=\"接口与方法\"><a href=\"#接口与方法\" class=\"headerlink\" title=\"接口与方法\"></a>接口与方法</h3>\r\n<p>问题：cannot convert v (variable of type data.Up) to type\r\ndata.Vgroup: data.Up does not implement data.Vgroup (method GetVideo has\r\npointer receiver) 方法不能是指针\r\nhttps://chenhe.me/post/pointer-and-interface-in-go#%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%9C%AC%E8%B4%A8\r\n- <code>Book</code> 与 <code>*Book</code> 是两个完全不同的类型。 -\r\n值接收器的方法隐式地同时被声明为指针类型的方法。反之<strong>不</strong>成立。\r\n- 接口的实现不一定是结构体，而可能是任意类型。 -\r\n可以认为接口的值相当于接口的一个实例。把一个接口的实现赋值给接口变量，接口的值不是实现的值，是类型和实现值的指针</p>\r\n<p>断言： - 一个类型断言检查它操作对象的动态类型是否和断言的类型匹配 -\r\n一个接口类型的类型断言改变了类型的表述方式，改变了可以获取的方法集合（通常更大），但是它保留了接口值内部的动态类型和值的部分。\r\n## json解析 结构的属性名必须大写 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> data <span class=\"hljs-keyword\">struct</span> &#123;<br>\tCode <span class=\"hljs-type\">int</span> <span class=\"hljs-string\">`json:&quot;code&quot;`</span><br>\t<span class=\"hljs-comment\">// not: code int</span><br>&#125;<br>err := json.Unmarshal([]<span class=\"hljs-type\">byte</span>(<span class=\"hljs-string\">`&#123; &quot;code&quot;: 901 &#125;`</span>), &amp;data)<br>fmt.Printf(<span class=\"hljs-string\">&quot;%#v\\n%v&quot;</span>, data, err)<br></code></pre></td></tr></table></figure></p>\r\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\r\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3>\r\n<p>https://juejin.cn/post/7172037988950474759 -\r\n以 <code>_test.go</code> 为后缀名， 单独通过 go test 来编译并执行 -\r\n<code>func TestName(t *testing.T)</code> -\r\n<code>&#123;source_filename&#125;_test.go</code> -\r\n<code>t.Error, t.Errorf, t.Fatal(+f), t.Fail, t.Log(+f)</code> -\r\n<code>--cover</code> 代码覆盖率 ### Mock\r\n对有调库，文件输入，网络传输的代码的单元测试 打桩：函数替换 <img\r\nsrc=\"Pasted%20image%2020241104185053.png%7C\" /> ### 性能测试 <img\r\nsrc=\"Pasted%20image%2020241104185451.png\" /></p>\r\n<h2 id=\"string和int转换\"><a href=\"#string和int转换\" class=\"headerlink\" title=\"string和int转换\"></a>string和int转换</h2>\r\n<ul>\r\n<li>strconv.Atoi(strval)</li>\r\n<li>strconv.Itoa(intval) ## 判断类型 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">justifyType</span><span class=\"hljs-params\">(x <span class=\"hljs-keyword\">interface</span>&#123;&#125;)</span></span> &#123;<br>    <span class=\"hljs-keyword\">switch</span> v := x.(<span class=\"hljs-keyword\">type</span>) &#123;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">string</span>:<br>        fmt.Printf(<span class=\"hljs-string\">&quot;x is a string，value is %v\\n&quot;</span>, v)<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">int</span>:<br>        fmt.Printf(<span class=\"hljs-string\">&quot;x is a int is %v\\n&quot;</span>, v)<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">bool</span>:<br>        fmt.Printf(<span class=\"hljs-string\">&quot;x is a bool is %v\\n&quot;</span>, v)<br>    <span class=\"hljs-keyword\">default</span>:<br>        fmt.Println(<span class=\"hljs-string\">&quot;unsupport type！&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> ## 编译\r\nmain包里的所有用到的文件都要编译运行</li>\r\n</ul>\r\n<h2 id=\"匿名函数引用外部变量\"><a href=\"#匿名函数引用外部变量\" class=\"headerlink\" title=\"匿名函数引用外部变量\"></a>匿名函数引用外部变量</h2>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">for</span> _, f := <span class=\"hljs-keyword\">range</span> filenames &#123;<br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(f <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t\tthumbnail.ImageFile(f) <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> ignoring errors </span><br>\t&#125;(f)<br>&#125;<br><br><span class=\"hljs-comment\">// 错误！</span><br><span class=\"hljs-keyword\">for</span> _, f := <span class=\"hljs-keyword\">range</span> filenames &#123;<br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tthumbnail.ImageFile(f) <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> incorrect! // ... </span><br>\t&#125;() <br>&#125;<br><span class=\"hljs-comment\">// gorutine执行函数时 f 可能已经变了</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"go-版本管理\"><a href=\"#go-版本管理\" class=\"headerlink\" title=\"go-版本管理\"></a>Go 版本管理</h2>\r\n<p>gopath 此电脑/用户下载依赖的位置 <code>go mod init</code>\r\n初始化此模块，用于定位此项目，包括包与包之间的引用\r\n<code>go mod tidy</code> 下载所需，删除不需 go proxy\r\n把github等上的包拉取下来，作为备份和缓存</p>\r\n<p>struct{}类型当占位符</p>\r\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2>\r\n<h3 id=\"pprof\"><a href=\"#pprof\" class=\"headerlink\" title=\"pprof\"></a>pprof</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">import ( <br>\t_ &quot;net/http/pprof&quot; <br>\t// 会自动注册 handler 到 http server，方便通过 http 接口获取程序运行采样报告<br>)<br>func main() &#123; <br>\truntime.GOMAXPROCS(1) // 限制 CPU 使用数，避免过载<br>\truntime.SetMutexProfileFraction(1) // 开启对锁调用的跟踪 <br>\truntime.SetBlockProfileRate(1) // 开启对阻塞操作的跟踪 <br>\tgo func() &#123; <br>\t\t// 启动一个 http server，注意 pprof 相关的 handler 已经自动注册过了 <br>\t\tif err := http.ListenAndServe(&quot;:6060&quot;, nil); err != nil &#123; <br>\t\t\tlog.Fatal(err) <br>\t\t&#125; <br>\t\tos.Exit(0) <br>\t&#125;() <br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>基本命令：\r\n<code>go tool pprof -http=:8080 \"http://localhost:6060/debug/pprof/XXX\"</code></p>\r\n<p>XXX改为： - profile ：cpu占用，火焰图等 - heap：内存 -\r\nallocs：申请内存，可能引起频繁 GC - goroutine：申请协程过多 -\r\nmutex：锁的争用的阻塞 - block：阻塞</p>\r\n<p>优化之后 -&gt; 改动前后响应数据diff\r\nhttps://farmerchillax.github.io/2023/07/04/Go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</p>\r\n<h2 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h2>\r\n<p>https://www.ruanyifeng.com/blog/2017/09/flame-graph.html y轴调用栈\r\n平顶 -&gt; 性能问题</p>\r\n<h2 id=\"gc\"><a href=\"#gc\" class=\"headerlink\" title=\"gc\"></a>GC</h2>\r\n<p>https://zhuanlan.zhihu.com/p/334999060\r\n三色标记法：同bfs，黑色是已经遍历，灰色是在队列中，白色是未遍历（可能不可达）\r\n弱三色不变式：不允许“从灰色对象出发，到达白色对象的、未经访问过的路径被赋值器破坏”，允许“赋值器修改对象图，导致某一黑色对象引用白色对象“\r\n插入屏障：在A对象引用B对象的时候，B对象被标记为灰色。\r\n删除屏障：被删除的对象，如果自身为灰色或者白色，那么被标记为灰色。\r\n混合写屏障：为了消除栈的重扫过程（栈上的很容易被删除），一旦栈被扫描变为黑色，则它会继续保持黑色，\r\n并要求将对象分配为黑色。 - GC 开始将栈上的对象全部扫描并标记为黑色； -\r\nGC 期间，任何在栈上创建的新对象，均为黑色； - 被删除的堆对象标记为灰色；\r\n- 被添加的堆对象标记为灰色； ## <a\r\nhref=\"https://geektutu.com/post/hpg-escape-analysis.html\">逃逸分析</a>\r\n逃逸分析：分析这个变量需不需要放到堆上，降低效率但是保证函数ret后还在\r\n情况有：指针逃逸，interface{}动态类型逃逸，栈空间不足，闭包</p>\r\n<h2 id=\"gmp模型\"><a href=\"#gmp模型\" class=\"headerlink\" title=\"gmp模型\"></a>GMP模型</h2>\r\n<p>G：goroutine M：工作线程（OS\r\nthread），它直接对应于操作系统的线程。M负责实际执行Go代码。一个M可以执行多个Goroutine，但同一时间只能执行一个Goroutine\r\nP：执行Go代码所需的资源</p>\r\n<h2 id=\"database\"><a href=\"#database\" class=\"headerlink\" title=\"database\"></a>DataBase</h2>\r\n<p class='item-img' data-src='Pasted%20image%2020241106215030.png'><img src=\"Pasted%20image%2020241106215030.png\" /> <img\r\nsrc=\"Pasted%20image%2020241106225845.png\" /></p>\r\n<h2 id=\"指针切片\"><a href=\"#指针切片\" class=\"headerlink\" title=\"指针切片\"></a>指针切片</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">users := []*User&#123;<br>\t&#123;Name: &quot;Jinzhu&quot;, Age: 18, Birthday: time.Now()&#125;,<br>\t&#123;Name: &quot;Jackson&quot;, Age: 19, Birthday: time.Now()&#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>Todo</h2>\r\n<h3 id=\"游标文档流\"><a href=\"#游标文档流\" class=\"headerlink\" title=\"游标文档流\"></a>1. 游标，文档流</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// 查找多个文档返回一个光标</span><br><span class=\"hljs-comment\">// 遍历游标允许我们一次解码一个文档</span><br><span class=\"hljs-keyword\">for</span> cur.Next(context.TODO()) &#123;<br>\t<span class=\"hljs-comment\">// 创建一个值，将单个文档解码为该值</span><br>\t<span class=\"hljs-keyword\">var</span> elem Student<br>\terr := cur.Decode(&amp;elem)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatal(err)<br>\t&#125;<br>\tresults = <span class=\"hljs-built_in\">append</span>(results, &amp;elem)<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"池化技术\"><a href=\"#池化技术\" class=\"headerlink\" title=\"池化技术\"></a>2. 池化技术</h3>\r\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>3. 数据库</h3>\r\n<h3 id=\"google论文\"><a href=\"#google论文\" class=\"headerlink\" title=\"google论文\"></a>4. google论文</h3>\r\n<p>the tail at scale</p>\r\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2>\r\n<h3 id=\"itoa\"><a href=\"#itoa\" class=\"headerlink\" title=\"itoa\"></a>itoa</h3>\r\n<p>https://www.jb51.net/article/257413.htm 行计数器 ### 数组\r\n可以直接通过==比较运算符来比较两个数组 ### 切片\r\nt:=x[m:n]的t的地址还是原x的地址\r\n因为slice值包含指向第一个slice元素的指针，因此向函数传递slice将允许在函数内部修改底层数组的元素。换句话说，复制一个slice只是对底层的数组创建了一个新的slice别名（§2.3.2）\r\n容量和长度 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">fmt.Println(summer[:20]) // panic: out of range <br>endlessSummer := summer[:5] // extend a slice (within capacity) and the value is original slice<br></code></pre></td></tr></table></figure>\r\n我们不能确认append时在原先的slice上的操作是否会影响到新的slice。因此，通常是将append返回的结果直接赋值给输入的slice变量：</p>\r\n<p><code>runes = append(runes, r) // avoid changing original slice, so we change original variable</code></p>\r\n<p>因为我们一开始就知道names的最终大小，因此给slice分配一个合适的大小将会更有效。下面的代码创建了一个空的slice，但是slice的容量刚好可以放下map中全部的key：</p>\r\n<p><code>names := make([]string, 0, len(ages))</code></p>\r\n<h3 id=\"for-range-中赋值问题\"><a href=\"#for-range-中赋值问题\" class=\"headerlink\" title=\"for-range-中赋值问题\"></a>for range 中赋值问题</h3>\r\n<p>如果要改变其中的结构，要用t[i] <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> T <span class=\"hljs-keyword\">struct</span> &#123;<br>  A <span class=\"hljs-type\">int</span><br>  B <span class=\"hljs-type\">string</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>  t := []T&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;a&quot;</span>&#125;, &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;b&quot;</span>&#125;&#125;<br>  fmt.Println(t)<br>  <span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> t &#123;<br>    fmt.Printf(<span class=\"hljs-string\">&quot;%p %p\\n&quot;</span>, &amp;v, &amp;t[i]) <span class=\"hljs-comment\">// 地址不同</span><br>    v.A = <span class=\"hljs-number\">3</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure> ### rune\r\n在Go中，<code>rune</code> 是一个内置类型，代表一个 Unicode\r\n码点，也就是一个 Unicode 字符。</p>\r\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3>\r\n<p><code>if age, ok := ages[\"bob\"]; !ok &#123; /* ... */ &#125;</code> ok\r\n键是否真的存在于map中</p>\r\n<h3 id=\"struct\"><a href=\"#struct\" class=\"headerlink\" title=\"struct\"></a>struct</h3>\r\n<p>点操作符也可以和指向结构体的指针一起工作</p>\r\n<p>如果结构体成员名字是以大写字母开头的，那么该成员就是导出的</p>\r\n<p>如果要在函数内部修改结构体成员的话，用指针传入是必须的；因为在Go语言中，所有的函数参数都是值拷贝传入的，函数参数将不再是函数调用时的原始变量。slice是因为它的值就是指针。</p>\r\n<p>需要注意的是Printf函数中%v参数包含的#副词，它表示用和Go语言类似的语法打印值。对于结构体类型来说，将包含每个成员的名字。</p>\r\n<p><code>json.Marshal(movies)</code>\r\n<code>data, err := json.MarshalIndent(movies, \"\", \" \")</code></p>\r\n<p>结构体的成员Tag可以是任意的字符串面值，但是通常是一系列用空格分隔的key:\"value\"键值对序列；\r\n<code>Year int\" \"json:\\\"released\\\"\"</code>\r\n<code>Color bool \"json:\\\"color,omitempty\\\"\"</code>\r\n<code>json.Unmarshal(data, &amp;titles)</code></p>\r\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2>\r\n<h3 id=\"传播错误到父亲函数\"><a href=\"#传播错误到父亲函数\" class=\"headerlink\" title=\"传播错误到父亲函数\"></a>传播错误到父亲函数</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;parsing %s as HTML: %v&quot;</span>, url,err) &#125;<br></code></pre></td></tr></table></figure>\r\n<p>由于错误信息经常是以链式组合在一起的，所以错误信息中应避免大写和换行符。</p>\r\n<p>在Go中，错误处理有一套独特的编码风格。检查某个子函数是否失败后，我们通常将处理失败的逻辑代码放在处理成功的代码之前。如果某个错误会导致函数返回，那么成功时的逻辑代码不应放在else语句块中，而应直接放在函数体中。Go中大部分函数的代码结构几乎相同，首先是一系列的初始检查，防止错误发生，之后是函数的实际逻辑。</p>\r\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2>\r\n<p>所以，对匿名函数采用defer机制，可以使其观察函数的返回值。\r\n<code>func double(x int) (result int) &#123; defer func() &#123; fmt.Printf(\"double(%d) = %d\\n\", x,result) &#125;() return x + x &#125;</code>\r\n被延迟执行的匿名函数可以修改函数返回给调用者的所有返回值：</p>\r\n<h2 id=\"包和文件\"><a href=\"#包和文件\" class=\"headerlink\" title=\"包和文件\"></a>包和文件</h2>\r\n<p>默认的包名就是包导入路径名的最后一段，因此即使两个包的导入路径不同，它们依然可能有一个相同的包名。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">import (<br>    &quot;crypto/rand&quot;<br>    mrand &quot;math/rand&quot; // alternative name mrand avoids conflict<br>)<br></code></pre></td></tr></table></figure></p>\r\n<p>指定当前工作目录 GOPATH <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">$ export GOPATH=$HOME/gobook<br>$ go get gopl.io/...<br></code></pre></td></tr></table></figure></p>\r\n<p>pkg子目录用于保存编译后的包的目标文件，bin子目录用于保存编译后的可执行程序，例如helloworld可执行程序。\r\n## 读整个文件 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">ioutil.ReadFile(filename)<br></code></pre></td></tr></table></figure>\r\n<code>ReadFile</code>函数返回一个字节切片（byte\r\nslice），必须把它转换为<code>string</code> ## 接口\r\n接口的动态类型和动态值\r\n非空接口可能类型不空而值为nil，可能在一个函数内外变量为nil的定义不同\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> p *<span class=\"hljs-type\">int</span><br>fmt.Println(p==<span class=\"hljs-literal\">nil</span>)<br>f(p) <span class=\"hljs-comment\">//func f(p interface&#123;&#125;) &#123;fmt.Println(p==nil)&#125;</span><br></code></pre></td></tr></table></figure></p>\r\n<h3 id=\"接口与方法\"><a href=\"#接口与方法\" class=\"headerlink\" title=\"接口与方法\"></a>接口与方法</h3>\r\n<p>问题：cannot convert v (variable of type data.Up) to type\r\ndata.Vgroup: data.Up does not implement data.Vgroup (method GetVideo has\r\npointer receiver) 方法不能是指针\r\nhttps://chenhe.me/post/pointer-and-interface-in-go#%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%9C%AC%E8%B4%A8\r\n- <code>Book</code> 与 <code>*Book</code> 是两个完全不同的类型。 -\r\n值接收器的方法隐式地同时被声明为指针类型的方法。反之<strong>不</strong>成立。\r\n- 接口的实现不一定是结构体，而可能是任意类型。 -\r\n可以认为接口的值相当于接口的一个实例。把一个接口的实现赋值给接口变量，接口的值不是实现的值，是类型和实现值的指针</p>\r\n<p>断言： - 一个类型断言检查它操作对象的动态类型是否和断言的类型匹配 -\r\n一个接口类型的类型断言改变了类型的表述方式，改变了可以获取的方法集合（通常更大），但是它保留了接口值内部的动态类型和值的部分。\r\n## json解析 结构的属性名必须大写 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> data <span class=\"hljs-keyword\">struct</span> &#123;<br>\tCode <span class=\"hljs-type\">int</span> <span class=\"hljs-string\">`json:&quot;code&quot;`</span><br>\t<span class=\"hljs-comment\">// not: code int</span><br>&#125;<br>err := json.Unmarshal([]<span class=\"hljs-type\">byte</span>(<span class=\"hljs-string\">`&#123; &quot;code&quot;: 901 &#125;`</span>), &amp;data)<br>fmt.Printf(<span class=\"hljs-string\">&quot;%#v\\n%v&quot;</span>, data, err)<br></code></pre></td></tr></table></figure></p>\r\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\r\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3>\r\n<p>https://juejin.cn/post/7172037988950474759 -\r\n以 <code>_test.go</code> 为后缀名， 单独通过 go test 来编译并执行 -\r\n<code>func TestName(t *testing.T)</code> -\r\n<code>&#123;source_filename&#125;_test.go</code> -\r\n<code>t.Error, t.Errorf, t.Fatal(+f), t.Fail, t.Log(+f)</code> -\r\n<code>--cover</code> 代码覆盖率 ### Mock\r\n对有调库，文件输入，网络传输的代码的单元测试 打桩：函数替换 <img\r\nsrc=\"Pasted%20image%2020241104185053.png%7C\" /> ### 性能测试 <img\r\nsrc=\"Pasted%20image%2020241104185451.png\" /></p>\r\n<h2 id=\"string和int转换\"><a href=\"#string和int转换\" class=\"headerlink\" title=\"string和int转换\"></a>string和int转换</h2>\r\n<ul>\r\n<li>strconv.Atoi(strval)</li>\r\n<li>strconv.Itoa(intval) ## 判断类型 <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">justifyType</span><span class=\"hljs-params\">(x <span class=\"hljs-keyword\">interface</span>&#123;&#125;)</span></span> &#123;<br>    <span class=\"hljs-keyword\">switch</span> v := x.(<span class=\"hljs-keyword\">type</span>) &#123;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">string</span>:<br>        fmt.Printf(<span class=\"hljs-string\">&quot;x is a string，value is %v\\n&quot;</span>, v)<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">int</span>:<br>        fmt.Printf(<span class=\"hljs-string\">&quot;x is a int is %v\\n&quot;</span>, v)<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">bool</span>:<br>        fmt.Printf(<span class=\"hljs-string\">&quot;x is a bool is %v\\n&quot;</span>, v)<br>    <span class=\"hljs-keyword\">default</span>:<br>        fmt.Println(<span class=\"hljs-string\">&quot;unsupport type！&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> ## 编译\r\nmain包里的所有用到的文件都要编译运行</li>\r\n</ul>\r\n<h2 id=\"匿名函数引用外部变量\"><a href=\"#匿名函数引用外部变量\" class=\"headerlink\" title=\"匿名函数引用外部变量\"></a>匿名函数引用外部变量</h2>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">for</span> _, f := <span class=\"hljs-keyword\">range</span> filenames &#123;<br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(f <span class=\"hljs-type\">string</span>)</span></span> &#123;<br>\t\tthumbnail.ImageFile(f) <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> ignoring errors </span><br>\t&#125;(f)<br>&#125;<br><br><span class=\"hljs-comment\">// 错误！</span><br><span class=\"hljs-keyword\">for</span> _, f := <span class=\"hljs-keyword\">range</span> filenames &#123;<br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tthumbnail.ImageFile(f) <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> incorrect! // ... </span><br>\t&#125;() <br>&#125;<br><span class=\"hljs-comment\">// gorutine执行函数时 f 可能已经变了</span><br></code></pre></td></tr></table></figure>\r\n<h2 id=\"go-版本管理\"><a href=\"#go-版本管理\" class=\"headerlink\" title=\"go-版本管理\"></a>Go 版本管理</h2>\r\n<p>gopath 此电脑/用户下载依赖的位置 <code>go mod init</code>\r\n初始化此模块，用于定位此项目，包括包与包之间的引用\r\n<code>go mod tidy</code> 下载所需，删除不需 go proxy\r\n把github等上的包拉取下来，作为备份和缓存</p>\r\n<p>struct{}类型当占位符</p>\r\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2>\r\n<h3 id=\"pprof\"><a href=\"#pprof\" class=\"headerlink\" title=\"pprof\"></a>pprof</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">import ( <br>\t_ &quot;net/http/pprof&quot; <br>\t// 会自动注册 handler 到 http server，方便通过 http 接口获取程序运行采样报告<br>)<br>func main() &#123; <br>\truntime.GOMAXPROCS(1) // 限制 CPU 使用数，避免过载<br>\truntime.SetMutexProfileFraction(1) // 开启对锁调用的跟踪 <br>\truntime.SetBlockProfileRate(1) // 开启对阻塞操作的跟踪 <br>\tgo func() &#123; <br>\t\t// 启动一个 http server，注意 pprof 相关的 handler 已经自动注册过了 <br>\t\tif err := http.ListenAndServe(&quot;:6060&quot;, nil); err != nil &#123; <br>\t\t\tlog.Fatal(err) <br>\t\t&#125; <br>\t\tos.Exit(0) <br>\t&#125;() <br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>基本命令：\r\n<code>go tool pprof -http=:8080 \"http://localhost:6060/debug/pprof/XXX\"</code></p>\r\n<p>XXX改为： - profile ：cpu占用，火焰图等 - heap：内存 -\r\nallocs：申请内存，可能引起频繁 GC - goroutine：申请协程过多 -\r\nmutex：锁的争用的阻塞 - block：阻塞</p>\r\n<p>优化之后 -&gt; 改动前后响应数据diff\r\nhttps://farmerchillax.github.io/2023/07/04/Go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</p>\r\n<h2 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h2>\r\n<p>https://www.ruanyifeng.com/blog/2017/09/flame-graph.html y轴调用栈\r\n平顶 -&gt; 性能问题</p>\r\n<h2 id=\"gc\"><a href=\"#gc\" class=\"headerlink\" title=\"gc\"></a>GC</h2>\r\n<p>https://zhuanlan.zhihu.com/p/334999060\r\n三色标记法：同bfs，黑色是已经遍历，灰色是在队列中，白色是未遍历（可能不可达）\r\n弱三色不变式：不允许“从灰色对象出发，到达白色对象的、未经访问过的路径被赋值器破坏”，允许“赋值器修改对象图，导致某一黑色对象引用白色对象“\r\n插入屏障：在A对象引用B对象的时候，B对象被标记为灰色。\r\n删除屏障：被删除的对象，如果自身为灰色或者白色，那么被标记为灰色。\r\n混合写屏障：为了消除栈的重扫过程（栈上的很容易被删除），一旦栈被扫描变为黑色，则它会继续保持黑色，\r\n并要求将对象分配为黑色。 - GC 开始将栈上的对象全部扫描并标记为黑色； -\r\nGC 期间，任何在栈上创建的新对象，均为黑色； - 被删除的堆对象标记为灰色；\r\n- 被添加的堆对象标记为灰色； ## <a\r\nhref=\"https://geektutu.com/post/hpg-escape-analysis.html\">逃逸分析</a>\r\n逃逸分析：分析这个变量需不需要放到堆上，降低效率但是保证函数ret后还在\r\n情况有：指针逃逸，interface{}动态类型逃逸，栈空间不足，闭包</p>\r\n<h2 id=\"gmp模型\"><a href=\"#gmp模型\" class=\"headerlink\" title=\"gmp模型\"></a>GMP模型</h2>\r\n<p>G：goroutine M：工作线程（OS\r\nthread），它直接对应于操作系统的线程。M负责实际执行Go代码。一个M可以执行多个Goroutine，但同一时间只能执行一个Goroutine\r\nP：执行Go代码所需的资源</p>\r\n<h2 id=\"database\"><a href=\"#database\" class=\"headerlink\" title=\"database\"></a>DataBase</h2>\r\n<p><img src=\"Pasted%20image%2020241106215030.png\" /> <img\r\nsrc=\"Pasted%20image%2020241106225845.png\" /></p>\r\n<h2 id=\"指针切片\"><a href=\"#指针切片\" class=\"headerlink\" title=\"指针切片\"></a>指针切片</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">users := []*User&#123;<br>\t&#123;Name: &quot;Jinzhu&quot;, Age: 18, Birthday: time.Now()&#125;,<br>\t&#123;Name: &quot;Jackson&quot;, Age: 19, Birthday: time.Now()&#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\r\n"},{"title":"数学之美学习笔记","date":"2024-02-02T04:20:01.000Z","mathjax":true,"_content":"\n# 《数学之美》读后感\n\n本书在各个方面深入浅出地科普了数学在IT上的应用。虽然我认为其中的数学知识不算太多，因为作者原本的目的也是想让某些IT公司了解到在IT行业做事情的正确方法——重视简单而有效的方法而非凑合。所以我看完本书后数学美不美没看出来，反正计算机是挺美的。基本上是关于人工智能的。\n\n<!-- more -->\n\n本书因为原本是以博客为载体，所以所分成的34章之间没有太大的关联，适合碎片化阅读。其又将难点作为延展阅读分出来，对只想浅层了解的读者很好。\n\n下面展开回顾一下其中的知识和我认为有用的点。\n\n## 自然语言处理\n\n### 语言与通信\n\n作者讲到，语言的本质是为了人类之间的通信，所以所有自然语言处理的问题都可以等效为通信的解码问题。科学家由此发明了基于统计的算法，此方法遥遥领先于基于规则的算法。这种算法找到了语言的本质，把自然语言处理，机器翻译，语音识别等问题都概括成**通信模型**（编码和解码的过程），从而找到又简单又通用的方法。这也让我认识到计算机与人类的本质不同，所以凭直觉地让计算机模仿人类很多是低效的。（基于语法规则和理解文义的算法的失败）\n\n### 统计语言模型\n\n通过计算每句可能的句子的概率（$P(S)$）来生成最有可能的句子。它基于**马尔可夫假设**推出这样一个公式：\n$$\nP(s) = P(w_1,w_2,...,w_n) \\\\\n= P(w_1)*P(w_2|w_1)*P(w_3|(w_2,w_1))*...*P(w_n|(w_1,w_2,...,w_{n-1})) \\\\\n\\approx P(w_1)*P(w_2|w_1)*P(w_3|w_2)*...*P(w_n|w_{n-1})\n$$\n这称为二元模型。当然也有更高阶的模型，但有更大的时间和空间复杂度（ $O(|V|^N)$ ）。统计语言模型只需要在巨大的语料库里统计 $P(a|b),P(a)$ 。\n\n由于统计数据中小概率和零概率事件的可靠性低，所以需要做**平滑过渡处理**。对于未看见的事件，我们需要从总量（100%）中分配很小的比例给它们，根据”越是不可信的统计折扣越多“的方法（**古德-图灵公式**）。高阶模型则会用卡茨退避法。\n\n训练之前还需要进行**噪音过滤**。\n\n### 分词\n\n与上述的模型相似。但需要注意的是，应用不同时汉语分词的**颗粒度**大小时常不同。比如机器翻译的颗粒度应该更大，而搜索引擎的颗粒度应该更小，需要根据所需进行改良。\n\n### 隐马尔可夫模型\n\n它的定义大致是这样（具体定义见维基）：令 $S_n$，$O_n$ 为离散时间随机过程，$S_n$ 是马尔可夫过程（就是一条马尔科夫链，$S_n$ 只与 $S_{n-1}$ 有关，$O_n$ 只与 $S_n$ 有关，$S_n$ 不可观测，$O_n$ 可观测（确定）。因此输出符号的序列（ $Y_n$ ）能够透露出状态序列（ $X_n$ ）的一些信息。公式为\n$$\nP(s_1,s_2,...|o_1,o_2,...)\\\\\n=P(o_1,o_2,...|s_1,s_2,...)*P(s_1,s_2,...)\\div P(o_1,o_2,...)\\\\\n=\\prod_tP(o_t|s_t)*P(s_t|s_{t-1})\n$$\n其在通信模型中的理解就是{O_n}是要解码的序列，{S_n}是解码后得到的序列，我们需要挑出P(s_1,s_2,...|o_1,o_2,...)最大的{S_n}来作为答案。\n\n隐马尔可夫模型的参数可以通过鲍姆-韦尔奇算法得到。它只需要大量{O_n}，是一种无监督的训练方法。大致算法（我理解的）如下：它可以得到生成{O_n}的所有路径和概率，然后通过改变参数使得观测序列出现的概率最大化。具体算法详见[维基百科](https://zh.wikipedia.org/wiki/%E9%B2%8D%E5%A7%86-%E9%9F%A6%E5%B0%94%E5%A5%87%E7%AE%97%E6%B3%95)\n\n此模型非常通用，除自然语言处理之外还有很多问题可以用到这个算法。\n\n## 信息论相关\n\n### 信息熵\n\n信息熵可以度量一个信息的作用，可以理解为在不知道一条信息的情况下提供多少bool信息（是or否）能完全知道它。其计算公式为\n$$\nH(X)=-\\sum_x P(x)logP(x)\n$$\ns为未知量的任意可能状态。\n\n作者还提到了**条件熵**的概念，其公式为\n$$\nH(X|Y)=-\\sum_{x\\in X,y\\in Y} P(x,y)logP(x|y)\n$$\n还有**互信息**（度量两个随机事件的相关性）\n$$\nI(X;Y)=\\sum_{x\\in X,y\\in Y}P(x,y)log\\frac{P(x,y)}{P(x)P(y)}\n$$\n\n## 搜索引擎\n\n### 基本原理\n\n- 自动下载尽可能多的网页（爬虫）\n- 建立索引（基于数据库和布尔运算）\n- 对相关网页排序\n\n### PangRank算法\n\n它的基本原理非常简单，就是“如果一个网页被很多网页所链接，那么它的排名就高”。\n\n其排名的依据应该是每个指向它的网页的排名之和，公式大致为\n$$\nrank(x)=\\sum_{指向x的网页y}rank(y)\n$$\n用矩阵表示就是\n$$\nR=RA\n$$\n其中 $R=(rank_1,rank_2,...)$，$A$ 为以网页为点，超链接为边的邻接矩阵。然后就可以使用迭代的方法。\n\n因为网页数量巨大，还可以使用稀疏矩阵的方法简化计算量。\n\n除此之外，还要进行平滑处理，改进公式如下\n$$\nR_i=[\\frac aN*I+(1-a)A]*R_{i-1}\n$$\n\n### 搜索关键词权重的度量 TF-IDF\n\n在一个网页的关键词中，有的关键词比如‘的’，’应用‘因为非常常见，所以没有那么重要；而有一些关键词比如’TF-IDF‘就非常重要，所以发明了TF-IDF的概念。TF指单文本词频，就是一个词语在这篇文章中的重要性。IDF是逆文本频率指数，它的公式是\n$$\nIDF(w)=log(\\frac{总网页数}{w所出现的网页数})\n$$\n则一个搜索语句和一篇网页的相关性可以用以下公式来度量\n$$\n\\sum_{搜索中的关键词w} TF_w\\cdot IDF_w\n$$\n这其实与信息论的公式很相似。\n\n## 网页权威性计算\n\n与PageRank大致相同，但是用文章内容中的“提及”而不是超链接的指向，而且权威性要分主题。\n\n问题：如何通过描述找到网站，如何区分权威网站和套壳网站？\n\n## 有限状态机\n\n用于地址识别时很有效，因为地址的文法简单，有明显的从属关系。还可以在自动机器人控制，编译器和解释器，网络协议等方面应用。\n\n## 分类\n\n### 特征向量\n\n找到和文章主题相关的所有词语（总TF-IDF高）作为单词库。定义一篇文章的特征向量为它在单词库里的词语的TF-IDF值（注意是相对于这篇文章来说）所组成的向量。则两个向量的相关性可以用它们的夹角的余弦值表示。\n\n那么分类的方法可以用自底向上不断合并，但比较复杂且耗时比较长，而下面一种办法能一步到位。\n\n### 奇异值分解（SVD）\n\nSVD把所有文章的特征向量放在一起，为 $A_{M\\times N}$ 其中M是文章数，N是词数。\n\n奇异值分解可以把A分解为 $X_{M\\times K1}\\cdot B_{K1\\times K2}\\cdot Y_{K2\\times N}$， 其中K1是主题数，K2是语义类数，X是每个文章和每个主题的相关性，Y是词和语义类的相关性，\n\n### 信息指纹和相似哈希\n\n信息指纹用伪随机数产生算法将一段信息压缩成一段数字。可以证明，只要算法足够好，就能保证两个不同信息的指纹相同的概率极小。将一个集合的所有元素的信息指纹相加就能用于集合相同的判定（加法的交换律）。而进行多次随机挑选比较 就是判定两个集合是否基本相同。\n\n而**相似哈希**就是将每个元素的信息指纹按权重（可能是TF-IDF）逐位相加，可以用于度量相关性（差越小相关性越大）（但是应该只能度量 比较相似 和 不相似 吧）。伪代码大致如下：\n\n```c++\nans[j] += (((hash[i]>>j)&1)?1:-1)*w[i];\n```\n\n后面没时间了，简单写写\n\n## RSA算法\n\n$$\nN=P*Q,其中P,Q为选定的很大的素数\\\\\nM=(P-1)*(Q-1)\\\\\n取E满足gcd(E,M)=1\\\\\nD为E的逆元，即E*D \\mod M=1\\\\\n以E为公钥，D为私钥\\\\\n加密：X^E \\mod N=Y\\\\\n解密：Y^D \\mod N=X\\\\\n$$\n\nP，Q很大，所以虽然N是公开的，但是不能知道M。最后两行用到了费马小定理。\n\n## 最大熵原理\n\n在所有可能的概率模型中，熵最大的模型概率最好（不确定性）。（猜测骰子概率）\n\n也可以用于综合多种数据（比如拼音输入法的通用模型和个性化模型）。\n\n公式为（可能？）\n$$\nP(S)=\\frac{e^{\\sum_i f_i(S)\\times \\lambda_i}}{\\sum_S{e^{\\sum_i f_i(S)\\times \\lambda_i}}}\n$$\n\n\n参数 $\\lambda$ 可以用通用迭代算法GIS训练。\n\n## 布隆过滤器\n\n用于判断一个元素是否存在于一个集合里\n\n把一个8字节的url变成8个信息指纹（$\\in [0,16*N]$），存到**一个**大小为16*N的哈希表（桶）里\n\n为啥是16*N呢？因为作者说的哈希表的存储效率只有50%。\n\n保证不会漏，但是可能会多（概率很小）。\n\n## 贝叶斯网络\n\n跟马尔可夫链挺像的，基于”一个状态只由指向它的状态所直接决定。\n\n但不完全一样，边权那里更复杂。\n\n![实例](https://longaspire.github.io/blog/%E9%9D%99%E6%80%81%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/Page42.png)\n\n## 杂记\n\n### 简单有效的东西\n\n作者认为，有的时候简单的算法会比精确而复杂的方法更有效，因为这容易读懂，易维护。而大而全的方法不仅容易因长时间不能完成而不了了之，而且可能会陷入像大圆套小圆那样冗杂的方法中。辛格甚至要求对于改进方法都要有清楚的理由，对于参数和公式都要有合理的物理解释，不然难以改动，容易变成“凑合”的算法。\n\n### 个性化语言模型\n\n一个用户的输入内容有限，可以把输入内容和用语习惯类似的用户合并在一起。（我认为这里信息量增加的原因可能是人类的群居性或者叫做标签化（类似于“人以类聚”）。\n\n### 没看懂的地方\n\n不代表其他都看懂了，只是这些完全没看懂\n\n- 基于变换规则的机器学习方法\n\n- 条件随机场\n\n### 没时间总结的地方\n\n- 码分多址\n\t- 无线电通信相关\n\t- 基于扩频传输\n\t- 多频带，多信息同时传输，用对应地址码解调出相应信号\n- 期望最大化算法\n\t- 可以应用于文本的自收敛分类\n\t\t1. 先随机选K个点作为初始中心\n\t\t2. 将每个点归到最近的中心\n\t\t3. 重新计算每一类的中心\n\t\t4. 一直重复23步，直到同一类中各个点到中心的平均距离d最小，不同类中心之间的平均距离D最大\n- 逻辑回归模型\n\t- 用于把一个数值映射到一个0-1概率上？\n- 人工神经网络\n\t- 输入层，输出层，隐藏层\n\t- 通过边权计算点权 G=f(g(w1,w2,...)) 其中g是线性变换，f是一对一的函数（通常是e^x)\n\t- 通过设计成本函数可以进行无监督训练\n\n- 椭圆曲线加密原理\n","source":"_posts/阅读笔记/数学之美学习笔记.md","raw":"---\ntitle: 数学之美学习笔记\ndate: 2024-02-02 12:20:01\nmathjax: true\ntag:\n  - 总结\n  - 学习笔记\n---\n\n# 《数学之美》读后感\n\n本书在各个方面深入浅出地科普了数学在IT上的应用。虽然我认为其中的数学知识不算太多，因为作者原本的目的也是想让某些IT公司了解到在IT行业做事情的正确方法——重视简单而有效的方法而非凑合。所以我看完本书后数学美不美没看出来，反正计算机是挺美的。基本上是关于人工智能的。\n\n<!-- more -->\n\n本书因为原本是以博客为载体，所以所分成的34章之间没有太大的关联，适合碎片化阅读。其又将难点作为延展阅读分出来，对只想浅层了解的读者很好。\n\n下面展开回顾一下其中的知识和我认为有用的点。\n\n## 自然语言处理\n\n### 语言与通信\n\n作者讲到，语言的本质是为了人类之间的通信，所以所有自然语言处理的问题都可以等效为通信的解码问题。科学家由此发明了基于统计的算法，此方法遥遥领先于基于规则的算法。这种算法找到了语言的本质，把自然语言处理，机器翻译，语音识别等问题都概括成**通信模型**（编码和解码的过程），从而找到又简单又通用的方法。这也让我认识到计算机与人类的本质不同，所以凭直觉地让计算机模仿人类很多是低效的。（基于语法规则和理解文义的算法的失败）\n\n### 统计语言模型\n\n通过计算每句可能的句子的概率（$P(S)$）来生成最有可能的句子。它基于**马尔可夫假设**推出这样一个公式：\n$$\nP(s) = P(w_1,w_2,...,w_n) \\\\\n= P(w_1)*P(w_2|w_1)*P(w_3|(w_2,w_1))*...*P(w_n|(w_1,w_2,...,w_{n-1})) \\\\\n\\approx P(w_1)*P(w_2|w_1)*P(w_3|w_2)*...*P(w_n|w_{n-1})\n$$\n这称为二元模型。当然也有更高阶的模型，但有更大的时间和空间复杂度（ $O(|V|^N)$ ）。统计语言模型只需要在巨大的语料库里统计 $P(a|b),P(a)$ 。\n\n由于统计数据中小概率和零概率事件的可靠性低，所以需要做**平滑过渡处理**。对于未看见的事件，我们需要从总量（100%）中分配很小的比例给它们，根据”越是不可信的统计折扣越多“的方法（**古德-图灵公式**）。高阶模型则会用卡茨退避法。\n\n训练之前还需要进行**噪音过滤**。\n\n### 分词\n\n与上述的模型相似。但需要注意的是，应用不同时汉语分词的**颗粒度**大小时常不同。比如机器翻译的颗粒度应该更大，而搜索引擎的颗粒度应该更小，需要根据所需进行改良。\n\n### 隐马尔可夫模型\n\n它的定义大致是这样（具体定义见维基）：令 $S_n$，$O_n$ 为离散时间随机过程，$S_n$ 是马尔可夫过程（就是一条马尔科夫链，$S_n$ 只与 $S_{n-1}$ 有关，$O_n$ 只与 $S_n$ 有关，$S_n$ 不可观测，$O_n$ 可观测（确定）。因此输出符号的序列（ $Y_n$ ）能够透露出状态序列（ $X_n$ ）的一些信息。公式为\n$$\nP(s_1,s_2,...|o_1,o_2,...)\\\\\n=P(o_1,o_2,...|s_1,s_2,...)*P(s_1,s_2,...)\\div P(o_1,o_2,...)\\\\\n=\\prod_tP(o_t|s_t)*P(s_t|s_{t-1})\n$$\n其在通信模型中的理解就是{O_n}是要解码的序列，{S_n}是解码后得到的序列，我们需要挑出P(s_1,s_2,...|o_1,o_2,...)最大的{S_n}来作为答案。\n\n隐马尔可夫模型的参数可以通过鲍姆-韦尔奇算法得到。它只需要大量{O_n}，是一种无监督的训练方法。大致算法（我理解的）如下：它可以得到生成{O_n}的所有路径和概率，然后通过改变参数使得观测序列出现的概率最大化。具体算法详见[维基百科](https://zh.wikipedia.org/wiki/%E9%B2%8D%E5%A7%86-%E9%9F%A6%E5%B0%94%E5%A5%87%E7%AE%97%E6%B3%95)\n\n此模型非常通用，除自然语言处理之外还有很多问题可以用到这个算法。\n\n## 信息论相关\n\n### 信息熵\n\n信息熵可以度量一个信息的作用，可以理解为在不知道一条信息的情况下提供多少bool信息（是or否）能完全知道它。其计算公式为\n$$\nH(X)=-\\sum_x P(x)logP(x)\n$$\ns为未知量的任意可能状态。\n\n作者还提到了**条件熵**的概念，其公式为\n$$\nH(X|Y)=-\\sum_{x\\in X,y\\in Y} P(x,y)logP(x|y)\n$$\n还有**互信息**（度量两个随机事件的相关性）\n$$\nI(X;Y)=\\sum_{x\\in X,y\\in Y}P(x,y)log\\frac{P(x,y)}{P(x)P(y)}\n$$\n\n## 搜索引擎\n\n### 基本原理\n\n- 自动下载尽可能多的网页（爬虫）\n- 建立索引（基于数据库和布尔运算）\n- 对相关网页排序\n\n### PangRank算法\n\n它的基本原理非常简单，就是“如果一个网页被很多网页所链接，那么它的排名就高”。\n\n其排名的依据应该是每个指向它的网页的排名之和，公式大致为\n$$\nrank(x)=\\sum_{指向x的网页y}rank(y)\n$$\n用矩阵表示就是\n$$\nR=RA\n$$\n其中 $R=(rank_1,rank_2,...)$，$A$ 为以网页为点，超链接为边的邻接矩阵。然后就可以使用迭代的方法。\n\n因为网页数量巨大，还可以使用稀疏矩阵的方法简化计算量。\n\n除此之外，还要进行平滑处理，改进公式如下\n$$\nR_i=[\\frac aN*I+(1-a)A]*R_{i-1}\n$$\n\n### 搜索关键词权重的度量 TF-IDF\n\n在一个网页的关键词中，有的关键词比如‘的’，’应用‘因为非常常见，所以没有那么重要；而有一些关键词比如’TF-IDF‘就非常重要，所以发明了TF-IDF的概念。TF指单文本词频，就是一个词语在这篇文章中的重要性。IDF是逆文本频率指数，它的公式是\n$$\nIDF(w)=log(\\frac{总网页数}{w所出现的网页数})\n$$\n则一个搜索语句和一篇网页的相关性可以用以下公式来度量\n$$\n\\sum_{搜索中的关键词w} TF_w\\cdot IDF_w\n$$\n这其实与信息论的公式很相似。\n\n## 网页权威性计算\n\n与PageRank大致相同，但是用文章内容中的“提及”而不是超链接的指向，而且权威性要分主题。\n\n问题：如何通过描述找到网站，如何区分权威网站和套壳网站？\n\n## 有限状态机\n\n用于地址识别时很有效，因为地址的文法简单，有明显的从属关系。还可以在自动机器人控制，编译器和解释器，网络协议等方面应用。\n\n## 分类\n\n### 特征向量\n\n找到和文章主题相关的所有词语（总TF-IDF高）作为单词库。定义一篇文章的特征向量为它在单词库里的词语的TF-IDF值（注意是相对于这篇文章来说）所组成的向量。则两个向量的相关性可以用它们的夹角的余弦值表示。\n\n那么分类的方法可以用自底向上不断合并，但比较复杂且耗时比较长，而下面一种办法能一步到位。\n\n### 奇异值分解（SVD）\n\nSVD把所有文章的特征向量放在一起，为 $A_{M\\times N}$ 其中M是文章数，N是词数。\n\n奇异值分解可以把A分解为 $X_{M\\times K1}\\cdot B_{K1\\times K2}\\cdot Y_{K2\\times N}$， 其中K1是主题数，K2是语义类数，X是每个文章和每个主题的相关性，Y是词和语义类的相关性，\n\n### 信息指纹和相似哈希\n\n信息指纹用伪随机数产生算法将一段信息压缩成一段数字。可以证明，只要算法足够好，就能保证两个不同信息的指纹相同的概率极小。将一个集合的所有元素的信息指纹相加就能用于集合相同的判定（加法的交换律）。而进行多次随机挑选比较 就是判定两个集合是否基本相同。\n\n而**相似哈希**就是将每个元素的信息指纹按权重（可能是TF-IDF）逐位相加，可以用于度量相关性（差越小相关性越大）（但是应该只能度量 比较相似 和 不相似 吧）。伪代码大致如下：\n\n```c++\nans[j] += (((hash[i]>>j)&1)?1:-1)*w[i];\n```\n\n后面没时间了，简单写写\n\n## RSA算法\n\n$$\nN=P*Q,其中P,Q为选定的很大的素数\\\\\nM=(P-1)*(Q-1)\\\\\n取E满足gcd(E,M)=1\\\\\nD为E的逆元，即E*D \\mod M=1\\\\\n以E为公钥，D为私钥\\\\\n加密：X^E \\mod N=Y\\\\\n解密：Y^D \\mod N=X\\\\\n$$\n\nP，Q很大，所以虽然N是公开的，但是不能知道M。最后两行用到了费马小定理。\n\n## 最大熵原理\n\n在所有可能的概率模型中，熵最大的模型概率最好（不确定性）。（猜测骰子概率）\n\n也可以用于综合多种数据（比如拼音输入法的通用模型和个性化模型）。\n\n公式为（可能？）\n$$\nP(S)=\\frac{e^{\\sum_i f_i(S)\\times \\lambda_i}}{\\sum_S{e^{\\sum_i f_i(S)\\times \\lambda_i}}}\n$$\n\n\n参数 $\\lambda$ 可以用通用迭代算法GIS训练。\n\n## 布隆过滤器\n\n用于判断一个元素是否存在于一个集合里\n\n把一个8字节的url变成8个信息指纹（$\\in [0,16*N]$），存到**一个**大小为16*N的哈希表（桶）里\n\n为啥是16*N呢？因为作者说的哈希表的存储效率只有50%。\n\n保证不会漏，但是可能会多（概率很小）。\n\n## 贝叶斯网络\n\n跟马尔可夫链挺像的，基于”一个状态只由指向它的状态所直接决定。\n\n但不完全一样，边权那里更复杂。\n\n![实例](https://longaspire.github.io/blog/%E9%9D%99%E6%80%81%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/Page42.png)\n\n## 杂记\n\n### 简单有效的东西\n\n作者认为，有的时候简单的算法会比精确而复杂的方法更有效，因为这容易读懂，易维护。而大而全的方法不仅容易因长时间不能完成而不了了之，而且可能会陷入像大圆套小圆那样冗杂的方法中。辛格甚至要求对于改进方法都要有清楚的理由，对于参数和公式都要有合理的物理解释，不然难以改动，容易变成“凑合”的算法。\n\n### 个性化语言模型\n\n一个用户的输入内容有限，可以把输入内容和用语习惯类似的用户合并在一起。（我认为这里信息量增加的原因可能是人类的群居性或者叫做标签化（类似于“人以类聚”）。\n\n### 没看懂的地方\n\n不代表其他都看懂了，只是这些完全没看懂\n\n- 基于变换规则的机器学习方法\n\n- 条件随机场\n\n### 没时间总结的地方\n\n- 码分多址\n\t- 无线电通信相关\n\t- 基于扩频传输\n\t- 多频带，多信息同时传输，用对应地址码解调出相应信号\n- 期望最大化算法\n\t- 可以应用于文本的自收敛分类\n\t\t1. 先随机选K个点作为初始中心\n\t\t2. 将每个点归到最近的中心\n\t\t3. 重新计算每一类的中心\n\t\t4. 一直重复23步，直到同一类中各个点到中心的平均距离d最小，不同类中心之间的平均距离D最大\n- 逻辑回归模型\n\t- 用于把一个数值映射到一个0-1概率上？\n- 人工神经网络\n\t- 输入层，输出层，隐藏层\n\t- 通过边权计算点权 G=f(g(w1,w2,...)) 其中g是线性变换，f是一对一的函数（通常是e^x)\n\t- 通过设计成本函数可以进行无监督训练\n\n- 椭圆曲线加密原理\n","slug":"阅读笔记/数学之美学习笔记","published":1,"updated":"2024-02-23T07:17:13.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3wh0037p4wvb3e1ev7q","content":"<h1 id=\"数学之美读后感\"><a href=\"#数学之美读后感\" class=\"headerlink\" title=\"数学之美读后感\"></a>《数学之美》读后感</h1>\r\n<p>本书在各个方面深入浅出地科普了数学在IT上的应用。虽然我认为其中的数学知识不算太多，因为作者原本的目的也是想让某些IT公司了解到在IT行业做事情的正确方法——重视简单而有效的方法而非凑合。所以我看完本书后数学美不美没看出来，反正计算机是挺美的。基本上是关于人工智能的。</p>\r\n<span id=\"more\"></span>\r\n<p>本书因为原本是以博客为载体，所以所分成的34章之间没有太大的关联，适合碎片化阅读。其又将难点作为延展阅读分出来，对只想浅层了解的读者很好。</p>\r\n<p>下面展开回顾一下其中的知识和我认为有用的点。</p>\r\n<h2 id=\"自然语言处理\"><a href=\"#自然语言处理\" class=\"headerlink\" title=\"自然语言处理\"></a>自然语言处理</h2>\r\n<h3 id=\"语言与通信\"><a href=\"#语言与通信\" class=\"headerlink\" title=\"语言与通信\"></a>语言与通信</h3>\r\n<p>作者讲到，语言的本质是为了人类之间的通信，所以所有自然语言处理的问题都可以等效为通信的解码问题。科学家由此发明了基于统计的算法，此方法遥遥领先于基于规则的算法。这种算法找到了语言的本质，把自然语言处理，机器翻译，语音识别等问题都概括成<strong>通信模型</strong>（编码和解码的过程），从而找到又简单又通用的方法。这也让我认识到计算机与人类的本质不同，所以凭直觉地让计算机模仿人类很多是低效的。（基于语法规则和理解文义的算法的失败）</p>\r\n<h3 id=\"统计语言模型\"><a href=\"#统计语言模型\" class=\"headerlink\" title=\"统计语言模型\"></a>统计语言模型</h3>\r\n<p>通过计算每句可能的句子的概率（<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.919ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2174 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1785,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>）来生成最有可能的句子。它基于<strong>马尔可夫假设</strong>推出这样一个公式：\r\n<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"141.226ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 62422.1 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1609,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2275.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3331.6,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4082.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4471.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5624.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6068.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7221.3,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7666,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8110.7,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8555.3,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9000,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(9444.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(10667.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(11056.9,0)\"></g><g data-mml-node=\"mo\" transform=\"translate(11334.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12390.5,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13141.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(13530.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(14683,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15294.3,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(16016.5,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16767.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(17156.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(18309,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(18587,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(19739.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20350.8,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(21073,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(21824,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(22213,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(23365.6,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(23643.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(24032.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(25185.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(25629.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(26782.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27171.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27560.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(28060.4,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(28505,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(28949.7,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(29394.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(29894.4,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(30645.4,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(31034.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(32257.6,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(32535.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(32924.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(34077.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(34521.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(35674.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(36119.1,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(36563.7,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(37008.4,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(37453.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(37897.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(749,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(600,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1378,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(40024.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(40413.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(40802.7,0)\"></g><g data-mml-node=\"mo\" transform=\"translate(41080.5,0)\"><path data-c=\"2248\" d=\"M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(42136.2,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(42887.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(43276.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(44428.8,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(45040,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(45762.2,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(46513.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(46902.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(48054.8,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(48332.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(49485.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(50096.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(50818.8,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(51569.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(51958.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(53111.3,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(53389.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(54541.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(54930.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(55430.9,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(55875.6,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(56320.2,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(56764.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(57264.9,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(58015.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(58404.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(59628.2,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(59906.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(749,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(600,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1378,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(62033.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>\r\n这称为二元模型。当然也有更高阶的模型，但有更大的时间和空间复杂度（ <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.093ex\" height=\"2.48ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -846 3576.9 1096\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1152,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1430,0)\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2199,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(311,363) scale(0.707)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3187.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>\r\n）。统计语言模型只需要在巨大的语料库里统计 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.918ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5267.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1669,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1947,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2376,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2765,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3209.7,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3960.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4349.7,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4878.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> 。</p>\r\n<p>由于统计数据中小概率和零概率事件的可靠性低，所以需要做<strong>平滑过渡处理</strong>。对于未看见的事件，我们需要从总量（100%）中分配很小的比例给它们，根据”越是不可信的统计折扣越多“的方法（<strong>古德-图灵公式</strong>）。高阶模型则会用卡茨退避法。</p>\r\n<p>训练之前还需要进行<strong>噪音过滤</strong>。</p>\r\n<h3 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h3>\r\n<p>与上述的模型相似。但需要注意的是，应用不同时汉语分词的<strong>颗粒度</strong>大小时常不同。比如机器翻译的颗粒度应该更大，而搜索引擎的颗粒度应该更小，需要根据所需进行改良。</p>\r\n<h3 id=\"隐马尔可夫模型\"><a href=\"#隐马尔可夫模型\" class=\"headerlink\" title=\"隐马尔可夫模型\"></a>隐马尔可夫模型</h3>\r\n<p>它的定义大致是这样（具体定义见维基）：令 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span>，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.874ex\" height=\"1.95ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -704 1270.3 861.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(796,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 为离散时间随机过程，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span>\r\n是马尔可夫过程（就是一条马尔科夫链，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 只与 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.471ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.579ex\" height=\"2.066ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 2023.9 913\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(646,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(600,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1378,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container></span> 有关，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.874ex\" height=\"1.95ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -704 1270.3 861.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(796,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 只与 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 有关，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 不可观测，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.874ex\" height=\"1.95ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -704 1270.3 861.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(796,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 可观测（确定）。因此输出符号的序列（\r\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.462ex\" height=\"1.902ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1088.3 840.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(614,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> ）能够透露出状态序列（ <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.021ex\" height=\"1.902ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1335.3 840.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> ）的一些信息。公式为 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.641ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"103.983ex\" height=\"4.791ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 45960.5 2117.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1140,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2045.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2490.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3395.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3840.4,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4285.1,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4729.8,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5174.4,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5452.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6374,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6818.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7740.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8184.9,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8629.5,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9074.2,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9518.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(9907.9,0)\"></g><g data-mml-node=\"mo\" transform=\"translate(10185.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11241.4,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11992.4,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(12381.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(13303,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(13747.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(14669.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15113.9,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15558.5,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16003.2,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16447.9,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(16725.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(17631.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(18076.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(18981.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(19426.3,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(19871,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20315.6,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20760.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(21371.5,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(22093.8,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(22844.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(23233.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(24139.3,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(24584,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(25489.5,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(25934.2,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(26378.9,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(26823.5,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27268.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27879.4,0)\"><path data-c=\"F7\" d=\"M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(28879.6,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(29630.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(30019.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(30941.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(31385.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(32307.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(32752.1,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(33196.8,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(33641.4,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(34086.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(34475.1,0)\"></g><g data-mml-node=\"mo\" transform=\"translate(34752.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(35808.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"220F\" d=\"M220 812Q220 813 218 819T214 829T208 840T199 853T185 866T166 878T140 887T107 893T66 896H56V950H1221V896H1211Q1080 896 1058 812V-311Q1076 -396 1211 -396H1221V-450H725V-396H735Q864 -396 888 -314Q889 -312 889 -311V896H388V292L389 -311Q405 -396 542 -396H552V-450H56V-396H66Q195 -396 219 -314Q220 -312 220 -311V812Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(511.4,-1059.6) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(37253.3,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(38004.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(38393.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(39216.6,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(39494.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(40301.8,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(40913.1,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(41635.3,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(42386.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(42775.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(43582.5,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(43860.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(502,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(361,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1139,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(45571.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>\r\n其在通信模型中的理解就是{O_n}是要解码的序列，{S_n}是解码后得到的序列，我们需要挑出P(s_1,s_2,...|o_1,o_2,...)最大的{S_n}来作为答案。</p>\r\n<p>隐马尔可夫模型的参数可以通过鲍姆-韦尔奇算法得到。它只需要大量{O_n}，是一种无监督的训练方法。大致算法（我理解的）如下：它可以得到生成{O_n}的所有路径和概率，然后通过改变参数使得观测序列出现的概率最大化。具体算法详见<a href=\"https://zh.wikipedia.org/wiki/%E9%B2%8D%E5%A7%86-%E9%9F%A6%E5%B0%94%E5%A5%87%E7%AE%97%E6%B3%95\">维基百科</a></p>\r\n<p>此模型非常通用，除自然语言处理之外还有很多问题可以用到这个算法。</p>\r\n<h2 id=\"信息论相关\"><a href=\"#信息论相关\" class=\"headerlink\" title=\"信息论相关\"></a>信息论相关</h2>\r\n<h3 id=\"信息熵\"><a href=\"#信息熵\" class=\"headerlink\" title=\"信息熵\"></a>信息熵</h3>\r\n<p>信息熵可以度量一个信息的作用，可以理解为在不知道一条信息的情况下提供多少bool信息（是or否）能完全知道它。其计算公式为\r\n<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.619ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"26.853ex\" height=\"4.769ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 11868.9 2107.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(888,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1277,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2129,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2795.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3851.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(4796.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(519.8,-1050) scale(0.707)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(6406.9,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7157.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7546.9,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8118.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8507.9,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8805.9,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9290.9,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9767.9,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10518.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10907.9,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11479.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> s为未知量的任意可能状态。</p>\r\n<p>作者还提到了<strong>条件熵</strong>的概念，其公式为 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -3.043ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"36.655ex\" height=\"5.192ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 16201.3 2294.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(888,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1277,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2129,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2407,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3170,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3836.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4892.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(5837.2,0)\"><g data-mml-node=\"mo\" transform=\"translate(794.4,0)\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0,-1100) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(572,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1239,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2091,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2369,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2859,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3526,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(9036.7,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9787.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10176.7,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10748.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11193.3,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11683.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12072.3,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12370.3,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12855.3,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(13332.3,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(14083.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(14472.3,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15044.3,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(15322.3,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15812.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> 还有<strong>互信息</strong>（度量两个随机事件的相关性） <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -3.043ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"37.851ex\" height=\"6.346ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1460 16730.3 2804.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(504,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(893,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1745,0)\"><path data-c=\"3B\" d=\"M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2189.7,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2952.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3619.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(4675.2,0)\"><g data-mml-node=\"mo\" transform=\"translate(794.4,0)\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0,-1100) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(572,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1239,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2091,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2369,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2859,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3526,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(7874.7,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8625.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9014.7,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9586.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10031.3,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10521.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10910.3,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11208.3,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11693.3,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(12170.3,0)\"><g data-mml-node=\"mrow\" transform=\"translate(762.2,710)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1712,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2156.7,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2646.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-710)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1712,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2101,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2852,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3241,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3731,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g><rect width=\"4320\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></span></p>\r\n<h2 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h2>\r\n<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h3>\r\n<ul>\r\n<li>自动下载尽可能多的网页（爬虫）</li>\r\n<li>建立索引（基于数据库和布尔运算）</li>\r\n<li>对相关网页排序</li>\r\n</ul>\r\n<h3 id=\"pangrank算法\"><a href=\"#pangrank算法\" class=\"headerlink\" title=\"pangrank算法\"></a>PangRank算法</h3>\r\n<p>它的基本原理非常简单，就是“如果一个网页被很多网页所链接，那么它的排名就高”。</p>\r\n<p>其排名的依据应该是每个指向它的网页的排名之和，公式大致为 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -3.15ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.522ex\" height=\"5.299ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 12606.7 2342.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(451,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(980,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1580,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2101,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2490,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3062,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3728.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(4784.6,0)\"><g data-mml-node=\"mo\" transform=\"translate(1421.2,0)\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0,-1147.3) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">指</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">向</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2572,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(3572,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">网</text></g><g data-mml-node=\"mi\" transform=\"translate(4572,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">页</text></g><g data-mml-node=\"mi\" transform=\"translate(5572,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(9237.7,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9688.7,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10217.7,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10817.7,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11338.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11727.7,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12217.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> 用矩阵表示就是 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.148ex\" height=\"1.805ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 3601.6 798\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1036.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2092.6,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2851.6,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g></g></g></svg></mjx-container></span> 其中 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.007ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 10169 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1036.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2092.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2481.6,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2932.6,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3461.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4061.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5019.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5463.8,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5914.8,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6443.8,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7043.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(8001.3,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8446,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8890.7,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9335.3,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9780,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.697ex\" height=\"1.62ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 750 716\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g></g></g></svg></mjx-container></span>\r\n为以网页为点，超链接为边的邻接矩阵。然后就可以使用迭代的方法。</p>\r\n<p>因为网页数量巨大，还可以使用稀疏矩阵的方法简化计算量。</p>\r\n<p>除此之外，还要进行平滑处理，改进公式如下 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.552ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"30.968ex\" height=\"4.079ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1117 13687.9 1803\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(792,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1363.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2419.5,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(2697.5,0)\"><g data-mml-node=\"mi\" transform=\"translate(399.5,676)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><rect width=\"1088\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(4247.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4970,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5696.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6696.4,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7085.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7807.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8807.8,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9336.8,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9725.8,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10475.8,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10976.1,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(11698.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(792,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1123,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container></span></p>\r\n<h3 id=\"搜索关键词权重的度量-tf-idf\"><a href=\"#搜索关键词权重的度量-tf-idf\" class=\"headerlink\" title=\"搜索关键词权重的度量-tf-idf\"></a>搜索关键词权重的度量 TF-IDF</h3>\r\n<p>在一个网页的关键词中，有的关键词比如‘的’，’应用‘因为非常常见，所以没有那么重要；而有一些关键词比如’TF-IDF‘就非常重要，所以发明了TF-IDF的概念。TF指单文本词频，就是一个词语在这篇文章中的重要性。IDF是逆文本频率指数，它的公式是\r\n<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.059ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"34.169ex\" height=\"5.285ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1426 15102.6 2336\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(504,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1332,0)\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2081,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2470,0)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3186,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3852.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4908.6,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5206.6,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5691.6,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6168.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(6557.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(2078,676)\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">总</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">网</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">页</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-710)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">所</text></g><g data-mml-node=\"mi\" transform=\"translate(1716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">出</text></g><g data-mml-node=\"mi\" transform=\"translate(2716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">现</text></g><g data-mml-node=\"mi\" transform=\"translate(3716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(4716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">网</text></g><g data-mml-node=\"mi\" transform=\"translate(5716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">页</text></g><g data-mml-node=\"mi\" transform=\"translate(6716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g><rect width=\"7916\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(14713.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> 则一个搜索语句和一篇网页的相关性可以用以下公式来度量 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -3.142ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.538ex\" height=\"5.291ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 10845.7 2338.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\" transform=\"translate(2006,0)\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0,-1147.3) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">搜</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">索</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">中</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">关</text></g><g data-mml-node=\"mi\" transform=\"translate(5000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">键</text></g><g data-mml-node=\"mi\" transform=\"translate(6000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">词</text></g><g data-mml-node=\"mi\" transform=\"translate(7000,0)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(5622.7,0)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6326.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(676,-150) scale(0.707)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7781.2,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8281.4,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8785.4,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(9613.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(676,-150) scale(0.707)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g></g></g></g></svg></mjx-container></span> 这其实与信息论的公式很相似。</p>\r\n<h2 id=\"网页权威性计算\"><a href=\"#网页权威性计算\" class=\"headerlink\" title=\"网页权威性计算\"></a>网页权威性计算</h2>\r\n<p>与PageRank大致相同，但是用文章内容中的“提及”而不是超链接的指向，而且权威性要分主题。</p>\r\n<p>问题：如何通过描述找到网站，如何区分权威网站和套壳网站？</p>\r\n<h2 id=\"有限状态机\"><a href=\"#有限状态机\" class=\"headerlink\" title=\"有限状态机\"></a>有限状态机</h2>\r\n<p>用于地址识别时很有效，因为地址的文法简单，有明显的从属关系。还可以在自动机器人控制，编译器和解释器，网络协议等方面应用。</p>\r\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2>\r\n<h3 id=\"特征向量\"><a href=\"#特征向量\" class=\"headerlink\" title=\"特征向量\"></a>特征向量</h3>\r\n<p>找到和文章主题相关的所有词语（总TF-IDF高）作为单词库。定义一篇文章的特征向量为它在单词库里的词语的TF-IDF值（注意是相对于这篇文章来说）所组成的向量。则两个向量的相关性可以用它们的夹角的余弦值表示。</p>\r\n<p>那么分类的方法可以用自底向上不断合并，但比较复杂且耗时比较长，而下面一种办法能一步到位。</p>\r\n<h3 id=\"奇异值分解svd\"><a href=\"#奇异值分解svd\" class=\"headerlink\" title=\"奇异值分解svd\"></a>奇异值分解（SVD）</h3>\r\n<p>SVD把所有文章的特征向量放在一起，为 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.231ex\" height=\"1.959ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 2754.2 866\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(783,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1051,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1829,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></g></g></g></g></svg></mjx-container></span>\r\n其中M是文章数，N是词数。</p>\r\n<p>奇异值分解可以把A分解为 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.462ex\" height=\"1.885ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 10812 833\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(861,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1051,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1829,0)\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2718,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3408.7,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3908.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(792,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(889,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1389,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2167,0)\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3056,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(7487.6,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7987.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(614,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(889,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1389,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2167,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></g></g></g></g></svg></mjx-container></span>，\r\n其中K1是主题数，K2是语义类数，X是每个文章和每个主题的相关性，Y是词和语义类的相关性，</p>\r\n<h3 id=\"信息指纹和相似哈希\"><a href=\"#信息指纹和相似哈希\" class=\"headerlink\" title=\"信息指纹和相似哈希\"></a>信息指纹和相似哈希</h3>\r\n<p>信息指纹用伪随机数产生算法将一段信息压缩成一段数字。可以证明，只要算法足够好，就能保证两个不同信息的指纹相同的概率极小。将一个集合的所有元素的信息指纹相加就能用于集合相同的判定（加法的交换律）。而进行多次随机挑选比较\r\n就是判定两个集合是否基本相同。</p>\r\n<p>而<strong>相似哈希</strong>就是将每个元素的信息指纹按权重（可能是TF-IDF）逐位相加，可以用于度量相关性（差越小相关性越大）（但是应该只能度量\r\n比较相似 和 不相似 吧）。伪代码大致如下：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">ans[j] += (((hash[i]&gt;&gt;j)&amp;<span class=\"hljs-number\">1</span>)?<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">-1</span>)*w[i];<br></code></pre></td></tr></table></figure>\r\n<p>后面没时间了，简单写写</p>\r\n<h2 id=\"rsa算法\"><a href=\"#rsa算法\" class=\"headerlink\" title=\"rsa算法\"></a>RSA算法</h2>\r\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"195.533ex\" height=\"2.593ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -896 86425.6 1146\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1165.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2221.6,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3194.8,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3917,0)\"><path data-c=\"1D444\" d=\"M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4708,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5152.7,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">其</text></g><g data-mml-node=\"mi\" transform=\"translate(6152.7,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">中</text></g><g data-mml-node=\"mi\" transform=\"translate(7152.7,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7903.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8348.3,0)\"><path data-c=\"1D444\" d=\"M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g><g data-mml-node=\"mi\" transform=\"translate(10139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">选</text></g><g data-mml-node=\"mi\" transform=\"translate(11139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">定</text></g><g data-mml-node=\"mi\" transform=\"translate(12139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(13139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">很</text></g><g data-mml-node=\"mi\" transform=\"translate(14139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">大</text></g><g data-mml-node=\"mi\" transform=\"translate(15139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(16139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">素</text></g><g data-mml-node=\"mi\" transform=\"translate(17139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g><g data-mml-node=\"mspace\" transform=\"translate(18139.3,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(18139.3,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(19468.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20523.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(20912.9,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(21886.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(22886.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(23386.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(23997.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(24719.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(25108.8,0)\"><path data-c=\"1D444\" d=\"M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(26122,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(27122.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27622.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(28011.2,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(28011.2,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">取</text></g><g data-mml-node=\"mi\" transform=\"translate(29011.2,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(29775.2,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">满</text></g><g data-mml-node=\"mi\" transform=\"translate(30775.2,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">足</text></g><g data-mml-node=\"mi\" transform=\"translate(31775.2,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(32252.2,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(32685.2,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(33205.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(33594.2,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(34358.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(34802.9,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(35853.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(36520.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(37576.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(38076.4,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(38076.4,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(38904.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g><g data-mml-node=\"mi\" transform=\"translate(39904.4,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(40668.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(41668.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">逆</text></g><g data-mml-node=\"mi\" transform=\"translate(42668.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">元</text></g><g data-mml-node=\"mi\" transform=\"translate(43668.4,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">，</text></g><g data-mml-node=\"mi\" transform=\"translate(44668.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">即</text></g><g data-mml-node=\"mi\" transform=\"translate(45668.4,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(46654.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(47376.9,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(48204.9,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(49371.6,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(51260.6,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(51427.6,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(51761.2,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(53090,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(54145.8,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(54645.8,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(54645.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">以</text></g><g data-mml-node=\"mi\" transform=\"translate(55645.8,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(56409.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g><g data-mml-node=\"mi\" transform=\"translate(57409.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">公</text></g><g data-mml-node=\"mi\" transform=\"translate(58409.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钥</text></g><g data-mml-node=\"mi\" transform=\"translate(59409.8,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">，</text></g><g data-mml-node=\"mi\" transform=\"translate(60409.8,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(61237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g><g data-mml-node=\"mi\" transform=\"translate(62237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">私</text></g><g data-mml-node=\"mi\" transform=\"translate(63237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钥</text></g><g data-mml-node=\"mspace\" transform=\"translate(64237.8,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(64237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">加</text></g><g data-mml-node=\"mi\" transform=\"translate(65237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">密</text></g><g data-mml-node=\"mi\" transform=\"translate(66237.8,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">：</text></g><g data-mml-node=\"msup\" transform=\"translate(67237.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(936.2,413) scale(0.707)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(68764.2,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(69930.9,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(71819.9,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(71986.9,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(72320.5,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(73486.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(74542.1,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(75305.1,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(75305.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">解</text></g><g data-mml-node=\"mi\" transform=\"translate(76305.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">密</text></g><g data-mml-node=\"mi\" transform=\"translate(77305.1,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">：</text></g><g data-mml-node=\"msup\" transform=\"translate(78305.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(855.1,413) scale(0.707)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(79795.7,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(80962.3,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(82851.3,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(83018.3,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(83352,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(84517.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(85573.6,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(86425.6,0)\"></g></g></g></svg></mjx-container></span></p>\r\n<p>P，Q很大，所以虽然N是公开的，但是不能知道M。最后两行用到了费马小定理。</p>\r\n<h2 id=\"最大熵原理\"><a href=\"#最大熵原理\" class=\"headerlink\" title=\"最大熵原理\"></a>最大熵原理</h2>\r\n<p>在所有可能的概率模型中，熵最大的模型概率最好（不确定性）。（猜测骰子概率）</p>\r\n<p>也可以用于综合多种数据（比如拼音输入法的通用模型和个性化模型）。</p>\r\n<p>公式为（可能？） <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.509ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22.922ex\" height=\"6.06ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1569.3 10131.5 2678.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1785,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2451.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(3507.6,0)\"><g data-mml-node=\"msup\" transform=\"translate(1100.9,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"msub\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2366.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2755.6,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3400.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3789.6,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4567.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(616,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-808.1)\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1761.8,0)\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,317.8) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"msub\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2366.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2755.6,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3400.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3789.6,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4567.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(616,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></g></g></g><rect width=\"6383.9\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></span></p>\r\n<p>参数 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.027ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.319ex\" height=\"1.597ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 583 706\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"></path></g></g></g></svg></mjx-container></span>\r\n可以用通用迭代算法GIS训练。</p>\r\n<h2 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h2>\r\n<p>用于判断一个元素是否存在于一个集合里</p>\r\n<p>把一个8字节的url变成8个信息指纹（<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.941ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5277.9 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(944.8,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1222.8,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1722.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2167.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3389.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4111.9,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4999.9,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span>），存到<strong>一个</strong>大小为16*N的哈希表（桶）里</p>\r\n<p>为啥是16*N呢？因为作者说的哈希表的存储效率只有50%。</p>\r\n<p>保证不会漏，但是可能会多（概率很小）。</p>\r\n<h2 id=\"贝叶斯网络\"><a href=\"#贝叶斯网络\" class=\"headerlink\" title=\"贝叶斯网络\"></a>贝叶斯网络</h2>\r\n<p>跟马尔可夫链挺像的，基于”一个状态只由指向它的状态所直接决定。</p>\r\n<p>但不完全一样，边权那里更复杂。</p>\r\n<figure class='item-img' data-src='https://longaspire.github.io/blog/%E9%9D%99%E6%80%81%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/Page42.png'><img src=\"https://longaspire.github.io/blog/%E9%9D%99%E6%80%81%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/Page42.png\" alt=\"实例\">\r\n<figcaption aria-hidden=\"true\">实例</figcaption>\r\n</figure>\r\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2>\r\n<h3 id=\"简单有效的东西\"><a href=\"#简单有效的东西\" class=\"headerlink\" title=\"简单有效的东西\"></a>简单有效的东西</h3>\r\n<p>作者认为，有的时候简单的算法会比精确而复杂的方法更有效，因为这容易读懂，易维护。而大而全的方法不仅容易因长时间不能完成而不了了之，而且可能会陷入像大圆套小圆那样冗杂的方法中。辛格甚至要求对于改进方法都要有清楚的理由，对于参数和公式都要有合理的物理解释，不然难以改动，容易变成“凑合”的算法。</p>\r\n<h3 id=\"个性化语言模型\"><a href=\"#个性化语言模型\" class=\"headerlink\" title=\"个性化语言模型\"></a>个性化语言模型</h3>\r\n<p>一个用户的输入内容有限，可以把输入内容和用语习惯类似的用户合并在一起。（我认为这里信息量增加的原因可能是人类的群居性或者叫做标签化（类似于“人以类聚”）。</p>\r\n<h3 id=\"没看懂的地方\"><a href=\"#没看懂的地方\" class=\"headerlink\" title=\"没看懂的地方\"></a>没看懂的地方</h3>\r\n<p>不代表其他都看懂了，只是这些完全没看懂</p>\r\n<ul>\r\n<li><p>基于变换规则的机器学习方法</p></li>\r\n<li><p>条件随机场</p></li>\r\n</ul>\r\n<h3 id=\"没时间总结的地方\"><a href=\"#没时间总结的地方\" class=\"headerlink\" title=\"没时间总结的地方\"></a>没时间总结的地方</h3>\r\n<ul>\r\n<li>码分多址\r\n<ul>\r\n<li>无线电通信相关</li>\r\n<li>基于扩频传输</li>\r\n<li>多频带，多信息同时传输，用对应地址码解调出相应信号</li>\r\n</ul></li>\r\n<li>期望最大化算法\r\n<ul>\r\n<li>可以应用于文本的自收敛分类\r\n<ol type=\"1\">\r\n<li>先随机选K个点作为初始中心</li>\r\n<li>将每个点归到最近的中心</li>\r\n<li>重新计算每一类的中心</li>\r\n<li>一直重复23步，直到同一类中各个点到中心的平均距离d最小，不同类中心之间的平均距离D最大</li>\r\n</ol></li>\r\n</ul></li>\r\n<li>逻辑回归模型\r\n<ul>\r\n<li>用于把一个数值映射到一个0-1概率上？</li>\r\n</ul></li>\r\n<li>人工神经网络\r\n<ul>\r\n<li>输入层，输出层，隐藏层</li>\r\n<li>通过边权计算点权 G=f(g(w1,w2,...))\r\n其中g是线性变换，f是一对一的函数（通常是e^x)</li>\r\n<li>通过设计成本函数可以进行无监督训练</li>\r\n</ul></li>\r\n<li>椭圆曲线加密原理</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"数学之美读后感\">《数学之美》读后感</h1>\r\n<p>本书在各个方面深入浅出地科普了数学在IT上的应用。虽然我认为其中的数学知识不算太多，因为作者原本的目的也是想让某些IT公司了解到在IT行业做事情的正确方法——重视简单而有效的方法而非凑合。所以我看完本书后数学美不美没看出来，反正计算机是挺美的。基本上是关于人工智能的。</p>","more":"<p>本书因为原本是以博客为载体，所以所分成的34章之间没有太大的关联，适合碎片化阅读。其又将难点作为延展阅读分出来，对只想浅层了解的读者很好。</p>\r\n<p>下面展开回顾一下其中的知识和我认为有用的点。</p>\r\n<h2 id=\"自然语言处理\"><a href=\"#自然语言处理\" class=\"headerlink\" title=\"自然语言处理\"></a>自然语言处理</h2>\r\n<h3 id=\"语言与通信\"><a href=\"#语言与通信\" class=\"headerlink\" title=\"语言与通信\"></a>语言与通信</h3>\r\n<p>作者讲到，语言的本质是为了人类之间的通信，所以所有自然语言处理的问题都可以等效为通信的解码问题。科学家由此发明了基于统计的算法，此方法遥遥领先于基于规则的算法。这种算法找到了语言的本质，把自然语言处理，机器翻译，语音识别等问题都概括成<strong>通信模型</strong>（编码和解码的过程），从而找到又简单又通用的方法。这也让我认识到计算机与人类的本质不同，所以凭直觉地让计算机模仿人类很多是低效的。（基于语法规则和理解文义的算法的失败）</p>\r\n<h3 id=\"统计语言模型\"><a href=\"#统计语言模型\" class=\"headerlink\" title=\"统计语言模型\"></a>统计语言模型</h3>\r\n<p>通过计算每句可能的句子的概率（<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.919ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2174 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1785,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>）来生成最有可能的句子。它基于<strong>马尔可夫假设</strong>推出这样一个公式：\r\n<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"141.226ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 62422.1 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1609,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2275.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3331.6,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4082.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4471.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5624.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6068.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7221.3,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7666,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8110.7,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8555.3,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9000,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(9444.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(10667.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(11056.9,0)\"></g><g data-mml-node=\"mo\" transform=\"translate(11334.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12390.5,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13141.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(13530.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(14683,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15294.3,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(16016.5,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16767.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(17156.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(18309,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(18587,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(19739.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20350.8,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(21073,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(21824,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(22213,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(23365.6,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(23643.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(24032.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(25185.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(25629.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(26782.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27171.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27560.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(28060.4,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(28505,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(28949.7,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(29394.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(29894.4,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(30645.4,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(31034.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(32257.6,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(32535.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(32924.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(34077.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(34521.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(35674.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(36119.1,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(36563.7,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(37008.4,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(37453.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(37897.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(749,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(600,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1378,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(40024.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(40413.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(40802.7,0)\"></g><g data-mml-node=\"mo\" transform=\"translate(41080.5,0)\"><path data-c=\"2248\" d=\"M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(42136.2,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(42887.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(43276.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(44428.8,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(45040,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(45762.2,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(46513.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(46902.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(48054.8,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(48332.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(49485.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(50096.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(50818.8,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(51569.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(51958.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(53111.3,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(53389.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(54541.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(54930.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(55430.9,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(55875.6,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(56320.2,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(56764.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(57264.9,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(58015.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(58404.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(59628.2,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(59906.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(749,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(600,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1378,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(62033.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>\r\n这称为二元模型。当然也有更高阶的模型，但有更大的时间和空间复杂度（ <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.093ex\" height=\"2.48ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -846 3576.9 1096\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1152,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1430,0)\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2199,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(311,363) scale(0.707)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3187.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>\r\n）。统计语言模型只需要在巨大的语料库里统计 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.918ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5267.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1669,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1947,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2376,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2765,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3209.7,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3960.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4349.7,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4878.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> 。</p>\r\n<p>由于统计数据中小概率和零概率事件的可靠性低，所以需要做<strong>平滑过渡处理</strong>。对于未看见的事件，我们需要从总量（100%）中分配很小的比例给它们，根据”越是不可信的统计折扣越多“的方法（<strong>古德-图灵公式</strong>）。高阶模型则会用卡茨退避法。</p>\r\n<p>训练之前还需要进行<strong>噪音过滤</strong>。</p>\r\n<h3 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h3>\r\n<p>与上述的模型相似。但需要注意的是，应用不同时汉语分词的<strong>颗粒度</strong>大小时常不同。比如机器翻译的颗粒度应该更大，而搜索引擎的颗粒度应该更小，需要根据所需进行改良。</p>\r\n<h3 id=\"隐马尔可夫模型\"><a href=\"#隐马尔可夫模型\" class=\"headerlink\" title=\"隐马尔可夫模型\"></a>隐马尔可夫模型</h3>\r\n<p>它的定义大致是这样（具体定义见维基）：令 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span>，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.874ex\" height=\"1.95ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -704 1270.3 861.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(796,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 为离散时间随机过程，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span>\r\n是马尔可夫过程（就是一条马尔科夫链，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 只与 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.471ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.579ex\" height=\"2.066ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 2023.9 913\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(646,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(600,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1378,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container></span> 有关，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.874ex\" height=\"1.95ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -704 1270.3 861.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(796,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 只与 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 有关，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.535ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 1120.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(646,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 不可观测，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.874ex\" height=\"1.95ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -704 1270.3 861.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(796,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> 可观测（确定）。因此输出符号的序列（\r\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.462ex\" height=\"1.902ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1088.3 840.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(614,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> ）能够透露出状态序列（ <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.021ex\" height=\"1.902ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1335.3 840.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container></span> ）的一些信息。公式为 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.641ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"103.983ex\" height=\"4.791ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 45960.5 2117.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1140,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2045.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2490.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3395.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3840.4,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4285.1,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4729.8,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5174.4,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5452.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6374,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6818.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7740.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8184.9,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8629.5,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9074.2,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9518.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(9907.9,0)\"></g><g data-mml-node=\"mo\" transform=\"translate(10185.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11241.4,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11992.4,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(12381.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(13303,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(13747.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(14669.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15113.9,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15558.5,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16003.2,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16447.9,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(16725.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(17631.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(18076.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(18981.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(19426.3,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(19871,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20315.6,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20760.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(21371.5,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(22093.8,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(22844.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(23233.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(24139.3,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(24584,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(25489.5,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(25934.2,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(26378.9,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(26823.5,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27268.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27879.4,0)\"><path data-c=\"F7\" d=\"M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(28879.6,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(29630.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(30019.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(30941.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(31385.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(32307.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(32752.1,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(33196.8,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(33641.4,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(34086.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(34475.1,0)\"></g><g data-mml-node=\"mo\" transform=\"translate(34752.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(35808.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"220F\" d=\"M220 812Q220 813 218 819T214 829T208 840T199 853T185 866T166 878T140 887T107 893T66 896H56V950H1221V896H1211Q1080 896 1058 812V-311Q1076 -396 1211 -396H1221V-450H725V-396H735Q864 -396 888 -314Q889 -312 889 -311V896H388V292L389 -311Q405 -396 542 -396H552V-450H56V-396H66Q195 -396 219 -314Q220 -312 220 -311V812Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(511.4,-1059.6) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(37253.3,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(38004.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(38393.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(518,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(39216.6,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(39494.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(40301.8,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(40913.1,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(41635.3,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(42386.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(42775.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(43582.5,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(43860.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(502,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(361,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1139,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(45571.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>\r\n其在通信模型中的理解就是{O_n}是要解码的序列，{S_n}是解码后得到的序列，我们需要挑出P(s_1,s_2,...|o_1,o_2,...)最大的{S_n}来作为答案。</p>\r\n<p>隐马尔可夫模型的参数可以通过鲍姆-韦尔奇算法得到。它只需要大量{O_n}，是一种无监督的训练方法。大致算法（我理解的）如下：它可以得到生成{O_n}的所有路径和概率，然后通过改变参数使得观测序列出现的概率最大化。具体算法详见<a href=\"https://zh.wikipedia.org/wiki/%E9%B2%8D%E5%A7%86-%E9%9F%A6%E5%B0%94%E5%A5%87%E7%AE%97%E6%B3%95\">维基百科</a></p>\r\n<p>此模型非常通用，除自然语言处理之外还有很多问题可以用到这个算法。</p>\r\n<h2 id=\"信息论相关\"><a href=\"#信息论相关\" class=\"headerlink\" title=\"信息论相关\"></a>信息论相关</h2>\r\n<h3 id=\"信息熵\"><a href=\"#信息熵\" class=\"headerlink\" title=\"信息熵\"></a>信息熵</h3>\r\n<p>信息熵可以度量一个信息的作用，可以理解为在不知道一条信息的情况下提供多少bool信息（是or否）能完全知道它。其计算公式为\r\n<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.619ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"26.853ex\" height=\"4.769ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 11868.9 2107.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(888,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1277,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2129,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2795.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3851.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(4796.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(519.8,-1050) scale(0.707)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(6406.9,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7157.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7546.9,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8118.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8507.9,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8805.9,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9290.9,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9767.9,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10518.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10907.9,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11479.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> s为未知量的任意可能状态。</p>\r\n<p>作者还提到了<strong>条件熵</strong>的概念，其公式为 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -3.043ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"36.655ex\" height=\"5.192ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 16201.3 2294.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(888,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1277,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2129,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2407,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3170,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3836.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4892.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(5837.2,0)\"><g data-mml-node=\"mo\" transform=\"translate(794.4,0)\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0,-1100) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(572,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1239,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2091,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2369,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2859,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3526,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(9036.7,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9787.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10176.7,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10748.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11193.3,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11683.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12072.3,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12370.3,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(12855.3,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(13332.3,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(14083.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(14472.3,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15044.3,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(15322.3,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15812.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> 还有<strong>互信息</strong>（度量两个随机事件的相关性） <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -3.043ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"37.851ex\" height=\"6.346ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1460 16730.3 2804.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(504,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(893,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1745,0)\"><path data-c=\"3B\" d=\"M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2189.7,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2952.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3619.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(4675.2,0)\"><g data-mml-node=\"mo\" transform=\"translate(794.4,0)\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0,-1100) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(572,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1239,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2091,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2369,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2859,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3526,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(7874.7,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8625.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9014.7,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9586.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10031.3,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10521.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10910.3,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11208.3,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11693.3,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(12170.3,0)\"><g data-mml-node=\"mrow\" transform=\"translate(762.2,710)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1712,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2156.7,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2646.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-710)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1712,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2101,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2852,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3241,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3731,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g><rect width=\"4320\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></span></p>\r\n<h2 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h2>\r\n<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h3>\r\n<ul>\r\n<li>自动下载尽可能多的网页（爬虫）</li>\r\n<li>建立索引（基于数据库和布尔运算）</li>\r\n<li>对相关网页排序</li>\r\n</ul>\r\n<h3 id=\"pangrank算法\"><a href=\"#pangrank算法\" class=\"headerlink\" title=\"pangrank算法\"></a>PangRank算法</h3>\r\n<p>它的基本原理非常简单，就是“如果一个网页被很多网页所链接，那么它的排名就高”。</p>\r\n<p>其排名的依据应该是每个指向它的网页的排名之和，公式大致为 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -3.15ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.522ex\" height=\"5.299ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 12606.7 2342.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(451,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(980,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1580,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2101,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2490,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3062,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3728.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"munder\" transform=\"translate(4784.6,0)\"><g data-mml-node=\"mo\" transform=\"translate(1421.2,0)\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0,-1147.3) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">指</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">向</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2572,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(3572,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">网</text></g><g data-mml-node=\"mi\" transform=\"translate(4572,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">页</text></g><g data-mml-node=\"mi\" transform=\"translate(5572,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(9237.7,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9688.7,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10217.7,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10817.7,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11338.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11727.7,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12217.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> 用矩阵表示就是 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.148ex\" height=\"1.805ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 3601.6 798\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1036.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2092.6,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2851.6,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g></g></g></svg></mjx-container></span> 其中 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.007ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 10169 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1036.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2092.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2481.6,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2932.6,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3461.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4061.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5019.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5463.8,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5914.8,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6443.8,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7043.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(8001.3,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8446,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8890.7,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9335.3,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9780,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.697ex\" height=\"1.62ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 750 716\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g></g></g></svg></mjx-container></span>\r\n为以网页为点，超链接为边的邻接矩阵。然后就可以使用迭代的方法。</p>\r\n<p>因为网页数量巨大，还可以使用稀疏矩阵的方法简化计算量。</p>\r\n<p>除此之外，还要进行平滑处理，改进公式如下 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.552ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"30.968ex\" height=\"4.079ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1117 13687.9 1803\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(792,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1363.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2419.5,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(2697.5,0)\"><g data-mml-node=\"mi\" transform=\"translate(399.5,676)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><rect width=\"1088\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(4247.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4970,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5696.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6696.4,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7085.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7807.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8807.8,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9336.8,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9725.8,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10475.8,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10976.1,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(11698.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(792,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1123,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container></span></p>\r\n<h3 id=\"搜索关键词权重的度量-tf-idf\"><a href=\"#搜索关键词权重的度量-tf-idf\" class=\"headerlink\" title=\"搜索关键词权重的度量-tf-idf\"></a>搜索关键词权重的度量 TF-IDF</h3>\r\n<p>在一个网页的关键词中，有的关键词比如‘的’，’应用‘因为非常常见，所以没有那么重要；而有一些关键词比如’TF-IDF‘就非常重要，所以发明了TF-IDF的概念。TF指单文本词频，就是一个词语在这篇文章中的重要性。IDF是逆文本频率指数，它的公式是\r\n<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.059ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"34.169ex\" height=\"5.285ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1426 15102.6 2336\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(504,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1332,0)\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2081,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2470,0)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3186,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3852.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4908.6,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5206.6,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5691.6,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6168.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(6557.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(2078,676)\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">总</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">网</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">页</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-710)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">所</text></g><g data-mml-node=\"mi\" transform=\"translate(1716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">出</text></g><g data-mml-node=\"mi\" transform=\"translate(2716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">现</text></g><g data-mml-node=\"mi\" transform=\"translate(3716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(4716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">网</text></g><g data-mml-node=\"mi\" transform=\"translate(5716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">页</text></g><g data-mml-node=\"mi\" transform=\"translate(6716,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g><rect width=\"7916\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(14713.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span> 则一个搜索语句和一篇网页的相关性可以用以下公式来度量 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -3.142ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.538ex\" height=\"5.291ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 10845.7 2338.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\" transform=\"translate(2006,0)\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0,-1147.3) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">搜</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">索</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">中</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">关</text></g><g data-mml-node=\"mi\" transform=\"translate(5000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">键</text></g><g data-mml-node=\"mi\" transform=\"translate(6000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">词</text></g><g data-mml-node=\"mi\" transform=\"translate(7000,0)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(5622.7,0)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6326.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(676,-150) scale(0.707)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7781.2,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8281.4,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8785.4,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(9613.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(676,-150) scale(0.707)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g></g></g></g></svg></mjx-container></span> 这其实与信息论的公式很相似。</p>\r\n<h2 id=\"网页权威性计算\"><a href=\"#网页权威性计算\" class=\"headerlink\" title=\"网页权威性计算\"></a>网页权威性计算</h2>\r\n<p>与PageRank大致相同，但是用文章内容中的“提及”而不是超链接的指向，而且权威性要分主题。</p>\r\n<p>问题：如何通过描述找到网站，如何区分权威网站和套壳网站？</p>\r\n<h2 id=\"有限状态机\"><a href=\"#有限状态机\" class=\"headerlink\" title=\"有限状态机\"></a>有限状态机</h2>\r\n<p>用于地址识别时很有效，因为地址的文法简单，有明显的从属关系。还可以在自动机器人控制，编译器和解释器，网络协议等方面应用。</p>\r\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2>\r\n<h3 id=\"特征向量\"><a href=\"#特征向量\" class=\"headerlink\" title=\"特征向量\"></a>特征向量</h3>\r\n<p>找到和文章主题相关的所有词语（总TF-IDF高）作为单词库。定义一篇文章的特征向量为它在单词库里的词语的TF-IDF值（注意是相对于这篇文章来说）所组成的向量。则两个向量的相关性可以用它们的夹角的余弦值表示。</p>\r\n<p>那么分类的方法可以用自底向上不断合并，但比较复杂且耗时比较长，而下面一种办法能一步到位。</p>\r\n<h3 id=\"奇异值分解svd\"><a href=\"#奇异值分解svd\" class=\"headerlink\" title=\"奇异值分解svd\"></a>奇异值分解（SVD）</h3>\r\n<p>SVD把所有文章的特征向量放在一起，为 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.231ex\" height=\"1.959ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -716 2754.2 866\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(783,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1051,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1829,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></g></g></g></g></svg></mjx-container></span>\r\n其中M是文章数，N是词数。</p>\r\n<p>奇异值分解可以把A分解为 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.462ex\" height=\"1.885ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 10812 833\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(861,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1051,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1829,0)\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2718,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3408.7,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3908.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(792,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(889,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1389,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2167,0)\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3056,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(7487.6,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7987.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(614,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(889,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1389,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2167,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></g></g></g></g></svg></mjx-container></span>，\r\n其中K1是主题数，K2是语义类数，X是每个文章和每个主题的相关性，Y是词和语义类的相关性，</p>\r\n<h3 id=\"信息指纹和相似哈希\"><a href=\"#信息指纹和相似哈希\" class=\"headerlink\" title=\"信息指纹和相似哈希\"></a>信息指纹和相似哈希</h3>\r\n<p>信息指纹用伪随机数产生算法将一段信息压缩成一段数字。可以证明，只要算法足够好，就能保证两个不同信息的指纹相同的概率极小。将一个集合的所有元素的信息指纹相加就能用于集合相同的判定（加法的交换律）。而进行多次随机挑选比较\r\n就是判定两个集合是否基本相同。</p>\r\n<p>而<strong>相似哈希</strong>就是将每个元素的信息指纹按权重（可能是TF-IDF）逐位相加，可以用于度量相关性（差越小相关性越大）（但是应该只能度量\r\n比较相似 和 不相似 吧）。伪代码大致如下：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">ans[j] += (((hash[i]&gt;&gt;j)&amp;<span class=\"hljs-number\">1</span>)?<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">-1</span>)*w[i];<br></code></pre></td></tr></table></figure>\r\n<p>后面没时间了，简单写写</p>\r\n<h2 id=\"rsa算法\"><a href=\"#rsa算法\" class=\"headerlink\" title=\"rsa算法\"></a>RSA算法</h2>\r\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"195.533ex\" height=\"2.593ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -896 86425.6 1146\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1165.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2221.6,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3194.8,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3917,0)\"><path data-c=\"1D444\" d=\"M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4708,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5152.7,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">其</text></g><g data-mml-node=\"mi\" transform=\"translate(6152.7,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">中</text></g><g data-mml-node=\"mi\" transform=\"translate(7152.7,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7903.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8348.3,0)\"><path data-c=\"1D444\" d=\"M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g><g data-mml-node=\"mi\" transform=\"translate(10139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">选</text></g><g data-mml-node=\"mi\" transform=\"translate(11139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">定</text></g><g data-mml-node=\"mi\" transform=\"translate(12139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(13139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">很</text></g><g data-mml-node=\"mi\" transform=\"translate(14139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">大</text></g><g data-mml-node=\"mi\" transform=\"translate(15139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(16139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">素</text></g><g data-mml-node=\"mi\" transform=\"translate(17139.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g><g data-mml-node=\"mspace\" transform=\"translate(18139.3,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(18139.3,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(19468.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20523.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(20912.9,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(21886.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(22886.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(23386.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(23997.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(24719.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(25108.8,0)\"><path data-c=\"1D444\" d=\"M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(26122,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(27122.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27622.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(28011.2,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(28011.2,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">取</text></g><g data-mml-node=\"mi\" transform=\"translate(29011.2,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(29775.2,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">满</text></g><g data-mml-node=\"mi\" transform=\"translate(30775.2,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">足</text></g><g data-mml-node=\"mi\" transform=\"translate(31775.2,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(32252.2,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(32685.2,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(33205.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(33594.2,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(34358.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(34802.9,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(35853.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(36520.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(37576.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(38076.4,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(38076.4,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(38904.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g><g data-mml-node=\"mi\" transform=\"translate(39904.4,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(40668.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(41668.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">逆</text></g><g data-mml-node=\"mi\" transform=\"translate(42668.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">元</text></g><g data-mml-node=\"mi\" transform=\"translate(43668.4,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">，</text></g><g data-mml-node=\"mi\" transform=\"translate(44668.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">即</text></g><g data-mml-node=\"mi\" transform=\"translate(45668.4,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(46654.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(47376.9,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(48204.9,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(49371.6,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(51260.6,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(51427.6,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(51761.2,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(53090,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(54145.8,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(54645.8,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(54645.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">以</text></g><g data-mml-node=\"mi\" transform=\"translate(55645.8,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(56409.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g><g data-mml-node=\"mi\" transform=\"translate(57409.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">公</text></g><g data-mml-node=\"mi\" transform=\"translate(58409.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钥</text></g><g data-mml-node=\"mi\" transform=\"translate(59409.8,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">，</text></g><g data-mml-node=\"mi\" transform=\"translate(60409.8,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(61237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">为</text></g><g data-mml-node=\"mi\" transform=\"translate(62237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">私</text></g><g data-mml-node=\"mi\" transform=\"translate(63237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钥</text></g><g data-mml-node=\"mspace\" transform=\"translate(64237.8,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(64237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">加</text></g><g data-mml-node=\"mi\" transform=\"translate(65237.8,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">密</text></g><g data-mml-node=\"mi\" transform=\"translate(66237.8,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">：</text></g><g data-mml-node=\"msup\" transform=\"translate(67237.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(936.2,413) scale(0.707)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(68764.2,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(69930.9,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(71819.9,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(71986.9,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(72320.5,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(73486.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(74542.1,0)\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(75305.1,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(75305.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">解</text></g><g data-mml-node=\"mi\" transform=\"translate(76305.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">密</text></g><g data-mml-node=\"mi\" transform=\"translate(77305.1,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">：</text></g><g data-mml-node=\"msup\" transform=\"translate(78305.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(855.1,413) scale(0.707)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"></path></g></g><g data-mml-node=\"mspace\" transform=\"translate(79795.7,0)\"></g><g data-mml-node=\"mi\" transform=\"translate(80962.3,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"></path><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(82851.3,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mstyle\" transform=\"translate(83018.3,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(83352,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(84517.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(85573.6,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(86425.6,0)\"></g></g></g></svg></mjx-container></span></p>\r\n<p>P，Q很大，所以虽然N是公开的，但是不能知道M。最后两行用到了费马小定理。</p>\r\n<h2 id=\"最大熵原理\"><a href=\"#最大熵原理\" class=\"headerlink\" title=\"最大熵原理\"></a>最大熵原理</h2>\r\n<p>在所有可能的概率模型中，熵最大的模型概率最好（不确定性）。（猜测骰子概率）</p>\r\n<p>也可以用于综合多种数据（比如拼音输入法的通用模型和个性化模型）。</p>\r\n<p>公式为（可能？） <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.509ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22.922ex\" height=\"6.06ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1569.3 10131.5 2678.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1785,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2451.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(3507.6,0)\"><g data-mml-node=\"msup\" transform=\"translate(1100.9,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"msub\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2366.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2755.6,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3400.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3789.6,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4567.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(616,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-808.1)\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1761.8,0)\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,317.8) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"msub\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2366.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2755.6,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3400.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3789.6,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4567.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(616,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></g></g></g><rect width=\"6383.9\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></span></p>\r\n<p>参数 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.027ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.319ex\" height=\"1.597ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 583 706\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"></path></g></g></g></svg></mjx-container></span>\r\n可以用通用迭代算法GIS训练。</p>\r\n<h2 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h2>\r\n<p>用于判断一个元素是否存在于一个集合里</p>\r\n<p>把一个8字节的url变成8个信息指纹（<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.941ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5277.9 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(944.8,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1222.8,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1722.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2167.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3389.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4111.9,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4999.9,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span>），存到<strong>一个</strong>大小为16*N的哈希表（桶）里</p>\r\n<p>为啥是16*N呢？因为作者说的哈希表的存储效率只有50%。</p>\r\n<p>保证不会漏，但是可能会多（概率很小）。</p>\r\n<h2 id=\"贝叶斯网络\"><a href=\"#贝叶斯网络\" class=\"headerlink\" title=\"贝叶斯网络\"></a>贝叶斯网络</h2>\r\n<p>跟马尔可夫链挺像的，基于”一个状态只由指向它的状态所直接决定。</p>\r\n<p>但不完全一样，边权那里更复杂。</p>\r\n<figure>\r\n<img src=\"https://longaspire.github.io/blog/%E9%9D%99%E6%80%81%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/Page42.png\" alt=\"实例\">\r\n<figcaption aria-hidden=\"true\">实例</figcaption>\r\n</figure>\r\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2>\r\n<h3 id=\"简单有效的东西\"><a href=\"#简单有效的东西\" class=\"headerlink\" title=\"简单有效的东西\"></a>简单有效的东西</h3>\r\n<p>作者认为，有的时候简单的算法会比精确而复杂的方法更有效，因为这容易读懂，易维护。而大而全的方法不仅容易因长时间不能完成而不了了之，而且可能会陷入像大圆套小圆那样冗杂的方法中。辛格甚至要求对于改进方法都要有清楚的理由，对于参数和公式都要有合理的物理解释，不然难以改动，容易变成“凑合”的算法。</p>\r\n<h3 id=\"个性化语言模型\"><a href=\"#个性化语言模型\" class=\"headerlink\" title=\"个性化语言模型\"></a>个性化语言模型</h3>\r\n<p>一个用户的输入内容有限，可以把输入内容和用语习惯类似的用户合并在一起。（我认为这里信息量增加的原因可能是人类的群居性或者叫做标签化（类似于“人以类聚”）。</p>\r\n<h3 id=\"没看懂的地方\"><a href=\"#没看懂的地方\" class=\"headerlink\" title=\"没看懂的地方\"></a>没看懂的地方</h3>\r\n<p>不代表其他都看懂了，只是这些完全没看懂</p>\r\n<ul>\r\n<li><p>基于变换规则的机器学习方法</p></li>\r\n<li><p>条件随机场</p></li>\r\n</ul>\r\n<h3 id=\"没时间总结的地方\"><a href=\"#没时间总结的地方\" class=\"headerlink\" title=\"没时间总结的地方\"></a>没时间总结的地方</h3>\r\n<ul>\r\n<li>码分多址\r\n<ul>\r\n<li>无线电通信相关</li>\r\n<li>基于扩频传输</li>\r\n<li>多频带，多信息同时传输，用对应地址码解调出相应信号</li>\r\n</ul></li>\r\n<li>期望最大化算法\r\n<ul>\r\n<li>可以应用于文本的自收敛分类\r\n<ol type=\"1\">\r\n<li>先随机选K个点作为初始中心</li>\r\n<li>将每个点归到最近的中心</li>\r\n<li>重新计算每一类的中心</li>\r\n<li>一直重复23步，直到同一类中各个点到中心的平均距离d最小，不同类中心之间的平均距离D最大</li>\r\n</ol></li>\r\n</ul></li>\r\n<li>逻辑回归模型\r\n<ul>\r\n<li>用于把一个数值映射到一个0-1概率上？</li>\r\n</ul></li>\r\n<li>人工神经网络\r\n<ul>\r\n<li>输入层，输出层，隐藏层</li>\r\n<li>通过边权计算点权 G=f(g(w1,w2,...))\r\n其中g是线性变换，f是一对一的函数（通常是e^x)</li>\r\n<li>通过设计成本函数可以进行无监督训练</li>\r\n</ul></li>\r\n<li>椭圆曲线加密原理</li>\r\n</ul>"},{"title":"JS","date":"2024-02-22T16:00:00.000Z","_content":"## 变量名要使用let和const，完全摒弃var\n\nlet只在作用域里，与c++\n\nvar定义后在哪里都可以用\n\n## get document中的对象\n\n`const canvas = document.getElementById(\"canvas\"); `\n\n`const a = document.getElementsByClass(\"num\");//注意a是个数组`\n\n建议搞个函数\n\n## 函数\n\n```\nfunction a(){return …;}\n```\n\n可以函数里定义函数\n\n## 定义数组\n\nlet s=[];\n\n ## parseInt();\n\n转换为整数（什么类型都可）\n\n## string处理\n\n不能s[i]='a'\n\n用substring和+\n\ns.toUpperCase()全部转大写\n\n## 要用 `===` 而不是 `==`\n\n## 箭头函数\n\n```\n(param1, param2, …, paramN) => { statements }\n\n(param1, param2, …, paramN) => expression\n//相当于：(param1, param2, …, paramN) =>{ return expression; }\n```\n\n不会创建自己的this\n\n## 剩余参数\n\n```\nfunction f(a, b, ...theArgs) {\n  for(int i=0;i<theArgs.length;i++){\n  \tconsole.log(theArgs[i]);\n  }\n}\nf(0,0,1,2,3);//[1,2,3]\nf(1,2,3,4,5,3,2);//[3,4,5,3,2]\n```\n\n## getBoundingClientRects()\n\n返回值是一个 [`DOMRect`](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect) 对象，是包含整个元素的最小矩形（包括 `padding` 和 `border-width`）。该对象使用 `left`、`top`、`right`、`bottom`、`x`、`y`、`width` 和 `height` 这几个以像素为单位的只读属性描述整个矩形的位置和大小。除了 `width` 和 `height` 以外的属性是相对于视图窗口的左上角来计算的。\n\n该方法返回的 [`DOMRect`](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect) 对象中的 `width` 和 `height` 属性是包含了 `padding` 和 `border-width` 的，而不仅仅是内容部分的宽度和高度。在标准盒子模型中，这两个属性值分别与元素的 `width`/`height` + `padding` + `border-width` 相等。而如果是 [`box-sizing: border-box`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing)，两个属性则直接与元素的 `width` 或 `height` 相等。\n\n## 改属性时注意是字符串\n\nout.style.left = event.x-0.5*box.width+\"px\";\n\n## `**` 指数运算符\n\n右结合\n\n`2 ** 3 ** 4` 即 $2^{(3^4)}$\n\n## Error对象和throw语句\n\n`throw new Error(\"这是一个错误\");` 手动中断程序执行，抛出一个错误\n\n对于 JavaScript 引擎来说，遇到`throw`语句，程序就中止了。引擎会接收到`throw`抛出的信息，可能是一个错误实例，也可能是其他类型的值。\n\ntry...catch 结构\n\n`try`代码块抛出错误（上例用的是`throw`语句），JavaScript 引擎就立即把代码的执行，转到`catch`代码块，或者说错误被`catch`代码块捕获了。`catch`接受一个参数，表示`try`代码块抛出的值。\n\n`catch`代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去。\n\n`try...catch`结构允许在最后添加一个`finally`代码块，表示不管是否出现错误，都必需在最后运行的语句。(就算是return)\n\n```\nopenFile();\n\ntry {\n  writeFile(Data);\n} catch(e) {\n  handleError(e);\n} finally {\n  closeFile();\n}\n```\n\n上面代码首先打开一个文件，然后在`try`代码块中写入文件，如果没有发生错误，则运行`finally`代码块关闭文件；一旦发生错误，则先使用`catch`代码块处理错误，再使用`finally`代码块关闭文件。\n\n```\ntry {\n  try {\n    consle.log('Hello world!'); // 报错\n  } finally {\n    console.log('Finally');\n  }\n  console.log('Will I run?');\n} catch(error) {\n  console.error(error.message);\n}\n// Finally\n// consle is not defined\n```\n\n## 码风\n\n1. 表示函数调用与定义时，函数名与左括号之间没有空格。\n2. 其他情况时，前面位置的语法元素与左括号之间，都有一个空格。\n\n## class\n\n### 基本概念\n\n每个类中包含了一个特殊的方法 **constructor()**，它是类的**构造函数**，这种方法用于创建和初始化一个由 **class** 创建的对象。\n\n```js\nclass Runoob {\n  constructor(name, url) {\n    this.name = name;\n    this.url = url;\n  }\n  work(age){//create its function\n      \n  }\n}\n```\n\n### 继承 extends\n\n当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为**基类（父类）**，新建的类称为**派生类（子类）**。\n\n**super()** 方法引用父类的构造方法。需要在自己的构造方法中使用。\n\n```js\nclass Animal {...}\nclass Dog extends Animal {\n    constructor(name, breed) {\n        super(name);\n        ....\n    }\n    bark(){...}\n}\n```\n\n### 静态方法\n\n静态方法是使用 static 关键字修饰的方法，又叫类方法，属于类的，但不属于对象，在实例化对象之前可以通过 **类名.方法名** 调用静态方法。\n\n静态方法不能在对象上调用，只能在类中调用。\n\n## export & import\n\n[export](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export)\n\n命名导出和默认导出\n\n命名导出一般只能用相同的名字，但可以换名字 export { myFunction as function1, myVariable as variable };\n\n默认导出一个模块只能有一个，在导入时可以定义名字\n\ntype=\"module\" 的 script 元素\n\n```\n// 导出列表\nexport { name1, name2, …, nameN };\n\n// 重命名导出\nexport { variable1 as name1, variable2 as name2, …, nameN };\n```\n[require和import及其用法](https://cloud.tencent.com/developer/article/1548972)\n\n## 赋值\n\nlet obj1 = {a:1, b:2};\n\nlet obj3 = obj1;\n\nobj3与obj1的内存位置相同，会同步修改\n\n> 在开始之前，我先普及一些基础知识。Javascript 的对象只是指向内存中某个位置的指针。这些指针是可变的，也就是说，它们可以重新被赋值。所以仅仅复制这个指针，其结果是有两个指针指向内存中的同一个地址。\n\n浅拷贝（只能在所有属性都是值的情况下拷贝）\n\n```javascript\nvar obj1 = { foo: \"foo\" };\nvar obj2 = { bar: \"bar\" };\nvar copySpread = { ...obj1, ...obj2 };\n// Object { foo: \"foo\", bar: \"bar\" }\nvar copyAssign = Object.assign({}, obj1, obj2);\n// Object { foo: \"foo\", bar: \"bar\" }\n```\n","source":"_posts/语言/JS.md","raw":"---\ntitle: JS\ndate: 2024-02-23 00:00:00\ntags:\n  - 前端\n  - JS\n  - 语言学习\n---\n## 变量名要使用let和const，完全摒弃var\n\nlet只在作用域里，与c++\n\nvar定义后在哪里都可以用\n\n## get document中的对象\n\n`const canvas = document.getElementById(\"canvas\"); `\n\n`const a = document.getElementsByClass(\"num\");//注意a是个数组`\n\n建议搞个函数\n\n## 函数\n\n```\nfunction a(){return …;}\n```\n\n可以函数里定义函数\n\n## 定义数组\n\nlet s=[];\n\n ## parseInt();\n\n转换为整数（什么类型都可）\n\n## string处理\n\n不能s[i]='a'\n\n用substring和+\n\ns.toUpperCase()全部转大写\n\n## 要用 `===` 而不是 `==`\n\n## 箭头函数\n\n```\n(param1, param2, …, paramN) => { statements }\n\n(param1, param2, …, paramN) => expression\n//相当于：(param1, param2, …, paramN) =>{ return expression; }\n```\n\n不会创建自己的this\n\n## 剩余参数\n\n```\nfunction f(a, b, ...theArgs) {\n  for(int i=0;i<theArgs.length;i++){\n  \tconsole.log(theArgs[i]);\n  }\n}\nf(0,0,1,2,3);//[1,2,3]\nf(1,2,3,4,5,3,2);//[3,4,5,3,2]\n```\n\n## getBoundingClientRects()\n\n返回值是一个 [`DOMRect`](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect) 对象，是包含整个元素的最小矩形（包括 `padding` 和 `border-width`）。该对象使用 `left`、`top`、`right`、`bottom`、`x`、`y`、`width` 和 `height` 这几个以像素为单位的只读属性描述整个矩形的位置和大小。除了 `width` 和 `height` 以外的属性是相对于视图窗口的左上角来计算的。\n\n该方法返回的 [`DOMRect`](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect) 对象中的 `width` 和 `height` 属性是包含了 `padding` 和 `border-width` 的，而不仅仅是内容部分的宽度和高度。在标准盒子模型中，这两个属性值分别与元素的 `width`/`height` + `padding` + `border-width` 相等。而如果是 [`box-sizing: border-box`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing)，两个属性则直接与元素的 `width` 或 `height` 相等。\n\n## 改属性时注意是字符串\n\nout.style.left = event.x-0.5*box.width+\"px\";\n\n## `**` 指数运算符\n\n右结合\n\n`2 ** 3 ** 4` 即 $2^{(3^4)}$\n\n## Error对象和throw语句\n\n`throw new Error(\"这是一个错误\");` 手动中断程序执行，抛出一个错误\n\n对于 JavaScript 引擎来说，遇到`throw`语句，程序就中止了。引擎会接收到`throw`抛出的信息，可能是一个错误实例，也可能是其他类型的值。\n\ntry...catch 结构\n\n`try`代码块抛出错误（上例用的是`throw`语句），JavaScript 引擎就立即把代码的执行，转到`catch`代码块，或者说错误被`catch`代码块捕获了。`catch`接受一个参数，表示`try`代码块抛出的值。\n\n`catch`代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去。\n\n`try...catch`结构允许在最后添加一个`finally`代码块，表示不管是否出现错误，都必需在最后运行的语句。(就算是return)\n\n```\nopenFile();\n\ntry {\n  writeFile(Data);\n} catch(e) {\n  handleError(e);\n} finally {\n  closeFile();\n}\n```\n\n上面代码首先打开一个文件，然后在`try`代码块中写入文件，如果没有发生错误，则运行`finally`代码块关闭文件；一旦发生错误，则先使用`catch`代码块处理错误，再使用`finally`代码块关闭文件。\n\n```\ntry {\n  try {\n    consle.log('Hello world!'); // 报错\n  } finally {\n    console.log('Finally');\n  }\n  console.log('Will I run?');\n} catch(error) {\n  console.error(error.message);\n}\n// Finally\n// consle is not defined\n```\n\n## 码风\n\n1. 表示函数调用与定义时，函数名与左括号之间没有空格。\n2. 其他情况时，前面位置的语法元素与左括号之间，都有一个空格。\n\n## class\n\n### 基本概念\n\n每个类中包含了一个特殊的方法 **constructor()**，它是类的**构造函数**，这种方法用于创建和初始化一个由 **class** 创建的对象。\n\n```js\nclass Runoob {\n  constructor(name, url) {\n    this.name = name;\n    this.url = url;\n  }\n  work(age){//create its function\n      \n  }\n}\n```\n\n### 继承 extends\n\n当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为**基类（父类）**，新建的类称为**派生类（子类）**。\n\n**super()** 方法引用父类的构造方法。需要在自己的构造方法中使用。\n\n```js\nclass Animal {...}\nclass Dog extends Animal {\n    constructor(name, breed) {\n        super(name);\n        ....\n    }\n    bark(){...}\n}\n```\n\n### 静态方法\n\n静态方法是使用 static 关键字修饰的方法，又叫类方法，属于类的，但不属于对象，在实例化对象之前可以通过 **类名.方法名** 调用静态方法。\n\n静态方法不能在对象上调用，只能在类中调用。\n\n## export & import\n\n[export](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export)\n\n命名导出和默认导出\n\n命名导出一般只能用相同的名字，但可以换名字 export { myFunction as function1, myVariable as variable };\n\n默认导出一个模块只能有一个，在导入时可以定义名字\n\ntype=\"module\" 的 script 元素\n\n```\n// 导出列表\nexport { name1, name2, …, nameN };\n\n// 重命名导出\nexport { variable1 as name1, variable2 as name2, …, nameN };\n```\n[require和import及其用法](https://cloud.tencent.com/developer/article/1548972)\n\n## 赋值\n\nlet obj1 = {a:1, b:2};\n\nlet obj3 = obj1;\n\nobj3与obj1的内存位置相同，会同步修改\n\n> 在开始之前，我先普及一些基础知识。Javascript 的对象只是指向内存中某个位置的指针。这些指针是可变的，也就是说，它们可以重新被赋值。所以仅仅复制这个指针，其结果是有两个指针指向内存中的同一个地址。\n\n浅拷贝（只能在所有属性都是值的情况下拷贝）\n\n```javascript\nvar obj1 = { foo: \"foo\" };\nvar obj2 = { bar: \"bar\" };\nvar copySpread = { ...obj1, ...obj2 };\n// Object { foo: \"foo\", bar: \"bar\" }\nvar copyAssign = Object.assign({}, obj1, obj2);\n// Object { foo: \"foo\", bar: \"bar\" }\n```\n","slug":"语言/JS","published":1,"updated":"2024-09-02T07:57:36.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3wh003ap4wvdnd10147","content":"<h2\r\nid=\"变量名要使用let和const完全摒弃var\">变量名要使用let和const，完全摒弃var</h2>\r\n<p>let只在作用域里，与c++</p>\r\n<p>var定义后在哪里都可以用</p>\r\n<h2 id=\"get-document中的对象\"><a href=\"#get-document中的对象\" class=\"headerlink\" title=\"get-document中的对象\"></a>get document中的对象</h2>\r\n<p><code>const canvas = document.getElementById(\"canvas\");</code></p>\r\n<p><code>const a = document.getElementsByClass(\"num\");//注意a是个数组</code></p>\r\n<p>建议搞个函数</p>\r\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">function a()&#123;return …;&#125;<br></code></pre></td></tr></table></figure>\r\n<p>可以函数里定义函数</p>\r\n<h2 id=\"定义数组\"><a href=\"#定义数组\" class=\"headerlink\" title=\"定义数组\"></a>定义数组</h2>\r\n<p>let s=[];</p>\r\n<p>## parseInt();</p>\r\n<p>转换为整数（什么类型都可）</p>\r\n<h2 id=\"string处理\"><a href=\"#string处理\" class=\"headerlink\" title=\"string处理\"></a>string处理</h2>\r\n<p>不能s[i]='a'</p>\r\n<p>用substring和+</p>\r\n<p>s.toUpperCase()全部转大写</p>\r\n<h2 id=\"要用-而不是\"><a href=\"#要用-而不是\" class=\"headerlink\" title=\"要用-而不是\"></a>要用 <code>===</code> 而不是 <code>==</code></h2>\r\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">(param1, param2, …, paramN) =&gt; &#123; statements &#125;<br><br>(param1, param2, …, paramN) =&gt; expression<br>//相当于：(param1, param2, …, paramN) =&gt;&#123; return expression; &#125;<br></code></pre></td></tr></table></figure>\r\n<p>不会创建自己的this</p>\r\n<h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">function f(a, b, ...theArgs) &#123;<br>  for(int i=0;i&lt;theArgs.length;i++)&#123;<br>  \tconsole.log(theArgs[i]);<br>  &#125;<br>&#125;<br>f(0,0,1,2,3);//[1,2,3]<br>f(1,2,3,4,5,3,2);//[3,4,5,3,2]<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"getboundingclientrects\"><a href=\"#getboundingclientrects\" class=\"headerlink\" title=\"getboundingclientrects\"></a>getBoundingClientRects()</h2>\r\n<p>返回值是一个 <a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect\"><code>DOMRect</code></a>\r\n对象，是包含整个元素的最小矩形（包括 <code>padding</code> 和\r\n<code>border-width</code>）。该对象使用\r\n<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>、<code>x</code>、<code>y</code>、<code>width</code>\r\n和 <code>height</code>\r\n这几个以像素为单位的只读属性描述整个矩形的位置和大小。除了\r\n<code>width</code> 和 <code>height</code>\r\n以外的属性是相对于视图窗口的左上角来计算的。</p>\r\n<p>该方法返回的 <a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect\"><code>DOMRect</code></a>\r\n对象中的 <code>width</code> 和 <code>height</code> 属性是包含了\r\n<code>padding</code> 和 <code>border-width</code>\r\n的，而不仅仅是内容部分的宽度和高度。在标准盒子模型中，这两个属性值分别与元素的\r\n<code>width</code>/<code>height</code> + <code>padding</code> +\r\n<code>border-width</code> 相等。而如果是 <a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing\"><code>box-sizing: border-box</code></a>，两个属性则直接与元素的\r\n<code>width</code> 或 <code>height</code> 相等。</p>\r\n<h2 id=\"改属性时注意是字符串\"><a href=\"#改属性时注意是字符串\" class=\"headerlink\" title=\"改属性时注意是字符串\"></a>改属性时注意是字符串</h2>\r\n<p>out.style.left = event.x-0.5*box.width+\"px\";</p>\r\n<h2 id=\"指数运算符\"><a href=\"#指数运算符\" class=\"headerlink\" title=\"指数运算符\"></a><code>**</code> 指数运算符</h2>\r\n<p>右结合</p>\r\n<p><code>2 ** 3 ** 4</code> 即 <span\r\nclass=\"math inline\">\\(2^{(3^4)}\\)</span></p>\r\n<h2 id=\"error对象和throw语句\"><a href=\"#error对象和throw语句\" class=\"headerlink\" title=\"error对象和throw语句\"></a>Error对象和throw语句</h2>\r\n<p><code>throw new Error(\"这是一个错误\");</code>\r\n手动中断程序执行，抛出一个错误</p>\r\n<p>对于 JavaScript\r\n引擎来说，遇到<code>throw</code>语句，程序就中止了。引擎会接收到<code>throw</code>抛出的信息，可能是一个错误实例，也可能是其他类型的值。</p>\r\n<p>try...catch 结构</p>\r\n<p><code>try</code>代码块抛出错误（上例用的是<code>throw</code>语句），JavaScript\r\n引擎就立即把代码的执行，转到<code>catch</code>代码块，或者说错误被<code>catch</code>代码块捕获了。<code>catch</code>接受一个参数，表示<code>try</code>代码块抛出的值。</p>\r\n<p><code>catch</code>代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去。</p>\r\n<p><code>try...catch</code>结构允许在最后添加一个<code>finally</code>代码块，表示不管是否出现错误，都必需在最后运行的语句。(就算是return)</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">openFile();<br><br>try &#123;<br>  writeFile(Data);<br>&#125; catch(e) &#123;<br>  handleError(e);<br>&#125; finally &#123;<br>  closeFile();<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>上面代码首先打开一个文件，然后在<code>try</code>代码块中写入文件，如果没有发生错误，则运行<code>finally</code>代码块关闭文件；一旦发生错误，则先使用<code>catch</code>代码块处理错误，再使用<code>finally</code>代码块关闭文件。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">try &#123;<br>  try &#123;<br>    consle.log(&#x27;Hello world!&#x27;); // 报错<br>  &#125; finally &#123;<br>    console.log(&#x27;Finally&#x27;);<br>  &#125;<br>  console.log(&#x27;Will I run?&#x27;);<br>&#125; catch(error) &#123;<br>  console.error(error.message);<br>&#125;<br>// Finally<br>// consle is not defined<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"码风\"><a href=\"#码风\" class=\"headerlink\" title=\"码风\"></a>码风</h2>\r\n<ol type=\"1\">\r\n<li>表示函数调用与定义时，函数名与左括号之间没有空格。</li>\r\n<li>其他情况时，前面位置的语法元素与左括号之间，都有一个空格。</li>\r\n</ol>\r\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2>\r\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3>\r\n<p>每个类中包含了一个特殊的方法\r\n<strong>constructor()</strong>，它是类的<strong>构造函数</strong>，这种方法用于创建和初始化一个由\r\n<strong>class</strong> 创建的对象。</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Runoob</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, url</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">url</span> = url;<br>  &#125;<br>  <span class=\"hljs-title function_\">work</span>(<span class=\"hljs-params\">age</span>)&#123;<span class=\"hljs-comment\">//create its function</span><br>      <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"继承-extends\"><a href=\"#继承-extends\" class=\"headerlink\" title=\"继承-extends\"></a>继承 extends</h3>\r\n<p>当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类（父类）</strong>，新建的类称为<strong>派生类（子类）</strong>。</p>\r\n<p><strong>super()</strong>\r\n方法引用父类的构造方法。需要在自己的构造方法中使用。</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;...&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animal</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, breed</span>) &#123;<br>        <span class=\"hljs-variable language_\">super</span>(name);<br>        ....<br>    &#125;<br>    <span class=\"hljs-title function_\">bark</span>(<span class=\"hljs-params\"></span>)&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3>\r\n<p>静态方法是使用 static\r\n关键字修饰的方法，又叫类方法，属于类的，但不属于对象，在实例化对象之前可以通过\r\n<strong>类名.方法名</strong> 调用静态方法。</p>\r\n<p>静态方法不能在对象上调用，只能在类中调用。</p>\r\n<h2 id=\"export-import\"><a href=\"#export-import\" class=\"headerlink\" title=\"export-import\"></a>export &amp; import</h2>\r\n<p><a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export\">export</a></p>\r\n<p>命名导出和默认导出</p>\r\n<p>命名导出一般只能用相同的名字，但可以换名字 export { myFunction as\r\nfunction1, myVariable as variable };</p>\r\n<p>默认导出一个模块只能有一个，在导入时可以定义名字</p>\r\n<p>type=\"module\" 的 script 元素</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">// 导出列表<br>export &#123; name1, name2, …, nameN &#125;;<br><br>// 重命名导出<br>export &#123; variable1 as name1, variable2 as name2, …, nameN &#125;;<br></code></pre></td></tr></table></figure>\r\n<p><a\r\nhref=\"https://cloud.tencent.com/developer/article/1548972\">require和import及其用法</a></p>\r\n<h2 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h2>\r\n<p>let obj1 = {a:1, b:2};</p>\r\n<p>let obj3 = obj1;</p>\r\n<p>obj3与obj1的内存位置相同，会同步修改</p>\r\n<blockquote>\r\n<p>在开始之前，我先普及一些基础知识。Javascript\r\n的对象只是指向内存中某个位置的指针。这些指针是可变的，也就是说，它们可以重新被赋值。所以仅仅复制这个指针，其结果是有两个指针指向内存中的同一个地址。</p>\r\n</blockquote>\r\n<p>浅拷贝（只能在所有属性都是值的情况下拷贝）</p>\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj1 = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&quot;foo&quot;</span> &#125;;<br><span class=\"hljs-keyword\">var</span> obj2 = &#123; <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">&quot;bar&quot;</span> &#125;;<br><span class=\"hljs-keyword\">var</span> copySpread = &#123; ...obj1, ...obj2 &#125;;<br><span class=\"hljs-comment\">// Object &#123; foo: &quot;foo&quot;, bar: &quot;bar&quot; &#125;</span><br><span class=\"hljs-keyword\">var</span> copyAssign = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, obj1, obj2);<br><span class=\"hljs-comment\">// Object &#123; foo: &quot;foo&quot;, bar: &quot;bar&quot; &#125;</span><br></code></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h2\r\nid=\"变量名要使用let和const完全摒弃var\">变量名要使用let和const，完全摒弃var</h2>\r\n<p>let只在作用域里，与c++</p>\r\n<p>var定义后在哪里都可以用</p>\r\n<h2 id=\"get-document中的对象\"><a href=\"#get-document中的对象\" class=\"headerlink\" title=\"get-document中的对象\"></a>get document中的对象</h2>\r\n<p><code>const canvas = document.getElementById(\"canvas\");</code></p>\r\n<p><code>const a = document.getElementsByClass(\"num\");//注意a是个数组</code></p>\r\n<p>建议搞个函数</p>\r\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">function a()&#123;return …;&#125;<br></code></pre></td></tr></table></figure>\r\n<p>可以函数里定义函数</p>\r\n<h2 id=\"定义数组\"><a href=\"#定义数组\" class=\"headerlink\" title=\"定义数组\"></a>定义数组</h2>\r\n<p>let s=[];</p>\r\n<p>## parseInt();</p>\r\n<p>转换为整数（什么类型都可）</p>\r\n<h2 id=\"string处理\"><a href=\"#string处理\" class=\"headerlink\" title=\"string处理\"></a>string处理</h2>\r\n<p>不能s[i]='a'</p>\r\n<p>用substring和+</p>\r\n<p>s.toUpperCase()全部转大写</p>\r\n<h2 id=\"要用-而不是\"><a href=\"#要用-而不是\" class=\"headerlink\" title=\"要用-而不是\"></a>要用 <code>===</code> 而不是 <code>==</code></h2>\r\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">(param1, param2, …, paramN) =&gt; &#123; statements &#125;<br><br>(param1, param2, …, paramN) =&gt; expression<br>//相当于：(param1, param2, …, paramN) =&gt;&#123; return expression; &#125;<br></code></pre></td></tr></table></figure>\r\n<p>不会创建自己的this</p>\r\n<h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">function f(a, b, ...theArgs) &#123;<br>  for(int i=0;i&lt;theArgs.length;i++)&#123;<br>  \tconsole.log(theArgs[i]);<br>  &#125;<br>&#125;<br>f(0,0,1,2,3);//[1,2,3]<br>f(1,2,3,4,5,3,2);//[3,4,5,3,2]<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"getboundingclientrects\"><a href=\"#getboundingclientrects\" class=\"headerlink\" title=\"getboundingclientrects\"></a>getBoundingClientRects()</h2>\r\n<p>返回值是一个 <a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect\"><code>DOMRect</code></a>\r\n对象，是包含整个元素的最小矩形（包括 <code>padding</code> 和\r\n<code>border-width</code>）。该对象使用\r\n<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>、<code>x</code>、<code>y</code>、<code>width</code>\r\n和 <code>height</code>\r\n这几个以像素为单位的只读属性描述整个矩形的位置和大小。除了\r\n<code>width</code> 和 <code>height</code>\r\n以外的属性是相对于视图窗口的左上角来计算的。</p>\r\n<p>该方法返回的 <a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect\"><code>DOMRect</code></a>\r\n对象中的 <code>width</code> 和 <code>height</code> 属性是包含了\r\n<code>padding</code> 和 <code>border-width</code>\r\n的，而不仅仅是内容部分的宽度和高度。在标准盒子模型中，这两个属性值分别与元素的\r\n<code>width</code>/<code>height</code> + <code>padding</code> +\r\n<code>border-width</code> 相等。而如果是 <a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing\"><code>box-sizing: border-box</code></a>，两个属性则直接与元素的\r\n<code>width</code> 或 <code>height</code> 相等。</p>\r\n<h2 id=\"改属性时注意是字符串\"><a href=\"#改属性时注意是字符串\" class=\"headerlink\" title=\"改属性时注意是字符串\"></a>改属性时注意是字符串</h2>\r\n<p>out.style.left = event.x-0.5*box.width+\"px\";</p>\r\n<h2 id=\"指数运算符\"><a href=\"#指数运算符\" class=\"headerlink\" title=\"指数运算符\"></a><code>**</code> 指数运算符</h2>\r\n<p>右结合</p>\r\n<p><code>2 ** 3 ** 4</code> 即 <span\r\nclass=\"math inline\">\\(2^{(3^4)}\\)</span></p>\r\n<h2 id=\"error对象和throw语句\"><a href=\"#error对象和throw语句\" class=\"headerlink\" title=\"error对象和throw语句\"></a>Error对象和throw语句</h2>\r\n<p><code>throw new Error(\"这是一个错误\");</code>\r\n手动中断程序执行，抛出一个错误</p>\r\n<p>对于 JavaScript\r\n引擎来说，遇到<code>throw</code>语句，程序就中止了。引擎会接收到<code>throw</code>抛出的信息，可能是一个错误实例，也可能是其他类型的值。</p>\r\n<p>try...catch 结构</p>\r\n<p><code>try</code>代码块抛出错误（上例用的是<code>throw</code>语句），JavaScript\r\n引擎就立即把代码的执行，转到<code>catch</code>代码块，或者说错误被<code>catch</code>代码块捕获了。<code>catch</code>接受一个参数，表示<code>try</code>代码块抛出的值。</p>\r\n<p><code>catch</code>代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去。</p>\r\n<p><code>try...catch</code>结构允许在最后添加一个<code>finally</code>代码块，表示不管是否出现错误，都必需在最后运行的语句。(就算是return)</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">openFile();<br><br>try &#123;<br>  writeFile(Data);<br>&#125; catch(e) &#123;<br>  handleError(e);<br>&#125; finally &#123;<br>  closeFile();<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<p>上面代码首先打开一个文件，然后在<code>try</code>代码块中写入文件，如果没有发生错误，则运行<code>finally</code>代码块关闭文件；一旦发生错误，则先使用<code>catch</code>代码块处理错误，再使用<code>finally</code>代码块关闭文件。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">try &#123;<br>  try &#123;<br>    consle.log(&#x27;Hello world!&#x27;); // 报错<br>  &#125; finally &#123;<br>    console.log(&#x27;Finally&#x27;);<br>  &#125;<br>  console.log(&#x27;Will I run?&#x27;);<br>&#125; catch(error) &#123;<br>  console.error(error.message);<br>&#125;<br>// Finally<br>// consle is not defined<br></code></pre></td></tr></table></figure>\r\n<h2 id=\"码风\"><a href=\"#码风\" class=\"headerlink\" title=\"码风\"></a>码风</h2>\r\n<ol type=\"1\">\r\n<li>表示函数调用与定义时，函数名与左括号之间没有空格。</li>\r\n<li>其他情况时，前面位置的语法元素与左括号之间，都有一个空格。</li>\r\n</ol>\r\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2>\r\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3>\r\n<p>每个类中包含了一个特殊的方法\r\n<strong>constructor()</strong>，它是类的<strong>构造函数</strong>，这种方法用于创建和初始化一个由\r\n<strong>class</strong> 创建的对象。</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Runoob</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, url</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">url</span> = url;<br>  &#125;<br>  <span class=\"hljs-title function_\">work</span>(<span class=\"hljs-params\">age</span>)&#123;<span class=\"hljs-comment\">//create its function</span><br>      <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"继承-extends\"><a href=\"#继承-extends\" class=\"headerlink\" title=\"继承-extends\"></a>继承 extends</h3>\r\n<p>当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类（父类）</strong>，新建的类称为<strong>派生类（子类）</strong>。</p>\r\n<p><strong>super()</strong>\r\n方法引用父类的构造方法。需要在自己的构造方法中使用。</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;...&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animal</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, breed</span>) &#123;<br>        <span class=\"hljs-variable language_\">super</span>(name);<br>        ....<br>    &#125;<br>    <span class=\"hljs-title function_\">bark</span>(<span class=\"hljs-params\"></span>)&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\r\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3>\r\n<p>静态方法是使用 static\r\n关键字修饰的方法，又叫类方法，属于类的，但不属于对象，在实例化对象之前可以通过\r\n<strong>类名.方法名</strong> 调用静态方法。</p>\r\n<p>静态方法不能在对象上调用，只能在类中调用。</p>\r\n<h2 id=\"export-import\"><a href=\"#export-import\" class=\"headerlink\" title=\"export-import\"></a>export &amp; import</h2>\r\n<p><a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export\">export</a></p>\r\n<p>命名导出和默认导出</p>\r\n<p>命名导出一般只能用相同的名字，但可以换名字 export { myFunction as\r\nfunction1, myVariable as variable };</p>\r\n<p>默认导出一个模块只能有一个，在导入时可以定义名字</p>\r\n<p>type=\"module\" 的 script 元素</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">// 导出列表<br>export &#123; name1, name2, …, nameN &#125;;<br><br>// 重命名导出<br>export &#123; variable1 as name1, variable2 as name2, …, nameN &#125;;<br></code></pre></td></tr></table></figure>\r\n<p><a\r\nhref=\"https://cloud.tencent.com/developer/article/1548972\">require和import及其用法</a></p>\r\n<h2 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h2>\r\n<p>let obj1 = {a:1, b:2};</p>\r\n<p>let obj3 = obj1;</p>\r\n<p>obj3与obj1的内存位置相同，会同步修改</p>\r\n<blockquote>\r\n<p>在开始之前，我先普及一些基础知识。Javascript\r\n的对象只是指向内存中某个位置的指针。这些指针是可变的，也就是说，它们可以重新被赋值。所以仅仅复制这个指针，其结果是有两个指针指向内存中的同一个地址。</p>\r\n</blockquote>\r\n<p>浅拷贝（只能在所有属性都是值的情况下拷贝）</p>\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj1 = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&quot;foo&quot;</span> &#125;;<br><span class=\"hljs-keyword\">var</span> obj2 = &#123; <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">&quot;bar&quot;</span> &#125;;<br><span class=\"hljs-keyword\">var</span> copySpread = &#123; ...obj1, ...obj2 &#125;;<br><span class=\"hljs-comment\">// Object &#123; foo: &quot;foo&quot;, bar: &quot;bar&quot; &#125;</span><br><span class=\"hljs-keyword\">var</span> copyAssign = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(&#123;&#125;, obj1, obj2);<br><span class=\"hljs-comment\">// Object &#123; foo: &quot;foo&quot;, bar: &quot;bar&quot; &#125;</span><br></code></pre></td></tr></table></figure>\r\n"},{"title":"Python","data":null,"_content":"## 杂记\n\n- for循环好办法\n\t- for tittle , address, price, img, name , sex in zip(tittles , addresses, prices, imgs, names, sexs)  \n\t- list(zip()) 把 zip 对象变成 list\n\t\n- 通过使用 `if __name__ == '__main__':` 条件，我们可以区分出程序是直接执行还是作为模块导入的。\n\n\t这样，我们可以在直接执行时运行一些特定的代码，而在作为模块导入时，这些代码将不会被执行。\n\t\n- 列表的高端用法\n\n\t- `list1 = [a*a for a in range(1,10)]`\n\n- time.sleep(2)\n\n\t- 在Python中，`time.sleep(2)`是一个用于暂停程序执行的函数。它会使程序在执行到该语句时停顿2秒钟，然后再继续执行后面的代码。`time`是一个Python内置的模块\n\n- json解析\n\n  ```\n  # 使用loads()方法将JSON字符串转换为Python对象\n  person = json.loads(data)\n  # dumps() 反过来\n  ```\n\n- 在Python中，`enumerate()`函数用于在迭代过程中同时获取元素的索引和值。\n\t- ```for index, fruit in enumerate(fruits):\n\t\t    print(index, fruit)\n \n- `except requests.RequestException:`\n\t- requests.RequestException 是Python中requests库定义的一个基本异常类。这个异常类是其他异常类的父类，可以捕获所有请求过程中的异常。\n\n- exc_info参数是一个布尔值，默认值为False。如果将exc_info设置为True，logging模块将会在日志中输出异常的详细信息，包括异常类型、异常值和traceback \n\n\t- ```logging.error('error occurred while scraping %s', url, exc_info=True)```\n\t\n- 在re模块中，search() 第一个匹配到的。match_object.span()\n\t这将返回一个元组，其中包含匹配项的起始位置和结束位置。match_object.group() 这将返回匹配的字符串。\n\n\t- 还有findall()\n\n- 你可以使用`sort()`函数来对包含字典的列表按照特定的键进行排序。在Python中，`sort()`函数是用于对可变序列进行原地排序的方法。下面是一个示例代码，演示如何使用`sort()`函数对包含字典的列表按照特定键进行排序：\n\n\t```python\n\t# 创建一个包含字典的列表\n\tpeople = [\n\t    {'name': 'Alice', 'age': 25},\n\t    {'name': 'Bob', 'age': 30},\n\t    {'name': 'Charlie', 'age': 20}\n\t]\n\t\n\t# 使用lambda函数作为排序的key参数，指定按照age键进行排序\n\tpeople.sort(key=lambda x: x['age'])\n\t\n\t# 打印排序后的结果\n\tfor person in people:\n\t    print(person)\n\t```\n\n\t运行上述代码，输出结果如下：\n\n\t```json\n\t{'name': 'Charlie', 'age': 20}\n\t{'name': 'Alice', 'age': 25}\n\t{'name': 'Bob', 'age': 30}\n\t```\n\n\t在这个示例中，我们使用了lambda函数作为`sort()`函数的key参数，指定按照字典中的age键进行排序。lambda函数接受一个字典作为参数，并返回该字典的age值。`sort()`函数根据返回的age值进行排序，从而实现按照age键进行排序的效果。\n\n\t你也可以根据需要指定其他键进行排序，只需将lambda函数中的键名修改为你想要排序的键即可。\n\n\t希望这个示例能帮助你理解如何使用`sort()`函数对包含字典的列表按照特定键进行排序。如果你还有其他问题，请随时提问。\n\n- ```name_str = ''.join([now_char['text'] for now_char in char_list])```\n\n- 所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的\n\n- @property 和 @属性名.setter 装饰器\n```python\nclass Person:\n\t@property\n\tdef name(self):\n\t\treturn self._name\n\t\n\t@name.setter\n\tdef name(self, value):\n\t\tif isinstance(value, str):\n\t\t\tself._name = value\n\t\telse:\n\t\t\traise ValueError(\"Name must be a string\")\n\t\t\nprint(person.name)  # 输出: Alice\nperson.name = \"Bob\"  # 更新名字\n```\n\n- 作用域和命名空间\n\t- global 和 nonlocal\n```python\nnum = 1 \ndef fun1(): \n\tglobal num # 需要使用 global 关键字声明 \n\tprint(num) \n```\n\n```python\ndef outer(): \n\tnum = 10 \n\tdef inner(): \n\t\tnonlocal num # nonlocal关键字声明 \n\t\tprint(num)\n```\n\n- 静态方法和类方法\n\t- 静态方法 ：类的静态方法和我们自定义的函数基本没什么区别，没有 self，且不能访问类属性，实际项目中很少用到，因为可以使用普通函数替代。@staticmethod 装饰器声明。\n\t- 类方法：必须包含一个参数，通常约定为 cls ，cls 代表 类本身（可以用 cls() 实例化 class），这个参数也不需要我们传值。\n\n- 处理数组：insert() 方法可以在列表的指定位置插入一个元素。如果你想在列表的最前面添加一个元素，可以使用 insert(0, element)，其中 0 表示列表的第一个位置。  另一种方法是通过拼接（concatenation）来创建一个新的列表，将新元素和原列表合并。b = [0] + b\n\n- 输入\n```\na,b = map(int,input().split());  \nprint(a+b)\n```\n\n- print\n\t在Python中，print 函数默认在输出之后添加一个换行符。如果你不希望print函数在输出后换行，可以使用end参数来指定不换行。end参数的默认值是\\n，表示换行。如果你想要在同一行输出多个内容，可以将end参数设置为一个空字符串''。","source":"_posts/语言/Python.md","raw":"---\ntitle: Python\ndata: \ntags:\n  - Python\n  - 语言学习\n---\n## 杂记\n\n- for循环好办法\n\t- for tittle , address, price, img, name , sex in zip(tittles , addresses, prices, imgs, names, sexs)  \n\t- list(zip()) 把 zip 对象变成 list\n\t\n- 通过使用 `if __name__ == '__main__':` 条件，我们可以区分出程序是直接执行还是作为模块导入的。\n\n\t这样，我们可以在直接执行时运行一些特定的代码，而在作为模块导入时，这些代码将不会被执行。\n\t\n- 列表的高端用法\n\n\t- `list1 = [a*a for a in range(1,10)]`\n\n- time.sleep(2)\n\n\t- 在Python中，`time.sleep(2)`是一个用于暂停程序执行的函数。它会使程序在执行到该语句时停顿2秒钟，然后再继续执行后面的代码。`time`是一个Python内置的模块\n\n- json解析\n\n  ```\n  # 使用loads()方法将JSON字符串转换为Python对象\n  person = json.loads(data)\n  # dumps() 反过来\n  ```\n\n- 在Python中，`enumerate()`函数用于在迭代过程中同时获取元素的索引和值。\n\t- ```for index, fruit in enumerate(fruits):\n\t\t    print(index, fruit)\n \n- `except requests.RequestException:`\n\t- requests.RequestException 是Python中requests库定义的一个基本异常类。这个异常类是其他异常类的父类，可以捕获所有请求过程中的异常。\n\n- exc_info参数是一个布尔值，默认值为False。如果将exc_info设置为True，logging模块将会在日志中输出异常的详细信息，包括异常类型、异常值和traceback \n\n\t- ```logging.error('error occurred while scraping %s', url, exc_info=True)```\n\t\n- 在re模块中，search() 第一个匹配到的。match_object.span()\n\t这将返回一个元组，其中包含匹配项的起始位置和结束位置。match_object.group() 这将返回匹配的字符串。\n\n\t- 还有findall()\n\n- 你可以使用`sort()`函数来对包含字典的列表按照特定的键进行排序。在Python中，`sort()`函数是用于对可变序列进行原地排序的方法。下面是一个示例代码，演示如何使用`sort()`函数对包含字典的列表按照特定键进行排序：\n\n\t```python\n\t# 创建一个包含字典的列表\n\tpeople = [\n\t    {'name': 'Alice', 'age': 25},\n\t    {'name': 'Bob', 'age': 30},\n\t    {'name': 'Charlie', 'age': 20}\n\t]\n\t\n\t# 使用lambda函数作为排序的key参数，指定按照age键进行排序\n\tpeople.sort(key=lambda x: x['age'])\n\t\n\t# 打印排序后的结果\n\tfor person in people:\n\t    print(person)\n\t```\n\n\t运行上述代码，输出结果如下：\n\n\t```json\n\t{'name': 'Charlie', 'age': 20}\n\t{'name': 'Alice', 'age': 25}\n\t{'name': 'Bob', 'age': 30}\n\t```\n\n\t在这个示例中，我们使用了lambda函数作为`sort()`函数的key参数，指定按照字典中的age键进行排序。lambda函数接受一个字典作为参数，并返回该字典的age值。`sort()`函数根据返回的age值进行排序，从而实现按照age键进行排序的效果。\n\n\t你也可以根据需要指定其他键进行排序，只需将lambda函数中的键名修改为你想要排序的键即可。\n\n\t希望这个示例能帮助你理解如何使用`sort()`函数对包含字典的列表按照特定键进行排序。如果你还有其他问题，请随时提问。\n\n- ```name_str = ''.join([now_char['text'] for now_char in char_list])```\n\n- 所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的\n\n- @property 和 @属性名.setter 装饰器\n```python\nclass Person:\n\t@property\n\tdef name(self):\n\t\treturn self._name\n\t\n\t@name.setter\n\tdef name(self, value):\n\t\tif isinstance(value, str):\n\t\t\tself._name = value\n\t\telse:\n\t\t\traise ValueError(\"Name must be a string\")\n\t\t\nprint(person.name)  # 输出: Alice\nperson.name = \"Bob\"  # 更新名字\n```\n\n- 作用域和命名空间\n\t- global 和 nonlocal\n```python\nnum = 1 \ndef fun1(): \n\tglobal num # 需要使用 global 关键字声明 \n\tprint(num) \n```\n\n```python\ndef outer(): \n\tnum = 10 \n\tdef inner(): \n\t\tnonlocal num # nonlocal关键字声明 \n\t\tprint(num)\n```\n\n- 静态方法和类方法\n\t- 静态方法 ：类的静态方法和我们自定义的函数基本没什么区别，没有 self，且不能访问类属性，实际项目中很少用到，因为可以使用普通函数替代。@staticmethod 装饰器声明。\n\t- 类方法：必须包含一个参数，通常约定为 cls ，cls 代表 类本身（可以用 cls() 实例化 class），这个参数也不需要我们传值。\n\n- 处理数组：insert() 方法可以在列表的指定位置插入一个元素。如果你想在列表的最前面添加一个元素，可以使用 insert(0, element)，其中 0 表示列表的第一个位置。  另一种方法是通过拼接（concatenation）来创建一个新的列表，将新元素和原列表合并。b = [0] + b\n\n- 输入\n```\na,b = map(int,input().split());  \nprint(a+b)\n```\n\n- print\n\t在Python中，print 函数默认在输出之后添加一个换行符。如果你不希望print函数在输出后换行，可以使用end参数来指定不换行。end参数的默认值是\\n，表示换行。如果你想要在同一行输出多个内容，可以将end参数设置为一个空字符串''。","slug":"语言/Python","published":1,"date":"2024-09-02T07:56:40.936Z","updated":"2024-11-06T13:04:26.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3wi003cp4wv0h2951jh","content":"<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2>\r\n<ul>\r\n<li><p>for循环好办法</p>\r\n<ul>\r\n<li>for tittle , address, price, img, name , sex in zip(tittles ,\r\naddresses, prices, imgs, names, sexs)<br />\r\n</li>\r\n<li>list(zip()) 把 zip 对象变成 list</li>\r\n</ul></li>\r\n<li><p>通过使用 <code>if __name__ == '__main__':</code>\r\n条件，我们可以区分出程序是直接执行还是作为模块导入的。</p>\r\n<p>这样，我们可以在直接执行时运行一些特定的代码，而在作为模块导入时，这些代码将不会被执行。</p></li>\r\n<li><p>列表的高端用法</p>\r\n<ul>\r\n<li><code>list1 = [a*a for a in range(1,10)]</code></li>\r\n</ul></li>\r\n<li><p>time.sleep(2)</p>\r\n<ul>\r\n<li>在Python中，<code>time.sleep(2)</code>是一个用于暂停程序执行的函数。它会使程序在执行到该语句时停顿2秒钟，然后再继续执行后面的代码。<code>time</code>是一个Python内置的模块</li>\r\n</ul></li>\r\n<li><p>json解析</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"># 使用loads()方法将JSON字符串转换为Python对象<br>person = json.loads(data)<br># dumps() 反过来<br></code></pre></td></tr></table></figure></li>\r\n<li><p>在Python中，<code>enumerate()</code>函数用于在迭代过程中同时获取元素的索引和值。</p>\r\n<ul>\r\n<li>```for index, fruit in enumerate(fruits): print(index, fruit)</li>\r\n</ul></li>\r\n<li><p><code>except requests.RequestException:</code></p>\r\n<ul>\r\n<li>requests.RequestException\r\n是Python中requests库定义的一个基本异常类。这个异常类是其他异常类的父类，可以捕获所有请求过程中的异常。</li>\r\n</ul></li>\r\n<li><p>exc_info参数是一个布尔值，默认值为False。如果将exc_info设置为True，logging模块将会在日志中输出异常的详细信息，包括异常类型、异常值和traceback</p>\r\n<ul>\r\n<li><code>logging.error('error occurred while scraping %s', url, exc_info=True)</code></li>\r\n</ul></li>\r\n<li><p>在re模块中，search() 第一个匹配到的。match_object.span()\r\n这将返回一个元组，其中包含匹配项的起始位置和结束位置。match_object.group()\r\n这将返回匹配的字符串。</p>\r\n<ul>\r\n<li>还有findall()</li>\r\n</ul></li>\r\n<li><p>你可以使用<code>sort()</code>函数来对包含字典的列表按照特定的键进行排序。在Python中，<code>sort()</code>函数是用于对可变序列进行原地排序的方法。下面是一个示例代码，演示如何使用<code>sort()</code>函数对包含字典的列表按照特定键进行排序：</p>\r\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 创建一个包含字典的列表</span><br>people = [<br>    &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">25</span>&#125;,<br>    &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">30</span>&#125;,<br>    &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;Charlie&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">20</span>&#125;<br>]<br><br><span class=\"hljs-comment\"># 使用lambda函数作为排序的key参数，指定按照age键进行排序</span><br>people.sort(key=<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;age&#x27;</span>])<br><br><span class=\"hljs-comment\"># 打印排序后的结果</span><br><span class=\"hljs-keyword\">for</span> person <span class=\"hljs-keyword\">in</span> people:<br>    <span class=\"hljs-built_in\">print</span>(person)<br></code></pre></td></tr></table></figure></p>\r\n<p>运行上述代码，输出结果如下：</p>\r\n<p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span>&#x27;name&#x27;<span class=\"hljs-punctuation\">:</span> &#x27;Charlie&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;age&#x27;<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">20</span><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#123;</span>&#x27;name&#x27;<span class=\"hljs-punctuation\">:</span> &#x27;Alice&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;age&#x27;<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">25</span><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#123;</span>&#x27;name&#x27;<span class=\"hljs-punctuation\">:</span> &#x27;Bob&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;age&#x27;<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">30</span><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure></p>\r\n<p>在这个示例中，我们使用了lambda函数作为<code>sort()</code>函数的key参数，指定按照字典中的age键进行排序。lambda函数接受一个字典作为参数，并返回该字典的age值。<code>sort()</code>函数根据返回的age值进行排序，从而实现按照age键进行排序的效果。</p>\r\n<p>你也可以根据需要指定其他键进行排序，只需将lambda函数中的键名修改为你想要排序的键即可。</p>\r\n<p>希望这个示例能帮助你理解如何使用<code>sort()</code>函数对包含字典的列表按照特定键进行排序。如果你还有其他问题，请随时提问。</p></li>\r\n<li><p><code>name_str = ''.join([now_char['text'] for now_char in char_list])</code></p></li>\r\n<li><p>所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的</p></li>\r\n<li><p><span class=\"citation\" data-cites=\"property\">@property</span> 和\r\n<span class=\"citation\" data-cites=\"属性名.setter\">@属性名.setter</span>\r\n装饰器 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>:<br><span class=\"hljs-meta\">\t@property</span><br>\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\">self</span>):<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>._name<br>\t<br><span class=\"hljs-meta\">\t@name.setter</span><br>\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\">self, value</span>):<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(value, <span class=\"hljs-built_in\">str</span>):<br>\t\t\t<span class=\"hljs-variable language_\">self</span>._name = value<br>\t\t<span class=\"hljs-keyword\">else</span>:<br>\t\t\t<span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Name must be a string&quot;</span>)<br>\t\t<br><span class=\"hljs-built_in\">print</span>(person.name)  <span class=\"hljs-comment\"># 输出: Alice</span><br>person.name = <span class=\"hljs-string\">&quot;Bob&quot;</span>  <span class=\"hljs-comment\"># 更新名字</span><br></code></pre></td></tr></table></figure></p></li>\r\n<li><p>作用域和命名空间</p>\r\n<ul>\r\n<li>global 和 nonlocal <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">num = <span class=\"hljs-number\">1</span> <br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fun1</span>(): <br>\t<span class=\"hljs-keyword\">global</span> num <span class=\"hljs-comment\"># 需要使用 global 关键字声明 </span><br>\t<span class=\"hljs-built_in\">print</span>(num) <br></code></pre></td></tr></table></figure></li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">outer</span>(): <br>\tnum = <span class=\"hljs-number\">10</span> <br>\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inner</span>(): <br>\t\t<span class=\"hljs-keyword\">nonlocal</span> num <span class=\"hljs-comment\"># nonlocal关键字声明 </span><br>\t\t<span class=\"hljs-built_in\">print</span>(num)<br></code></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p>静态方法和类方法</p>\r\n<ul>\r\n<li>静态方法 ：类的静态方法和我们自定义的函数基本没什么区别，没有\r\nself，且不能访问类属性，实际项目中很少用到，因为可以使用普通函数替代。<span\r\nclass=\"citation\" data-cites=\"staticmethod\">@staticmethod</span>\r\n装饰器声明。</li>\r\n<li>类方法：必须包含一个参数，通常约定为 cls ，cls 代表 类本身（可以用\r\ncls() 实例化 class），这个参数也不需要我们传值。</li>\r\n</ul></li>\r\n<li><p>处理数组：insert()\r\n方法可以在列表的指定位置插入一个元素。如果你想在列表的最前面添加一个元素，可以使用\r\ninsert(0, element)，其中 0 表示列表的第一个位置。\r\n另一种方法是通过拼接（concatenation）来创建一个新的列表，将新元素和原列表合并。b\r\n= [0] + b</p></li>\r\n<li><p>输入 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">a,b = map(int,input().split());  <br>print(a+b)<br></code></pre></td></tr></table></figure></p></li>\r\n<li><p>print 在Python中，print\r\n函数默认在输出之后添加一个换行符。如果你不希望print函数在输出后换行，可以使用end参数来指定不换行。end参数的默认值是，表示换行。如果你想要在同一行输出多个内容，可以将end参数设置为一个空字符串''。</p></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2>\r\n<ul>\r\n<li><p>for循环好办法</p>\r\n<ul>\r\n<li>for tittle , address, price, img, name , sex in zip(tittles ,\r\naddresses, prices, imgs, names, sexs)<br />\r\n</li>\r\n<li>list(zip()) 把 zip 对象变成 list</li>\r\n</ul></li>\r\n<li><p>通过使用 <code>if __name__ == '__main__':</code>\r\n条件，我们可以区分出程序是直接执行还是作为模块导入的。</p>\r\n<p>这样，我们可以在直接执行时运行一些特定的代码，而在作为模块导入时，这些代码将不会被执行。</p></li>\r\n<li><p>列表的高端用法</p>\r\n<ul>\r\n<li><code>list1 = [a*a for a in range(1,10)]</code></li>\r\n</ul></li>\r\n<li><p>time.sleep(2)</p>\r\n<ul>\r\n<li>在Python中，<code>time.sleep(2)</code>是一个用于暂停程序执行的函数。它会使程序在执行到该语句时停顿2秒钟，然后再继续执行后面的代码。<code>time</code>是一个Python内置的模块</li>\r\n</ul></li>\r\n<li><p>json解析</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"># 使用loads()方法将JSON字符串转换为Python对象<br>person = json.loads(data)<br># dumps() 反过来<br></code></pre></td></tr></table></figure></li>\r\n<li><p>在Python中，<code>enumerate()</code>函数用于在迭代过程中同时获取元素的索引和值。</p>\r\n<ul>\r\n<li>```for index, fruit in enumerate(fruits): print(index, fruit)</li>\r\n</ul></li>\r\n<li><p><code>except requests.RequestException:</code></p>\r\n<ul>\r\n<li>requests.RequestException\r\n是Python中requests库定义的一个基本异常类。这个异常类是其他异常类的父类，可以捕获所有请求过程中的异常。</li>\r\n</ul></li>\r\n<li><p>exc_info参数是一个布尔值，默认值为False。如果将exc_info设置为True，logging模块将会在日志中输出异常的详细信息，包括异常类型、异常值和traceback</p>\r\n<ul>\r\n<li><code>logging.error('error occurred while scraping %s', url, exc_info=True)</code></li>\r\n</ul></li>\r\n<li><p>在re模块中，search() 第一个匹配到的。match_object.span()\r\n这将返回一个元组，其中包含匹配项的起始位置和结束位置。match_object.group()\r\n这将返回匹配的字符串。</p>\r\n<ul>\r\n<li>还有findall()</li>\r\n</ul></li>\r\n<li><p>你可以使用<code>sort()</code>函数来对包含字典的列表按照特定的键进行排序。在Python中，<code>sort()</code>函数是用于对可变序列进行原地排序的方法。下面是一个示例代码，演示如何使用<code>sort()</code>函数对包含字典的列表按照特定键进行排序：</p>\r\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 创建一个包含字典的列表</span><br>people = [<br>    &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">25</span>&#125;,<br>    &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">30</span>&#125;,<br>    &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;Charlie&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">20</span>&#125;<br>]<br><br><span class=\"hljs-comment\"># 使用lambda函数作为排序的key参数，指定按照age键进行排序</span><br>people.sort(key=<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;age&#x27;</span>])<br><br><span class=\"hljs-comment\"># 打印排序后的结果</span><br><span class=\"hljs-keyword\">for</span> person <span class=\"hljs-keyword\">in</span> people:<br>    <span class=\"hljs-built_in\">print</span>(person)<br></code></pre></td></tr></table></figure></p>\r\n<p>运行上述代码，输出结果如下：</p>\r\n<p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span>&#x27;name&#x27;<span class=\"hljs-punctuation\">:</span> &#x27;Charlie&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;age&#x27;<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">20</span><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#123;</span>&#x27;name&#x27;<span class=\"hljs-punctuation\">:</span> &#x27;Alice&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;age&#x27;<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">25</span><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#123;</span>&#x27;name&#x27;<span class=\"hljs-punctuation\">:</span> &#x27;Bob&#x27;<span class=\"hljs-punctuation\">,</span> &#x27;age&#x27;<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">30</span><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure></p>\r\n<p>在这个示例中，我们使用了lambda函数作为<code>sort()</code>函数的key参数，指定按照字典中的age键进行排序。lambda函数接受一个字典作为参数，并返回该字典的age值。<code>sort()</code>函数根据返回的age值进行排序，从而实现按照age键进行排序的效果。</p>\r\n<p>你也可以根据需要指定其他键进行排序，只需将lambda函数中的键名修改为你想要排序的键即可。</p>\r\n<p>希望这个示例能帮助你理解如何使用<code>sort()</code>函数对包含字典的列表按照特定键进行排序。如果你还有其他问题，请随时提问。</p></li>\r\n<li><p><code>name_str = ''.join([now_char['text'] for now_char in char_list])</code></p></li>\r\n<li><p>所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的</p></li>\r\n<li><p><span class=\"citation\" data-cites=\"property\">@property</span> 和\r\n<span class=\"citation\" data-cites=\"属性名.setter\">@属性名.setter</span>\r\n装饰器 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>:<br><span class=\"hljs-meta\">\t@property</span><br>\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\">self</span>):<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>._name<br>\t<br><span class=\"hljs-meta\">\t@name.setter</span><br>\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\">self, value</span>):<br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(value, <span class=\"hljs-built_in\">str</span>):<br>\t\t\t<span class=\"hljs-variable language_\">self</span>._name = value<br>\t\t<span class=\"hljs-keyword\">else</span>:<br>\t\t\t<span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Name must be a string&quot;</span>)<br>\t\t<br><span class=\"hljs-built_in\">print</span>(person.name)  <span class=\"hljs-comment\"># 输出: Alice</span><br>person.name = <span class=\"hljs-string\">&quot;Bob&quot;</span>  <span class=\"hljs-comment\"># 更新名字</span><br></code></pre></td></tr></table></figure></p></li>\r\n<li><p>作用域和命名空间</p>\r\n<ul>\r\n<li>global 和 nonlocal <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">num = <span class=\"hljs-number\">1</span> <br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fun1</span>(): <br>\t<span class=\"hljs-keyword\">global</span> num <span class=\"hljs-comment\"># 需要使用 global 关键字声明 </span><br>\t<span class=\"hljs-built_in\">print</span>(num) <br></code></pre></td></tr></table></figure></li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">outer</span>(): <br>\tnum = <span class=\"hljs-number\">10</span> <br>\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inner</span>(): <br>\t\t<span class=\"hljs-keyword\">nonlocal</span> num <span class=\"hljs-comment\"># nonlocal关键字声明 </span><br>\t\t<span class=\"hljs-built_in\">print</span>(num)<br></code></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p>静态方法和类方法</p>\r\n<ul>\r\n<li>静态方法 ：类的静态方法和我们自定义的函数基本没什么区别，没有\r\nself，且不能访问类属性，实际项目中很少用到，因为可以使用普通函数替代。<span\r\nclass=\"citation\" data-cites=\"staticmethod\">@staticmethod</span>\r\n装饰器声明。</li>\r\n<li>类方法：必须包含一个参数，通常约定为 cls ，cls 代表 类本身（可以用\r\ncls() 实例化 class），这个参数也不需要我们传值。</li>\r\n</ul></li>\r\n<li><p>处理数组：insert()\r\n方法可以在列表的指定位置插入一个元素。如果你想在列表的最前面添加一个元素，可以使用\r\ninsert(0, element)，其中 0 表示列表的第一个位置。\r\n另一种方法是通过拼接（concatenation）来创建一个新的列表，将新元素和原列表合并。b\r\n= [0] + b</p></li>\r\n<li><p>输入 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">a,b = map(int,input().split());  <br>print(a+b)<br></code></pre></td></tr></table></figure></p></li>\r\n<li><p>print 在Python中，print\r\n函数默认在输出之后添加一个换行符。如果你不希望print函数在输出后换行，可以使用end参数来指定不换行。end参数的默认值是，表示换行。如果你想要在同一行输出多个内容，可以将end参数设置为一个空字符串''。</p></li>\r\n</ul>\r\n"},{"title":"阅读杂记","data":"2024-09-17T16:00:00.000Z","_content":"# How to Ask Question The Smart Way\n\n- 值得反复咀嚼玩味的好问题可以提高理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。\n- 表明你已经做了努力, more：一并表达在做了上述努力的过程中所**学到**的东西。他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。\n- 你将会是自己去**挣到**一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，\n- 表现出只要有人能指个正确方向，你就有完成它的能力和决心。\n- 如果是 bug 尽可能地提供一个可以`重现这个问题的可控环境`的方法。\n- 提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是**你**做错了什么。直接声称找到一个 bug 是在质疑他们的能力，会冒犯。\n- 在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。\n- 我想更好地理解 X，可否指点一下哪有好一点说明？如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。\n- 问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。\n- **对初犯者私下回复。** 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。","source":"_posts/阅读笔记/阅读杂记.md","raw":"---\ntitle: 阅读杂记\ndata: 2024-09-18\ntags:\n  - 生活\n---\n# How to Ask Question The Smart Way\n\n- 值得反复咀嚼玩味的好问题可以提高理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。\n- 表明你已经做了努力, more：一并表达在做了上述努力的过程中所**学到**的东西。他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。\n- 你将会是自己去**挣到**一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，\n- 表现出只要有人能指个正确方向，你就有完成它的能力和决心。\n- 如果是 bug 尽可能地提供一个可以`重现这个问题的可控环境`的方法。\n- 提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是**你**做错了什么。直接声称找到一个 bug 是在质疑他们的能力，会冒犯。\n- 在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。\n- 我想更好地理解 X，可否指点一下哪有好一点说明？如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。\n- 问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。\n- **对初犯者私下回复。** 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。","slug":"阅读笔记/阅读杂记","published":1,"date":"2024-09-18T05:46:10.606Z","updated":"2024-09-18T07:00:44.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm64rn3wj003fp4wvbuxo4zgn","content":"<h1 id=\"how-to-ask-question-the-smart-way\">How to Ask Question The Smart\r\nWay</h1>\r\n<ul>\r\n<li>值得反复咀嚼玩味的好问题可以提高理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。</li>\r\n<li>表明你已经做了努力,\r\nmore：一并表达在做了上述努力的过程中所<strong>学到</strong>的东西。他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。</li>\r\n<li>你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题\r\n—— 一个有潜力能贡献社区经验的问题，</li>\r\n<li>表现出只要有人能指个正确方向，你就有完成它的能力和决心。</li>\r\n<li>如果是 bug\r\n尽可能地提供一个可以<code>重现这个问题的可控环境</code>的方法。</li>\r\n<li>提问时，即使你私下非常确信已经发现一个真正的\r\nBug，最好写得像是<strong>你</strong>做错了什么。直接声称找到一个 bug\r\n是在质疑他们的能力，会冒犯。</li>\r\n<li>在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</li>\r\n<li>我想更好地理解\r\nX，可否指点一下哪有好一点说明？如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</li>\r\n<li>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。</li>\r\n<li><strong>对初犯者私下回复。</strong> 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"how-to-ask-question-the-smart-way\">How to Ask Question The Smart\r\nWay</h1>\r\n<ul>\r\n<li>值得反复咀嚼玩味的好问题可以提高理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。</li>\r\n<li>表明你已经做了努力,\r\nmore：一并表达在做了上述努力的过程中所<strong>学到</strong>的东西。他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。</li>\r\n<li>你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题\r\n—— 一个有潜力能贡献社区经验的问题，</li>\r\n<li>表现出只要有人能指个正确方向，你就有完成它的能力和决心。</li>\r\n<li>如果是 bug\r\n尽可能地提供一个可以<code>重现这个问题的可控环境</code>的方法。</li>\r\n<li>提问时，即使你私下非常确信已经发现一个真正的\r\nBug，最好写得像是<strong>你</strong>做错了什么。直接声称找到一个 bug\r\n是在质疑他们的能力，会冒犯。</li>\r\n<li>在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</li>\r\n<li>我想更好地理解\r\nX，可否指点一下哪有好一点说明？如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</li>\r\n<li>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。</li>\r\n<li><strong>对初犯者私下回复。</strong> 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</li>\r\n</ul>\r\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm64rn3vd0006p4wvckrf83gj","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3vg0009p4wv5mot619d"},{"post_id":"cm64rn3vf0008p4wvbrxy4u0c","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3vk000cp4wv93vobvwq"},{"post_id":"cm64rn3v00001p4wvh529hp6b","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3vm000ep4wveg11clwa"},{"post_id":"cm64rn3v00001p4wvh529hp6b","tag_id":"cm64rn3ve0007p4wvgp28aqtm","_id":"cm64rn3vn000hp4wv6bbv001r"},{"post_id":"cm64rn3vg000ap4wv5z2b3yy7","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3vo000jp4wv43lp6bqh"},{"post_id":"cm64rn3vk000dp4wv5uk09ecw","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3vp000mp4wv9i4uaye0"},{"post_id":"cm64rn3vm000fp4wvf0x0b2k3","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3vq000op4wv9t26g593"},{"post_id":"cm64rn3v90002p4wv261o3r19","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3vr000rp4wvg70cbrvi"},{"post_id":"cm64rn3v90002p4wv261o3r19","tag_id":"cm64rn3vn000gp4wvahis9crw","_id":"cm64rn3vs000tp4wvdjgrgigt"},{"post_id":"cm64rn3vc0004p4wvbd3g1abi","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3vt000xp4wv9ouo49k0"},{"post_id":"cm64rn3vc0004p4wvbd3g1abi","tag_id":"cm64rn3vr000qp4wv4am50458","_id":"cm64rn3vt000zp4wvhqjkbaul"},{"post_id":"cm64rn3vd0005p4wv7fjobgex","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3vu0012p4wvhxpwht9p"},{"post_id":"cm64rn3vd0005p4wv7fjobgex","tag_id":"cm64rn3vs000vp4wv8gy365jm","_id":"cm64rn3vv0014p4wv6gcfbol0"},{"post_id":"cm64rn3vn000ip4wv335checn","tag_id":"cm64rn3vu0011p4wv8cp34z51","_id":"cm64rn3vx0018p4wvdtoa57l3"},{"post_id":"cm64rn3vo000kp4wvg4551eal","tag_id":"cm64rn3vu0011p4wv8cp34z51","_id":"cm64rn3vz001cp4wv0qggb4wv"},{"post_id":"cm64rn3vp000np4wvemhgh8tb","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3w0001gp4wv50lg6uf6"},{"post_id":"cm64rn3vp000np4wvemhgh8tb","tag_id":"cm64rn3vu0011p4wv8cp34z51","_id":"cm64rn3w1001ip4wv5qgj2t99"},{"post_id":"cm64rn3vq000pp4wv4zred12b","tag_id":"cm64rn3w0001ep4wv32fwdzod","_id":"cm64rn3w2001lp4wv17m0762f"},{"post_id":"cm64rn3vr000sp4wvgyzn87ky","tag_id":"cm64rn3vu0011p4wv8cp34z51","_id":"cm64rn3w4001sp4wvbg6pas70"},{"post_id":"cm64rn3vr000sp4wvgyzn87ky","tag_id":"cm64rn3w3001np4wvdwe66qtl","_id":"cm64rn3w4001tp4wv51ftd03a"},{"post_id":"cm64rn3vs000up4wv5bwm24zk","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3w4001vp4wv04ey6oz7"},{"post_id":"cm64rn3vs000up4wv5bwm24zk","tag_id":"cm64rn3w3001qp4wv98iu89o3","_id":"cm64rn3w4001wp4wv0li06ek6"},{"post_id":"cm64rn3vs000wp4wv44a245ur","tag_id":"cm64rn3w4001up4wvaoqx6wmi","_id":"cm64rn3w5001yp4wv12fghe0j"},{"post_id":"cm64rn3vt000yp4wvau3afyq3","tag_id":"cm64rn3w3001qp4wv98iu89o3","_id":"cm64rn3w50020p4wv91bg90hu"},{"post_id":"cm64rn3vu0010p4wvgifo75ux","tag_id":"cm64rn3w5001zp4wva9tj51z7","_id":"cm64rn3w60023p4wv0vyt9sp7"},{"post_id":"cm64rn3vu0010p4wvgifo75ux","tag_id":"cm64rn3w50021p4wv6nixczy1","_id":"cm64rn3w60024p4wv1uy518b3"},{"post_id":"cm64rn3vu0013p4wvb5ma1spv","tag_id":"cm64rn3w50022p4wveqt4h7ol","_id":"cm64rn3w60026p4wvakqy146b"},{"post_id":"cm64rn3vv0015p4wvgbxsh4u6","tag_id":"cm64rn3w60025p4wvh66ramtb","_id":"cm64rn3w60028p4wv2jbb15m6"},{"post_id":"cm64rn3vx0019p4wv9tc49yd0","tag_id":"cm64rn3w60025p4wvh66ramtb","_id":"cm64rn3w6002ap4wv9nhx0ziw"},{"post_id":"cm64rn3vy001bp4wv7ldi930e","tag_id":"cm64rn3w60025p4wvh66ramtb","_id":"cm64rn3w6002cp4wv0tn72f3v"},{"post_id":"cm64rn3vz001dp4wvglluan6b","tag_id":"cm64rn3w60025p4wvh66ramtb","_id":"cm64rn3w7002ep4wvch8ua7ox"},{"post_id":"cm64rn3w0001fp4wvd4pce5xk","tag_id":"cm64rn3w7002dp4wvbfmfcwjr","_id":"cm64rn3w7002hp4wv80jv3nwh"},{"post_id":"cm64rn3w0001fp4wvd4pce5xk","tag_id":"cm64rn3w7002fp4wv8qxb3crf","_id":"cm64rn3w7002ip4wv5mhj9jxj"},{"post_id":"cm64rn3w1001hp4wv3doifply","tag_id":"cm64rn3w7002dp4wvbfmfcwjr","_id":"cm64rn3w8002lp4wv4c37cxbn"},{"post_id":"cm64rn3w1001hp4wv3doifply","tag_id":"cm64rn3w7002fp4wv8qxb3crf","_id":"cm64rn3w8002mp4wv768xb7oy"},{"post_id":"cm64rn3w2001kp4wv8tam3jam","tag_id":"cm64rn3w7002dp4wvbfmfcwjr","_id":"cm64rn3w8002pp4wv7zaoba5s"},{"post_id":"cm64rn3w2001kp4wv8tam3jam","tag_id":"cm64rn3w7002fp4wv8qxb3crf","_id":"cm64rn3w9002qp4wv5bcz16m0"},{"post_id":"cm64rn3w2001mp4wv41z9e6q6","tag_id":"cm64rn3w8002op4wvhj4hhygb","_id":"cm64rn3w9002tp4wv5gutfmfz"},{"post_id":"cm64rn3w2001mp4wv41z9e6q6","tag_id":"cm64rn3w9002rp4wvcj6rem89","_id":"cm64rn3w9002up4wv62ds8ki7"},{"post_id":"cm64rn3w3001op4wvf2ie29bi","tag_id":"cm64rn3w8002op4wvhj4hhygb","_id":"cm64rn3w9002wp4wv3fna6r46"},{"post_id":"cm64rn3w3001pp4wvegcbfnyn","tag_id":"cm64rn3w8002op4wvhj4hhygb","_id":"cm64rn3w9002yp4wv5o41fypl"},{"post_id":"cm64rn3w4001rp4wv2tie120t","tag_id":"cm64rn3w8002op4wvhj4hhygb","_id":"cm64rn3w9002zp4wva46d9xed"},{"post_id":"cm64rn3wd0030p4wv8mjr20hc","tag_id":"cm64rn3w50021p4wv6nixczy1","_id":"cm64rn3wf0032p4wv447jad4e"},{"post_id":"cm64rn3we0031p4wv7a5s3xau","tag_id":"cm64rn3wg0034p4wv19ug2w33","_id":"cm64rn3wh0039p4wve40fc8rx"},{"post_id":"cm64rn3wh0037p4wvb3e1ev7q","tag_id":"cm64rn3w7002dp4wvbfmfcwjr","_id":"cm64rn3wi003bp4wvexf96gk7"},{"post_id":"cm64rn3wh0037p4wvb3e1ev7q","tag_id":"cm64rn3w50021p4wv6nixczy1","_id":"cm64rn3wj003ep4wvedu3dbiq"},{"post_id":"cm64rn3wf0033p4wv4ov3cv01","tag_id":"cm64rn3wh0038p4wvgasn1bsp","_id":"cm64rn3wj003gp4wvfggid8dm"},{"post_id":"cm64rn3wf0033p4wv4ov3cv01","tag_id":"cm64rn3w50021p4wv6nixczy1","_id":"cm64rn3wj003ip4wvhzp07zzu"},{"post_id":"cm64rn3wj003fp4wvbuxo4zgn","tag_id":"cm64rn3w7002fp4wv8qxb3crf","_id":"cm64rn3wj003jp4wv9kjec6o3"},{"post_id":"cm64rn3wg0035p4wvalez14q1","tag_id":"cm64rn3wh0038p4wvgasn1bsp","_id":"cm64rn3wj003lp4wve83ya85k"},{"post_id":"cm64rn3wg0036p4wv49bw300y","tag_id":"cm64rn3vu0011p4wv8cp34z51","_id":"cm64rn3wk003np4wv0ikgbljp"},{"post_id":"cm64rn3wg0036p4wv49bw300y","tag_id":"cm64rn3wj003hp4wv3aow5e28","_id":"cm64rn3wk003op4wvdl8a5tkd"},{"post_id":"cm64rn3wg0036p4wv49bw300y","tag_id":"cm64rn3wj003kp4wvdn0qauk8","_id":"cm64rn3wk003qp4wv0sl27ohx"},{"post_id":"cm64rn3wh003ap4wvdnd10147","tag_id":"cm64rn3va0003p4wvct3k33vi","_id":"cm64rn3wk003sp4wv35lb135g"},{"post_id":"cm64rn3wh003ap4wvdnd10147","tag_id":"cm64rn3wk003mp4wvfeqw13yx","_id":"cm64rn3wk003tp4wvauj76wiu"},{"post_id":"cm64rn3wh003ap4wvdnd10147","tag_id":"cm64rn3wj003kp4wvdn0qauk8","_id":"cm64rn3wk003up4wv0immfa3k"},{"post_id":"cm64rn3wi003cp4wv0h2951jh","tag_id":"cm64rn3w4001up4wvaoqx6wmi","_id":"cm64rn3wk003vp4wvazh0emxx"},{"post_id":"cm64rn3wi003cp4wv0h2951jh","tag_id":"cm64rn3wj003kp4wvdn0qauk8","_id":"cm64rn3wk003wp4wv9mcj4ls4"}],"Tag":[{"name":"前端","_id":"cm64rn3va0003p4wvct3k33vi"},{"name":"CSS","_id":"cm64rn3ve0007p4wvgp28aqtm"},{"name":"Nodejs","_id":"cm64rn3vn000gp4wvahis9crw"},{"name":"HTML","_id":"cm64rn3vr000qp4wv4am50458"},{"name":"Vue3","_id":"cm64rn3vs000vp4wv8gy365jm"},{"name":"后端","_id":"cm64rn3vu0011p4wv8cp34z51"},{"name":"Linux","_id":"cm64rn3w0001ep4wv32fwdzod"},{"name":"数据库","_id":"cm64rn3w3001np4wvdwe66qtl"},{"name":"学习项目","_id":"cm64rn3w3001qp4wv98iu89o3"},{"name":"Python","_id":"cm64rn3w4001up4wvaoqx6wmi"},{"name":"Vim","_id":"cm64rn3w5001zp4wva9tj51z7"},{"name":"学习笔记","_id":"cm64rn3w50021p4wv6nixczy1"},{"name":"GIT","_id":"cm64rn3w50022p4wveqt4h7ol"},{"name":"算法竞赛","_id":"cm64rn3w60025p4wvh66ramtb"},{"name":"总结","_id":"cm64rn3w7002dp4wvbfmfcwjr"},{"name":"生活","_id":"cm64rn3w7002fp4wv8qxb3crf"},{"name":"无人机","_id":"cm64rn3w8002op4wvhj4hhygb"},{"name":"嵌入式","_id":"cm64rn3w9002rp4wvcj6rem89"},{"name":"底层原理","_id":"cm64rn3wg0034p4wv19ug2w33"},{"name":"阅读笔记","_id":"cm64rn3wh0038p4wvgasn1bsp"},{"name":"Go","_id":"cm64rn3wj003hp4wv3aow5e28"},{"name":"语言学习","_id":"cm64rn3wj003kp4wvdn0qauk8"},{"name":"JS","_id":"cm64rn3wk003mp4wvfeqw13yx"}]}}